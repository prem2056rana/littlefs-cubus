
Littlefs27ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800c374  0800c374  0001c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f8  0800d0f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f8  0800d0f8  0001d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d100  0800d100  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000324  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d35  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d7  00000000  00000000  00036dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001350  00000000  00000000  0003a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035d5  00000000  00000000  0003bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012313  00000000  00000000  0003f16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6125  00000000  00000000  00051480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001275a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c8  00000000  00000000  001275f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c35c 	.word	0x0800c35c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800c35c 	.word	0x0800c35c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468c      	mov	ip, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8083 	bne.w	800040e <__udivmoddi4+0x116>
 8000308:	428a      	cmp	r2, r1
 800030a:	4617      	mov	r7, r2
 800030c:	d947      	bls.n	800039e <__udivmoddi4+0xa6>
 800030e:	fab2 f282 	clz	r2, r2
 8000312:	b142      	cbz	r2, 8000326 <__udivmoddi4+0x2e>
 8000314:	f1c2 0020 	rsb	r0, r2, #32
 8000318:	fa24 f000 	lsr.w	r0, r4, r0
 800031c:	4091      	lsls	r1, r2
 800031e:	4097      	lsls	r7, r2
 8000320:	ea40 0c01 	orr.w	ip, r0, r1
 8000324:	4094      	lsls	r4, r2
 8000326:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fbbc f6f8 	udiv	r6, ip, r8
 8000330:	fa1f fe87 	uxth.w	lr, r7
 8000334:	fb08 c116 	mls	r1, r8, r6, ip
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb06 f10e 	mul.w	r1, r6, lr
 8000340:	4299      	cmp	r1, r3
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x60>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 30ff 	add.w	r0, r6, #4294967295
 800034a:	f080 8119 	bcs.w	8000580 <__udivmoddi4+0x288>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 8116 	bls.w	8000580 <__udivmoddi4+0x288>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000360:	fb08 3310 	mls	r3, r8, r0, r3
 8000364:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000368:	fb00 fe0e 	mul.w	lr, r0, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x8c>
 8000370:	193c      	adds	r4, r7, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	f080 8105 	bcs.w	8000584 <__udivmoddi4+0x28c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f240 8102 	bls.w	8000584 <__udivmoddi4+0x28c>
 8000380:	3802      	subs	r0, #2
 8000382:	443c      	add	r4, r7
 8000384:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000388:	eba4 040e 	sub.w	r4, r4, lr
 800038c:	2600      	movs	r6, #0
 800038e:	b11d      	cbz	r5, 8000398 <__udivmoddi4+0xa0>
 8000390:	40d4      	lsrs	r4, r2
 8000392:	2300      	movs	r3, #0
 8000394:	e9c5 4300 	strd	r4, r3, [r5]
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	b902      	cbnz	r2, 80003a2 <__udivmoddi4+0xaa>
 80003a0:	deff      	udf	#255	; 0xff
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d150      	bne.n	800044c <__udivmoddi4+0x154>
 80003aa:	1bcb      	subs	r3, r1, r7
 80003ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	2601      	movs	r6, #1
 80003b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ba:	0c21      	lsrs	r1, r4, #16
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb08 f30c 	mul.w	r3, r8, ip
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0xe4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0xe2>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	f200 80e9 	bhi.w	80005ac <__udivmoddi4+0x2b4>
 80003da:	4684      	mov	ip, r0
 80003dc:	1ac9      	subs	r1, r1, r3
 80003de:	b2a3      	uxth	r3, r4
 80003e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003ec:	fb08 f800 	mul.w	r8, r8, r0
 80003f0:	45a0      	cmp	r8, r4
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x10c>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x10a>
 80003fc:	45a0      	cmp	r8, r4
 80003fe:	f200 80d9 	bhi.w	80005b4 <__udivmoddi4+0x2bc>
 8000402:	4618      	mov	r0, r3
 8000404:	eba4 0408 	sub.w	r4, r4, r8
 8000408:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800040c:	e7bf      	b.n	800038e <__udivmoddi4+0x96>
 800040e:	428b      	cmp	r3, r1
 8000410:	d909      	bls.n	8000426 <__udivmoddi4+0x12e>
 8000412:	2d00      	cmp	r5, #0
 8000414:	f000 80b1 	beq.w	800057a <__udivmoddi4+0x282>
 8000418:	2600      	movs	r6, #0
 800041a:	e9c5 0100 	strd	r0, r1, [r5]
 800041e:	4630      	mov	r0, r6
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	fab3 f683 	clz	r6, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d14a      	bne.n	80004c4 <__udivmoddi4+0x1cc>
 800042e:	428b      	cmp	r3, r1
 8000430:	d302      	bcc.n	8000438 <__udivmoddi4+0x140>
 8000432:	4282      	cmp	r2, r0
 8000434:	f200 80b8 	bhi.w	80005a8 <__udivmoddi4+0x2b0>
 8000438:	1a84      	subs	r4, r0, r2
 800043a:	eb61 0103 	sbc.w	r1, r1, r3
 800043e:	2001      	movs	r0, #1
 8000440:	468c      	mov	ip, r1
 8000442:	2d00      	cmp	r5, #0
 8000444:	d0a8      	beq.n	8000398 <__udivmoddi4+0xa0>
 8000446:	e9c5 4c00 	strd	r4, ip, [r5]
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f603 	lsr.w	r6, r0, r3
 8000454:	4097      	lsls	r7, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045e:	40d9      	lsrs	r1, r3
 8000460:	4330      	orrs	r0, r6
 8000462:	0c03      	lsrs	r3, r0, #16
 8000464:	fbb1 f6fe 	udiv	r6, r1, lr
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000470:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000474:	fb06 f108 	mul.w	r1, r6, r8
 8000478:	4299      	cmp	r1, r3
 800047a:	fa04 f402 	lsl.w	r4, r4, r2
 800047e:	d909      	bls.n	8000494 <__udivmoddi4+0x19c>
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	f106 3cff 	add.w	ip, r6, #4294967295
 8000486:	f080 808d 	bcs.w	80005a4 <__udivmoddi4+0x2ac>
 800048a:	4299      	cmp	r1, r3
 800048c:	f240 808a 	bls.w	80005a4 <__udivmoddi4+0x2ac>
 8000490:	3e02      	subs	r6, #2
 8000492:	443b      	add	r3, r7
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b281      	uxth	r1, r0
 8000498:	fbb3 f0fe 	udiv	r0, r3, lr
 800049c:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb00 f308 	mul.w	r3, r0, r8
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x1c4>
 80004ac:	1879      	adds	r1, r7, r1
 80004ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b2:	d273      	bcs.n	800059c <__udivmoddi4+0x2a4>
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d971      	bls.n	800059c <__udivmoddi4+0x2a4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4439      	add	r1, r7
 80004bc:	1acb      	subs	r3, r1, r3
 80004be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004c2:	e778      	b.n	80003b6 <__udivmoddi4+0xbe>
 80004c4:	f1c6 0c20 	rsb	ip, r6, #32
 80004c8:	fa03 f406 	lsl.w	r4, r3, r6
 80004cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d0:	431c      	orrs	r4, r3
 80004d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004d6:	fa01 f306 	lsl.w	r3, r1, r6
 80004da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004de:	fa21 f10c 	lsr.w	r1, r1, ip
 80004e2:	431f      	orrs	r7, r3
 80004e4:	0c3b      	lsrs	r3, r7, #16
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fa1f f884 	uxth.w	r8, r4
 80004ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f6:	fb09 fa08 	mul.w	sl, r9, r8
 80004fa:	458a      	cmp	sl, r1
 80004fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000500:	fa00 f306 	lsl.w	r3, r0, r6
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x220>
 8000506:	1861      	adds	r1, r4, r1
 8000508:	f109 30ff 	add.w	r0, r9, #4294967295
 800050c:	d248      	bcs.n	80005a0 <__udivmoddi4+0x2a8>
 800050e:	458a      	cmp	sl, r1
 8000510:	d946      	bls.n	80005a0 <__udivmoddi4+0x2a8>
 8000512:	f1a9 0902 	sub.w	r9, r9, #2
 8000516:	4421      	add	r1, r4
 8000518:	eba1 010a 	sub.w	r1, r1, sl
 800051c:	b2bf      	uxth	r7, r7
 800051e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000522:	fb0e 1110 	mls	r1, lr, r0, r1
 8000526:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800052a:	fb00 f808 	mul.w	r8, r0, r8
 800052e:	45b8      	cmp	r8, r7
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x24a>
 8000532:	19e7      	adds	r7, r4, r7
 8000534:	f100 31ff 	add.w	r1, r0, #4294967295
 8000538:	d22e      	bcs.n	8000598 <__udivmoddi4+0x2a0>
 800053a:	45b8      	cmp	r8, r7
 800053c:	d92c      	bls.n	8000598 <__udivmoddi4+0x2a0>
 800053e:	3802      	subs	r0, #2
 8000540:	4427      	add	r7, r4
 8000542:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000546:	eba7 0708 	sub.w	r7, r7, r8
 800054a:	fba0 8902 	umull	r8, r9, r0, r2
 800054e:	454f      	cmp	r7, r9
 8000550:	46c6      	mov	lr, r8
 8000552:	4649      	mov	r1, r9
 8000554:	d31a      	bcc.n	800058c <__udivmoddi4+0x294>
 8000556:	d017      	beq.n	8000588 <__udivmoddi4+0x290>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x27a>
 800055a:	ebb3 020e 	subs.w	r2, r3, lr
 800055e:	eb67 0701 	sbc.w	r7, r7, r1
 8000562:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000566:	40f2      	lsrs	r2, r6
 8000568:	ea4c 0202 	orr.w	r2, ip, r2
 800056c:	40f7      	lsrs	r7, r6
 800056e:	e9c5 2700 	strd	r2, r7, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	462e      	mov	r6, r5
 800057c:	4628      	mov	r0, r5
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xa0>
 8000580:	4606      	mov	r6, r0
 8000582:	e6e9      	b.n	8000358 <__udivmoddi4+0x60>
 8000584:	4618      	mov	r0, r3
 8000586:	e6fd      	b.n	8000384 <__udivmoddi4+0x8c>
 8000588:	4543      	cmp	r3, r8
 800058a:	d2e5      	bcs.n	8000558 <__udivmoddi4+0x260>
 800058c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000590:	eb69 0104 	sbc.w	r1, r9, r4
 8000594:	3801      	subs	r0, #1
 8000596:	e7df      	b.n	8000558 <__udivmoddi4+0x260>
 8000598:	4608      	mov	r0, r1
 800059a:	e7d2      	b.n	8000542 <__udivmoddi4+0x24a>
 800059c:	4660      	mov	r0, ip
 800059e:	e78d      	b.n	80004bc <__udivmoddi4+0x1c4>
 80005a0:	4681      	mov	r9, r0
 80005a2:	e7b9      	b.n	8000518 <__udivmoddi4+0x220>
 80005a4:	4666      	mov	r6, ip
 80005a6:	e775      	b.n	8000494 <__udivmoddi4+0x19c>
 80005a8:	4630      	mov	r0, r6
 80005aa:	e74a      	b.n	8000442 <__udivmoddi4+0x14a>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	4439      	add	r1, r7
 80005b2:	e713      	b.n	80003dc <__udivmoddi4+0xe4>
 80005b4:	3802      	subs	r0, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e724      	b.n	8000404 <__udivmoddi4+0x10c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	bf38      	it	cc
 80005d2:	4613      	movcc	r3, r2
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	bf28      	it	cs
 80005f2:	4613      	movcs	r3, r2
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	fb01 f202 	mul.w	r2, r1, r2
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	1ad3      	subs	r3, r2, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	3b01      	subs	r3, #1
 800063c:	6839      	ldr	r1, [r7, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffde 	bl	8000600 <lfs_aligndown>
 8000644:	4603      	mov	r3, r0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3b01      	subs	r3, #1
 800065a:	fab3 f383 	clz	r3, r3
 800065e:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	fa93 f3a3 	rbit	r3, r3
 800067c:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff fe1b 	bl	80002d0 <__popcountsi2>
 800069a:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80006c8:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff ffee 	bl	80006c0 <lfs_fromle32>
 80006e4:	4603      	mov	r3, r0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ffed 	bl	80006ee <lfs_frombe32>
 8000714:	4603      	mov	r3, r0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f00a fc50 	bl	800afcc <malloc>
 800072c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f00a fc4c 	bl	800afdc <free>
#else
    (void)p;
#endif
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	68d8      	ldr	r0, [r3, #12]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800077c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077e:	461a      	mov	r2, r3
 8000780:	21ff      	movs	r1, #255	; 0xff
 8000782:	f00a fc4f 	bl	800b024 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af02      	add	r7, sp, #8
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80007a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a8:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 80007aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ae:	441a      	add	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d80a      	bhi.n	80007d0 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 8124 	beq.w	8000a0c <lfs_bd_read+0x274>
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ca:	429a      	cmp	r2, r3
 80007cc:	f0c0 811e 	bcc.w	8000a0c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 80007d0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80007d4:	e11f      	b.n	8000a16 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80007d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d8:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d03f      	beq.n	8000860 <lfs_bd_read+0xc8>
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d13a      	bne.n	8000860 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80007f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d232      	bcs.n	8000860 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000800:	429a      	cmp	r2, r3
 8000802:	d324      	bcc.n	800084e <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	6859      	ldr	r1, [r3, #4]
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	1acb      	subs	r3, r1, r3
 8000810:	4413      	add	r3, r2
 8000812:	4619      	mov	r1, r3
 8000814:	69b8      	ldr	r0, [r7, #24]
 8000816:	f7ff fee3 	bl	80005e0 <lfs_min>
 800081a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000826:	1acb      	subs	r3, r1, r3
 8000828:	4413      	add	r3, r2
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4619      	mov	r1, r3
 800082e:	69f8      	ldr	r0, [r7, #28]
 8000830:	f00a fbea 	bl	800b008 <memcpy>

                data += diff;
 8000834:	69fa      	ldr	r2, [r7, #28]
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	4413      	add	r3, r2
 800083a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800083c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	4413      	add	r3, r2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800084c:	e0de      	b.n	8000a0c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	4619      	mov	r1, r3
 8000858:	69b8      	ldr	r0, [r7, #24]
 800085a:	f7ff fec1 	bl	80005e0 <lfs_min>
 800085e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000866:	429a      	cmp	r2, r3
 8000868:	d13a      	bne.n	80008e0 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000876:	429a      	cmp	r2, r3
 8000878:	d232      	bcs.n	80008e0 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000880:	429a      	cmp	r2, r3
 8000882:	d324      	bcc.n	80008ce <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6859      	ldr	r1, [r3, #4]
 800088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	4413      	add	r3, r2
 8000892:	4619      	mov	r1, r3
 8000894:	69b8      	ldr	r0, [r7, #24]
 8000896:	f7ff fea3 	bl	80005e0 <lfs_min>
 800089a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	4413      	add	r3, r2
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4619      	mov	r1, r3
 80008ae:	69f8      	ldr	r0, [r7, #28]
 80008b0:	f00a fbaa 	bl	800b008 <memcpy>

                data += diff;
 80008b4:	69fa      	ldr	r2, [r7, #28]
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	4413      	add	r3, r2
 80008ba:	61fb      	str	r3, [r7, #28]
                off += diff;
 80008bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	4413      	add	r3, r2
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80008c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80008cc:	e09e      	b.n	8000a0c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	69b8      	ldr	r0, [r7, #24]
 80008da:	f7ff fe81 	bl	80005e0 <lfs_min>
 80008de:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80008e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d336      	bcc.n	8000956 <lfs_bd_read+0x1be>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80008f4:	fb02 f201 	mul.w	r2, r2, r1
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d12b      	bne.n	8000956 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000902:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000906:	429a      	cmp	r2, r3
 8000908:	d325      	bcc.n	8000956 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4619      	mov	r1, r3
 8000912:	69b8      	ldr	r0, [r7, #24]
 8000914:	f7ff fe74 	bl	8000600 <lfs_aligndown>
 8000918:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800091e:	685c      	ldr	r4, [r3, #4]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800092e:	47a0      	blx	r4
 8000930:	6178      	str	r0, [r7, #20]
            if (err) {
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <lfs_bd_read+0x1a4>
                return err;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	e06c      	b.n	8000a16 <lfs_bd_read+0x27e>
            }

            data += diff;
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4413      	add	r3, r2
 8000942:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4413      	add	r3, r2
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800094c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000954:	e05a      	b.n	8000a0c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <lfs_bd_read+0x1dc>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000964:	429a      	cmp	r2, r3
 8000966:	d305      	bcc.n	8000974 <lfs_bd_read+0x1dc>
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <lfs_bd_read+0x288>)
 800096a:	4a2e      	ldr	r2, [pc, #184]	; (8000a24 <lfs_bd_read+0x28c>)
 800096c:	216b      	movs	r1, #107	; 0x6b
 800096e:	482e      	ldr	r0, [pc, #184]	; (8000a28 <lfs_bd_read+0x290>)
 8000970:	f00a fad2 	bl	800af18 <__assert_func>
        rcache->block = block;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000978:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4619      	mov	r1, r3
 8000982:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000984:	f7ff fe3c 	bl	8000600 <lfs_aligndown>
 8000988:	4602      	mov	r2, r0
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800098e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff fe44 	bl	800062a <lfs_alignup>
 80009a2:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fe17 	bl	80005e0 <lfs_min>
 80009b2:	4602      	mov	r2, r0
                - rcache->off,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80009b8:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4610      	mov	r0, r2
 80009c4:	f7ff fe0c 	bl	80005e0 <lfs_min>
 80009c8:	4602      	mov	r2, r0
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009d2:	685c      	ldr	r4, [r3, #4]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	462b      	mov	r3, r5
 80009ec:	47a0      	blx	r4
 80009ee:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dd05      	ble.n	8000a02 <lfs_bd_read+0x26a>
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <lfs_bd_read+0x294>)
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <lfs_bd_read+0x28c>)
 80009fa:	2176      	movs	r1, #118	; 0x76
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <lfs_bd_read+0x290>)
 80009fe:	f00a fa8b 	bl	800af18 <__assert_func>
        if (err) {
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <lfs_bd_read+0x274>
            return err;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	e004      	b.n	8000a16 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f47f aee1 	bne.w	80007d6 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	0800c374 	.word	0x0800c374
 8000a24:	0800ce74 	.word	0x0800ce74
 8000a28:	0800c3a4 	.word	0x0800c3a4
 8000a2c:	0800c3b8 	.word	0x0800c3b8

08000a30 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b090      	sub	sp, #64	; 0x40
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4a:	e039      	b.n	8000ac0 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2108      	movs	r1, #8
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fdc3 	bl	80005e0 <lfs_min>
 8000a5a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a60:	1ad1      	subs	r1, r2, r3
 8000a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a66:	4413      	add	r3, r2
 8000a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6a:	9203      	str	r2, [sp, #12]
 8000a6c:	f107 0214 	add.w	r2, r7, #20
 8000a70:	9202      	str	r2, [sp, #8]
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fe8a 	bl	8000798 <lfs_bd_read>
 8000a84:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <lfs_bd_cmp+0x60>
            return err;
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	e01c      	b.n	8000aca <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	18d1      	adds	r1, r2, r3
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00a faa5 	bl	800afec <memcmp>
 8000aa2:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da01      	bge.n	8000ab4 <lfs_bd_cmp+0x84>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e00a      	b.n	8000aca <lfs_bd_cmp+0x9a>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e008      	b.n	8000aca <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	4413      	add	r3, r2
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d3c1      	bcc.n	8000a4c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b08e      	sub	sp, #56	; 0x38
 8000ad6:	af04      	add	r7, sp, #16
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae8:	e030      	b.n	8000b4c <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2108      	movs	r1, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd74 	bl	80005e0 <lfs_min>
 8000af8:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	1ad1      	subs	r1, r2, r3
 8000b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	4413      	add	r3, r2
 8000b06:	6a3a      	ldr	r2, [r7, #32]
 8000b08:	9203      	str	r2, [sp, #12]
 8000b0a:	f107 0214 	add.w	r2, r7, #20
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	460b      	mov	r3, r1
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	68b9      	ldr	r1, [r7, #8]
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fe3b 	bl	8000798 <lfs_bd_read>
 8000b22:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <lfs_bd_crc+0x5c>
            return err;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	e013      	b.n	8000b56 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f107 0114 	add.w	r1, r7, #20
 8000b36:	6a3a      	ldr	r2, [r7, #32]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fb05 	bl	8007148 <lfs_crc>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b42:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	4413      	add	r3, r2
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3ca      	bcc.n	8000aea <lfs_bd_crc+0x18>
    }

    return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b76:	d060      	beq.n	8000c3a <lfs_bd_flush+0xda>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f113 0f02 	cmn.w	r3, #2
 8000b80:	d05b      	beq.n	8000c3a <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d305      	bcc.n	8000b9a <lfs_bd_flush+0x3a>
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <lfs_bd_flush+0xe4>)
 8000b90:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <lfs_bd_flush+0xe8>)
 8000b92:	21b3      	movs	r1, #179	; 0xb3
 8000b94:	482d      	ldr	r0, [pc, #180]	; (8000c4c <lfs_bd_flush+0xec>)
 8000b96:	f00a f9bf 	bl	800af18 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	f7ff fd3f 	bl	800062a <lfs_alignup>
 8000bac:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bb2:	689c      	ldr	r4, [r3, #8]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	462b      	mov	r3, r5
 8000bca:	47a0      	blx	r4
 8000bcc:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd05      	ble.n	8000be0 <lfs_bd_flush+0x80>
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <lfs_bd_flush+0xf0>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <lfs_bd_flush+0xe8>)
 8000bd8:	21b7      	movs	r1, #183	; 0xb7
 8000bda:	481c      	ldr	r0, [pc, #112]	; (8000c4c <lfs_bd_flush+0xec>)
 8000bdc:	f00a f99c 	bl	800af18 <__assert_func>
        if (err) {
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <lfs_bd_flush+0x8a>
            return err;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	e028      	b.n	8000c3c <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff fdaa 	bl	800074c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000c04:	69f8      	ldr	r0, [r7, #28]
 8000c06:	9003      	str	r0, [sp, #12]
 8000c08:	9102      	str	r1, [sp, #8]
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	2100      	movs	r1, #0
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff ff0b 	bl	8000a30 <lfs_bd_cmp>
 8000c1a:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da01      	bge.n	8000c26 <lfs_bd_flush+0xc6>
                return res;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000c2c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000c30:	e004      	b.n	8000c3c <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fd98 	bl	800076a <lfs_cache_zero>
    }

    return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	0800c3c4 	.word	0x0800c3c4
 8000c48:	0800ce80 	.word	0x0800ce80
 8000c4c:	0800c3a4 	.word	0x0800c3a4
 8000c50:	0800c3b8 	.word	0x0800c3b8

08000c54 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff fd71 	bl	800074c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff ff75 	bl	8000b60 <lfs_bd_flush>
 8000c76:	6178      	str	r0, [r7, #20]
    if (err) {
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <lfs_bd_sync+0x2e>
        return err;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	e011      	b.n	8000ca6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4798      	blx	r3
 8000c90:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dd05      	ble.n	8000ca4 <lfs_bd_sync+0x50>
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <lfs_bd_sync+0x5c>)
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <lfs_bd_sync+0x60>)
 8000c9c:	21dd      	movs	r1, #221	; 0xdd
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <lfs_bd_sync+0x64>)
 8000ca0:	f00a f93a 	bl	800af18 <__assert_func>
    return err;
 8000ca4:	697b      	ldr	r3, [r7, #20]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800c3b8 	.word	0x0800c3b8
 8000cb4:	0800ce90 	.word	0x0800ce90
 8000cb8:	0800c3a4 	.word	0x0800c3a4

08000cbc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ccc:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	f113 0f02 	cmn.w	r3, #2
 8000cd4:	d00a      	beq.n	8000cec <lfs_bd_prog+0x30>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d305      	bcc.n	8000cec <lfs_bd_prog+0x30>
 8000ce0:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <lfs_bd_prog+0x144>)
 8000ce2:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <lfs_bd_prog+0x148>)
 8000ce4:	21e8      	movs	r1, #232	; 0xe8
 8000ce6:	4848      	ldr	r0, [pc, #288]	; (8000e08 <lfs_bd_prog+0x14c>)
 8000ce8:	f00a f916 	bl	800af18 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf0:	441a      	add	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d978      	bls.n	8000dee <lfs_bd_prog+0x132>
 8000cfc:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <lfs_bd_prog+0x150>)
 8000cfe:	4a41      	ldr	r2, [pc, #260]	; (8000e04 <lfs_bd_prog+0x148>)
 8000d00:	21e9      	movs	r1, #233	; 0xe9
 8000d02:	4841      	ldr	r0, [pc, #260]	; (8000e08 <lfs_bd_prog+0x14c>)
 8000d04:	f00a f908 	bl	800af18 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d151      	bne.n	8000db6 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d34c      	bcc.n	8000db6 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	4413      	add	r3, r2
                off >= pcache->off &&
 8000d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d243      	bcs.n	8000db6 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	6859      	ldr	r1, [r3, #4]
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d42:	f7ff fc4d 	bl	80005e0 <lfs_min>
 8000d46:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	69f9      	ldr	r1, [r7, #28]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00a f954 	bl	800b008 <memcpy>

            data += diff;
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4413      	add	r3, r2
 8000d66:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fc1b 	bl	80005c0 <lfs_max>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d127      	bne.n	8000dee <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff fedb 	bl	8000b60 <lfs_bd_flush>
 8000daa:	6178      	str	r0, [r7, #20]
                if (err) {
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d01d      	beq.n	8000dee <lfs_bd_prog+0x132>
                    return err;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	e01f      	b.n	8000df6 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbe:	d006      	beq.n	8000dce <lfs_bd_prog+0x112>
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <lfs_bd_prog+0x154>)
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <lfs_bd_prog+0x148>)
 8000dc4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <lfs_bd_prog+0x14c>)
 8000dca:	f00a f8a5 	bl	800af18 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dd2:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dde:	f7ff fc0f 	bl	8000600 <lfs_aligndown>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d189      	bne.n	8000d08 <lfs_bd_prog+0x4c>
    }

    return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	0800c3e8 	.word	0x0800c3e8
 8000e04:	0800ce9c 	.word	0x0800ce9c
 8000e08:	0800c3a4 	.word	0x0800c3a4
 8000e0c:	0800c420 	.word	0x0800c420
 8000e10:	0800c444 	.word	0x0800c444

08000e14 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d306      	bcc.n	8000e36 <lfs_bd_erase+0x22>
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <lfs_bd_erase+0x54>)
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <lfs_bd_erase+0x58>)
 8000e2c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <lfs_bd_erase+0x5c>)
 8000e32:	f00a f871 	bl	800af18 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4610      	mov	r0, r2
 8000e44:	4798      	blx	r3
 8000e46:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	dd06      	ble.n	8000e5c <lfs_bd_erase+0x48>
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <lfs_bd_erase+0x60>)
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <lfs_bd_erase+0x58>)
 8000e52:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <lfs_bd_erase+0x5c>)
 8000e58:	f00a f85e 	bl	800af18 <__assert_func>
    return err;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0800c468 	.word	0x0800c468
 8000e6c:	0800cea8 	.word	0x0800cea8
 8000e70:	0800c3a4 	.word	0x0800c3a4
 8000e74:	0800c3b8 	.word	0x0800c3b8

08000e78 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3304      	adds	r3, #4
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb2:	d005      	beq.n	8000ec0 <lfs_pair_isnull+0x1e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebe:	d101      	bne.n	8000ec4 <lfs_pair_isnull+0x22>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <lfs_pair_isnull+0x24>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d017      	beq.n	8000f1e <lfs_pair_cmp+0x46>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d00f      	beq.n	8000f1e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3304      	adds	r3, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d008      	beq.n	8000f1e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d001      	beq.n	8000f1e <lfs_pair_cmp+0x46>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <lfs_pair_cmp+0x48>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d107      	bne.n	8000f52 <lfs_pair_issync+0x26>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3304      	adds	r3, #4
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00d      	beq.n	8000f6e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d108      	bne.n	8000f72 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3304      	adds	r3, #4
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d101      	bne.n	8000f72 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <lfs_pair_issync+0x48>
 8000f72:	2300      	movs	r3, #0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000f86:	b590      	push	{r4, r7, lr}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb94 	bl	80006c0 <lfs_fromle32>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1d1c      	adds	r4, r3, #4
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f7ff fb89 	bl	80006c0 <lfs_fromle32>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6023      	str	r3, [r4, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}

08000fba <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000fba:	b590      	push	{r4, r7, lr}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb85 	bl	80006d6 <lfs_tole32>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1d1c      	adds	r4, r3, #4
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f7ff fb7a 	bl	80006d6 <lfs_tole32>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6023      	str	r3, [r4, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}

08000fee <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	0fdb      	lsrs	r3, r3, #31
 8000ffc:	b2db      	uxtb	r3, r3
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	059b      	lsls	r3, r3, #22
 8001016:	159b      	asrs	r3, r3, #22
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0d1b      	lsrs	r3, r3, #20
 800103c:	b29b      	uxth	r3, r3
 800103e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0d1b      	lsrs	r3, r3, #20
 800105c:	b29b      	uxth	r3, r3
 800105e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	0d1b      	lsrs	r3, r3, #20
 800107c:	b29b      	uxth	r3, r3
 800107e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001082:	b29b      	uxth	r3, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	0d1b      	lsrs	r3, r3, #20
 800109c:	b2db      	uxtb	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffec 	bl	8001090 <lfs_tag_chunk>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b25b      	sxtb	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0a9b      	lsrs	r3, r3, #10
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010d6:	b29b      	uxth	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff7f 	bl	800100a <lfs_tag_isdelete>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffe5 	bl	80010e4 <lfs_tag_size>
 800111a:	4603      	mov	r3, r0
 800111c:	3304      	adds	r3, #4
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e012      	b.n	800115c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	4403      	add	r3, r0
 8001152:	404a      	eors	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	dde9      	ble.n	8001136 <lfs_gstate_xor+0x10>
    }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e00b      	b.n	8001196 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <lfs_gstate_iszero+0x20>
            return false;
 800118c:	2300      	movs	r3, #0
 800118e:	e006      	b.n	800119e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b02      	cmp	r3, #2
 800119a:	ddf0      	ble.n	800117e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff94 	bl	80010e4 <lfs_tag_size>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf14      	ite	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	2300      	moveq	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff81 	bl	80010e4 <lfs_tag_size>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b2db      	uxtb	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff18 	bl	8001030 <lfs_tag_type1>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5f 	bl	80010e4 <lfs_tag_size>
 8001226:	4603      	mov	r3, r0
 8001228:	0a5b      	lsrs	r3, r3, #9
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fef0 	bl	8001030 <lfs_tag_type1>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <lfs_gstate_hasmovehere+0x30>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe3b 	bl	8000ed8 <lfs_pair_cmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <lfs_gstate_hasmovehere+0x30>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <lfs_gstate_hasmovehere+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa19 	bl	80006c0 <lfs_fromle32>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fa11 	bl	80006c0 <lfs_fromle32>
 800129e:	4602      	mov	r2, r0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fa09 	bl	80006c0 <lfs_fromle32>
 80012ae:	4602      	mov	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa04 	bl	80006d6 <lfs_tole32>
 80012ce:	4602      	mov	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f9fc 	bl	80006d6 <lfs_tole32>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f9f4 	bl	80006d6 <lfs_tole32>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9d9 	bl	80006c0 <lfs_fromle32>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f9d1 	bl	80006c0 <lfs_fromle32>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f9cc 	bl	80006d6 <lfs_tole32>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f9c4 	bl	80006d6 <lfs_tole32>
 800134e:	4602      	mov	r2, r0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f9a9 	bl	80006c0 <lfs_fromle32>
 800136e:	4602      	mov	r2, r0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f9a1 	bl	80006c0 <lfs_fromle32>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f99c 	bl	80006d6 <lfs_tole32>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f994 	bl	80006d6 <lfs_tole32>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f979 	bl	80006c0 <lfs_fromle32>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f971 	bl	80006c0 <lfs_fromle32>
 80013de:	4602      	mov	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f969 	bl	80006c0 <lfs_fromle32>
 80013ee:	4602      	mov	r2, r0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f961 	bl	80006c0 <lfs_fromle32>
 80013fe:	4602      	mov	r2, r0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f959 	bl	80006c0 <lfs_fromle32>
 800140e:	4602      	mov	r2, r0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f951 	bl	80006c0 <lfs_fromle32>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	615a      	str	r2, [r3, #20]
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f94c 	bl	80006d6 <lfs_tole32>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f944 	bl	80006d6 <lfs_tole32>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f93c 	bl	80006d6 <lfs_tole32>
 800145e:	4602      	mov	r2, r0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f934 	bl	80006d6 <lfs_tole32>
 800146e:	4602      	mov	r2, r0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f92c 	bl	80006d6 <lfs_tole32>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f924 	bl	80006d6 <lfs_tole32>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e009      	b.n	80014c0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <lfs_mlist_isopen+0x1e>
            return true;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e007      	b.n	80014ca <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f1      	bne.n	80014ac <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3328      	adds	r3, #40	; 0x28
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e00d      	b.n	8001504 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d105      	bne.n	80014fe <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]
            break;
 80014fc:	e007      	b.n	800150e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ed      	bne.n	80014e8 <lfs_mlist_remove+0x12>
        }
    }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <lfs_fs_disk_version+0x18>)
    }
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	00020001 	.word	0x00020001

0800155c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffeb 	bl	8001540 <lfs_fs_disk_version>
 800156a:	4603      	mov	r3, r0
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	b29b      	uxth	r3, r3

}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffdd 	bl	8001540 <lfs_fs_disk_version>
 8001586:	4603      	mov	r3, r0
 8001588:	b29b      	uxth	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015ac:	4413      	add	r3, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 80015b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80015b6:	fb02 f201 	mul.w	r2, r2, r1
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d212      	bcs.n	80015ee <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	440a      	add	r2, r1
 80015d4:	6811      	ldr	r1, [r2, #0]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f002 021f 	and.w	r2, r2, #31
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4403      	add	r3, r0
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe5 	bl	80015fc <lfs_alloc_ack>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	4413      	add	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001652:	fbb3 f1f2 	udiv	r1, r3, r2
 8001656:	fb02 f201 	mul.w	r2, r2, r1
 800165a:	1a9a      	subs	r2, r3, r2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	00da      	lsls	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f7fe ffb6 	bl	80005e0 <lfs_min>
 8001674:	4602      	mov	r2, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	461a      	mov	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f009 fcc9 	bl	800b024 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001692:	2301      	movs	r3, #1
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4909      	ldr	r1, [pc, #36]	; (80016bc <lfs_fs_rawgc+0x80>)
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f004 fe59 	bl	8006350 <lfs_fs_rawtraverse>
 800169e:	60f8      	str	r0, [r7, #12]
    if (err) {
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffb6 	bl	8001618 <lfs_alloc_drop>
        return err;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	e000      	b.n	80016b2 <lfs_fs_rawgc+0x76>
    }

    return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08001593 	.word	0x08001593

080016c0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80016ca:	e04e      	b.n	800176a <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d131      	bne.n	800176a <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001712:	fbb3 f1f2 	udiv	r1, r3, r2
 8001716:	fb02 f201 	mul.w	r2, r2, r1
 800171a:	1a9a      	subs	r2, r3, r2
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001720:	e009      	b.n	8001736 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	429a      	cmp	r2, r3
 8001740:	d011      	beq.n	8001766 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1dd      	bne.n	8001722 <lfs_alloc+0x62>
                }

                return 0;
 8001766:	2300      	movs	r3, #0
 8001768:	e021      	b.n	80017ae <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	429a      	cmp	r2, r3
 8001774:	d1aa      	bne.n	80016cc <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	4413      	add	r3, r2
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <lfs_alloc+0xf8>)
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8001790:	490a      	ldr	r1, [pc, #40]	; (80017bc <lfs_alloc+0xfc>)
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <lfs_alloc+0x100>)
 8001794:	f009 ffe6 	bl	800b764 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001798:	f06f 031b 	mvn.w	r3, #27
 800179c:	e007      	b.n	80017ae <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff4c 	bl	800163c <lfs_fs_rawgc>
 80017a4:	60f8      	str	r0, [r7, #12]
        if(err) {
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d08e      	beq.n	80016ca <lfs_alloc+0xa>
            return err;
 80017ac:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800c4ac 	.word	0x0800c4ac
 80017bc:	0800c3a4 	.word	0x0800c3a4
 80017c0:	0800c484 	.word	0x0800c484

080017c4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08f      	sub	sp, #60	; 0x3c
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	333c      	adds	r3, #60	; 0x3c
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd26 	bl	800123c <lfs_gstate_hasmovehere>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b9 	beq.w	800196a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fc63 	bl	80010c4 <lfs_tag_id>
 80017fe:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80b2 	beq.w	800196a <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc5a 	bl	80010c4 <lfs_tag_id>
 8001810:	4603      	mov	r3, r0
 8001812:	461c      	mov	r4, r3
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f7ff fc55 	bl	80010c4 <lfs_tag_id>
 800181a:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800181c:	429c      	cmp	r4, r3
 800181e:	f200 80a4 	bhi.w	800196a <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001828:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800182a:	e09e      	b.n	800196a <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc65 	bl	80010fe <lfs_tag_dsize>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	9203      	str	r2, [sp, #12]
 800184a:	f107 0210 	add.w	r2, r7, #16
 800184e:	9202      	str	r2, [sp, #8]
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2304      	movs	r3, #4
 8001858:	460a      	mov	r2, r1
 800185a:	2100      	movs	r1, #0
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7fe ff9b 	bl	8000798 <lfs_bd_read>
 8001862:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <lfs_dir_getslice+0xaa>
            return err;
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	e089      	b.n	8001982 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe ff3c 	bl	80006ee <lfs_frombe32>
 8001876:	4602      	mov	r2, r0
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4053      	eors	r3, r2
 800187c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001880:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc1e 	bl	80010c4 <lfs_tag_id>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02b      	beq.n	80018e6 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800188e:	69f8      	ldr	r0, [r7, #28]
 8001890:	f7ff fbce 	bl	8001030 <lfs_tag_type1>
 8001894:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d124      	bne.n	80018e6 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800189c:	69f8      	ldr	r0, [r7, #28]
 800189e:	f7ff fc11 	bl	80010c4 <lfs_tag_id>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fc09 	bl	80010c4 <lfs_tag_id>
 80018b2:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d816      	bhi.n	80018e6 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	1ad2      	subs	r2, r2, r3
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <lfs_dir_getslice+0x1c8>)
 80018c0:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80018c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d102      	bne.n	80018d6 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80018d0:	f06f 0301 	mvn.w	r3, #1
 80018d4:	e055      	b.n	8001982 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80018d6:	69f8      	ldr	r0, [r7, #28]
 80018d8:	f7ff fbe7 	bl	80010aa <lfs_tag_splice>
 80018dc:	4603      	mov	r3, r0
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	4413      	add	r3, r2
 80018e4:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	405a      	eors	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d138      	bne.n	800196a <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 80018f8:	69f8      	ldr	r0, [r7, #28]
 80018fa:	f7ff fb86 	bl	800100a <lfs_tag_isdelete>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001904:	f06f 0301 	mvn.w	r3, #1
 8001908:	e03b      	b.n	8001982 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800190a:	69f8      	ldr	r0, [r7, #28]
 800190c:	f7ff fbea 	bl	80010e4 <lfs_tag_size>
 8001910:	4603      	mov	r3, r0
 8001912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe63 	bl	80005e0 <lfs_min>
 800191a:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001926:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001928:	3204      	adds	r2, #4
 800192a:	6979      	ldr	r1, [r7, #20]
 800192c:	9103      	str	r1, [sp, #12]
 800192e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001930:	9102      	str	r1, [sp, #8]
 8001932:	9201      	str	r2, [sp, #4]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4602      	mov	r2, r0
 800193a:	2100      	movs	r1, #0
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7fe ff2b 	bl	8000798 <lfs_bd_read>
 8001942:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <lfs_dir_getslice+0x18a>
                return err;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	e019      	b.n	8001982 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800194e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	18d0      	adds	r0, r2, r3
 8001954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	461a      	mov	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	f009 fb61 	bl	800b024 <memset>

            return tag + gdiff;
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	e00b      	b.n	8001982 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbc6 	bl	80010fe <lfs_tag_dsize>
 8001972:	4603      	mov	r3, r0
 8001974:	3304      	adds	r3, #4
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	429a      	cmp	r2, r3
 800197a:	f4bf af57 	bcs.w	800182c <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800197e:	f06f 0301 	mvn.w	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	372c      	adds	r7, #44	; 0x2c
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	000ffc00 	.word	0x000ffc00

08001990 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af04      	add	r7, sp, #16
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f7ff fba0 	bl	80010e4 <lfs_tag_size>
 80019a4:	4603      	mov	r3, r0
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff ff04 	bl	80017c4 <lfs_dir_getslice>
 80019bc:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b08c      	sub	sp, #48	; 0x30
 80019ca:	af04      	add	r7, sp, #16
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80019d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80019d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	441a      	add	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f240 80c0 	bls.w	8001b6a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80019ea:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80019ee:	e0c1      	b.n	8001b74 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80019f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d03f      	beq.n	8001a7a <lfs_dir_getread+0xb4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f113 0f02 	cmn.w	r3, #2
 8001a02:	d13a      	bne.n	8001a7a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d232      	bcs.n	8001a7a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d324      	bcc.n	8001a68 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	1acb      	subs	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f7fe fdd6 	bl	80005e0 <lfs_min>
 8001a34:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a40:	1acb      	subs	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4619      	mov	r1, r3
 8001a48:	69f8      	ldr	r0, [r7, #28]
 8001a4a:	f009 fadd 	bl	800b008 <memcpy>

                data += diff;
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	4413      	add	r3, r2
 8001a54:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001a66:	e080      	b.n	8001b6a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	69b8      	ldr	r0, [r7, #24]
 8001a74:	f7fe fdb4 	bl	80005e0 <lfs_min>
 8001a78:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f113 0f02 	cmn.w	r3, #2
 8001a82:	d13a      	bne.n	8001afa <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d232      	bcs.n	8001afa <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d324      	bcc.n	8001ae8 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	1acb      	subs	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	69b8      	ldr	r0, [r7, #24]
 8001ab0:	f7fe fd96 	bl	80005e0 <lfs_min>
 8001ab4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ac0:	1acb      	subs	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	69f8      	ldr	r0, [r7, #28]
 8001aca:	f009 fa9d 	bl	800b008 <memcpy>

                data += diff;
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4413      	add	r3, r2
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001ade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001ae6:	e040      	b.n	8001b6a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	69b8      	ldr	r0, [r7, #24]
 8001af4:	f7fe fd74 	bl	80005e0 <lfs_min>
 8001af8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f06f 0201 	mvn.w	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b0c:	f7fe fd78 	bl	8000600 <lfs_aligndown>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	441a      	add	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7fe fd80 	bl	800062a <lfs_alignup>
 8001b2a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7fe fd53 	bl	80005e0 <lfs_min>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6889      	ldr	r1, [r1, #8]
 8001b4c:	9102      	str	r1, [sp, #8]
 8001b4e:	9201      	str	r2, [sp, #4]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fe33 	bl	80017c4 <lfs_dir_getslice>
 8001b5e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da01      	bge.n	8001b6a <lfs_dir_getread+0x1a4>
            return err;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	e004      	b.n	8001b74 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f af3f 	bne.w	80019f0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <lfs_dir_traverse_filter+0x1e>
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <lfs_dir_traverse_filter+0xac>)
 8001b98:	e000      	b.n	8001b9c <lfs_dir_traverse_filter+0x20>
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b9c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	405a      	eors	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d014      	beq.n	8001bd8 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fa29 	bl	800100a <lfs_tag_isdelete>
 8001bb8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <lfs_dir_traverse_filter+0xac>)
 8001bc2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <lfs_dir_traverse_filter+0xb4>)
 8001bca:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001bcc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001bd0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d104      	bne.n	8001be2 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
        return true;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e01e      	b.n	8001c20 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f7ff fa24 	bl	8001030 <lfs_tag_type1>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d116      	bne.n	8001c1e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f7ff fa67 	bl	80010c4 <lfs_tag_id>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa60 	bl	80010c4 <lfs_tag_id>
 8001c04:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001c06:	429c      	cmp	r4, r3
 8001c08:	d809      	bhi.n	8001c1e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7ff fa4d 	bl	80010aa <lfs_tag_splice>
 8001c10:	4603      	mov	r3, r0
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	7ffffc00 	.word	0x7ffffc00
 8001c2c:	700ffc00 	.word	0x700ffc00
 8001c30:	000ffc00 	.word	0x000ffc00

08001c34 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b0c1      	sub	sp, #260	; 0x104
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f7ff fa53 	bl	80010fe <lfs_tag_dsize>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d237      	bcs.n	8001cd6 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f7ff fa49 	bl	80010fe <lfs_tag_dsize>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	9203      	str	r2, [sp, #12]
 8001c7e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c82:	9202      	str	r2, [sp, #8]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	2100      	movs	r1, #0
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7fe fd81 	bl	8000798 <lfs_bd_read>
 8001c96:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <lfs_dir_traverse+0x74>
                    return err;
 8001ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ca6:	e3d0      	b.n	800244a <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fd1f 	bl	80006ee <lfs_frombe32>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001cc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	e01b      	b.n	8001d0e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	dd13      	ble.n	8001d06 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8001cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001ce6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001cf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d04:	e003      	b.n	8001d0e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001d0c:	e2bd      	b.n	800228a <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001d0e:	4b86      	ldr	r3, [pc, #536]	; (8001f28 <lfs_dir_traverse+0x2f4>)
 8001d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d1a:	405a      	eors	r2, r3
 8001d1c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d24:	400b      	ands	r3, r1
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 82a1 	bne.w	8002270 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001d2e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001d32:	f7ff f9c7 	bl	80010c4 <lfs_tag_id>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80ff 	beq.w	8001f3c <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d906      	bls.n	8001d54 <lfs_dir_traverse+0x120>
 8001d46:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <lfs_dir_traverse+0x2f8>)
 8001d48:	4a79      	ldr	r2, [pc, #484]	; (8001f30 <lfs_dir_traverse+0x2fc>)
 8001d4a:	f240 319f 	movw	r1, #927	; 0x39f
 8001d4e:	4879      	ldr	r0, [pc, #484]	; (8001f34 <lfs_dir_traverse+0x300>)
 8001d50:	f009 f8e2 	bl	800af18 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d66:	4413      	add	r3, r2
 8001d68:	3b98      	subs	r3, #152	; 0x98
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b94      	subs	r3, #148	; 0x94
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d96:	4413      	add	r3, r2
 8001d98:	3b90      	subs	r3, #144	; 0x90
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dae:	4413      	add	r3, r2
 8001db0:	3b8c      	subs	r3, #140	; 0x8c
 8001db2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b88      	subs	r3, #136	; 0x88
 8001dcc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001de2:	4413      	add	r3, r2
 8001de4:	3b84      	subs	r3, #132	; 0x84
 8001de6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b80      	subs	r3, #128	; 0x80
 8001e00:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e16:	4413      	add	r3, r2
 8001e18:	3b7c      	subs	r3, #124	; 0x7c
 8001e1a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e30:	4413      	add	r3, r2
 8001e32:	3b7a      	subs	r3, #122	; 0x7a
 8001e34:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b78      	subs	r3, #120	; 0x78
 8001e4e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e64:	4413      	add	r3, r2
 8001e66:	3b74      	subs	r3, #116	; 0x74
 8001e68:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b70      	subs	r3, #112	; 0x70
 8001e82:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b6c      	subs	r3, #108	; 0x6c
 8001e9c:	6019      	str	r1, [r3, #0]
 8001e9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b68      	subs	r3, #104	; 0x68
 8001eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b68      	subs	r3, #104	; 0x68
 8001ecc:	3304      	adds	r3, #4
 8001ece:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed6:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001eda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <lfs_dir_traverse+0x304>)
 8001f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001f08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3328      	adds	r3, #40	; 0x28
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f24:	e695      	b.n	8001c52 <lfs_dir_traverse+0x1e>
 8001f26:	bf00      	nop
 8001f28:	7ff00000 	.word	0x7ff00000
 8001f2c:	0800c4b0 	.word	0x0800c4b0
 8001f30:	0800ceb8 	.word	0x0800ceb8
 8001f34:	0800c3a4 	.word	0x0800c3a4
 8001f38:	08001b7d 	.word	0x08001b7d
                continue;
            }
        }

popped:
 8001f3c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001f3e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001f42:	f7ff f8bf 	bl	80010c4 <lfs_tag_id>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8b8 	bl	80010c4 <lfs_tag_id>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001f58:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f200 8189 	bhi.w	8002274 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f8ad 	bl	80010c4 <lfs_tag_id>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f240 817e 	bls.w	8002274 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f878 	bl	8001070 <lfs_tag_type3>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f43f ae65 	beq.w	8001c52 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f870 	bl	8001070 <lfs_tag_type3>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	f240 1301 	movw	r3, #257	; 0x101
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 80ed 	bne.w	8002178 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fa2:	4ab7      	ldr	r2, [pc, #732]	; (8002280 <lfs_dir_traverse+0x64c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	f000 8167 	beq.w	8002278 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001faa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b98      	subs	r3, #152	; 0x98
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	233c      	movs	r3, #60	; 0x3c
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f009 f82d 	bl	800b024 <memset>
 8001fca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b98      	subs	r3, #152	; 0x98
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b94      	subs	r3, #148	; 0x94
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800200a:	4413      	add	r3, r2
 800200c:	3b90      	subs	r3, #144	; 0x90
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002022:	4413      	add	r3, r2
 8002024:	3b8c      	subs	r3, #140	; 0x8c
 8002026:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800203c:	4413      	add	r3, r2
 800203e:	3b88      	subs	r3, #136	; 0x88
 8002040:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002056:	4413      	add	r3, r2
 8002058:	3b84      	subs	r3, #132	; 0x84
 800205a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002070:	4413      	add	r3, r2
 8002072:	3b80      	subs	r3, #128	; 0x80
 8002074:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800208a:	4413      	add	r3, r2
 800208c:	3b7c      	subs	r3, #124	; 0x7c
 800208e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020a4:	4413      	add	r3, r2
 80020a6:	3b7a      	subs	r3, #122	; 0x7a
 80020a8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020be:	4413      	add	r3, r2
 80020c0:	3b78      	subs	r3, #120	; 0x78
 80020c2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020d8:	4413      	add	r3, r2
 80020da:	3b74      	subs	r3, #116	; 0x74
 80020dc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020f2:	4413      	add	r3, r2
 80020f4:	3b70      	subs	r3, #112	; 0x70
 80020f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80020fa:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80020fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002100:	3301      	adds	r3, #1
 8002102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ffeb 	bl	80010e4 <lfs_tag_size>
 800210e:	4603      	mov	r3, r0
 8002110:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ffd4 	bl	80010c4 <lfs_tag_id>
 800211c:	4603      	mov	r3, r0
 800211e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002126:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800213e:	4b51      	ldr	r3, [pc, #324]	; (8002284 <lfs_dir_traverse+0x650>)
 8002140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002144:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002148:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800214c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002154:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002158:	3301      	adds	r3, #1
 800215a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800215e:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002162:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b29a      	uxth	r2, r3
 800216a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002176:	e56c      	b.n	8001c52 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff78 	bl	8001070 <lfs_tag_type3>
 8002180:	4603      	mov	r3, r0
 8002182:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002186:	d159      	bne.n	800223c <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800218e:	e04b      	b.n	8002228 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8002190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002198:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	461a      	mov	r2, r3
 80021a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021b2:	051c      	lsls	r4, r3, #20
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe ff84 	bl	80010c4 <lfs_tag_id>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80021c4:	4413      	add	r3, r2
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	ea44 0103 	orr.w	r1, r4, r3
 80021cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021de:	4413      	add	r3, r2
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80021e4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021f6:	4413      	add	r3, r2
 80021f8:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80021fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021fe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002202:	4798      	blx	r3
 8002204:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002208:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800220c:	2b00      	cmp	r3, #0
 800220e:	da02      	bge.n	8002216 <lfs_dir_traverse+0x5e2>
                    return res;
 8002210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002214:	e119      	b.n	800244a <lfs_dir_traverse+0x816>
                }

                if (res) {
 8002216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12e      	bne.n	800227c <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800221e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ff5a 	bl	80010e4 <lfs_tag_size>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002236:	4293      	cmp	r3, r2
 8002238:	d3aa      	bcc.n	8002190 <lfs_dir_traverse+0x55c>
 800223a:	e50a      	b.n	8001c52 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800223c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002240:	029a      	lsls	r2, r3, #10
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	18d1      	adds	r1, r2, r3
 8002246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800224a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800224e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002252:	4798      	blx	r3
 8002254:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002258:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800225c:	2b00      	cmp	r3, #0
 800225e:	da02      	bge.n	8002266 <lfs_dir_traverse+0x632>
                return res;
 8002260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002264:	e0f1      	b.n	800244a <lfs_dir_traverse+0x816>
            }

            if (res) {
 8002266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <lfs_dir_traverse+0x654>
 800226e:	e4f0      	b.n	8001c52 <lfs_dir_traverse+0x1e>
                continue;
 8002270:	bf00      	nop
 8002272:	e4ee      	b.n	8001c52 <lfs_dir_traverse+0x1e>
            continue;
 8002274:	bf00      	nop
 8002276:	e4ec      	b.n	8001c52 <lfs_dir_traverse+0x1e>
                continue;
 8002278:	bf00      	nop
 800227a:	e4ea      	b.n	8001c52 <lfs_dir_traverse+0x1e>
                    break;
 800227c:	bf00      	nop
        {
 800227e:	e4e8      	b.n	8001c52 <lfs_dir_traverse+0x1e>
 8002280:	08001b7d 	.word	0x08001b7d
 8002284:	600ffc00 	.word	0x600ffc00
                break;
 8002288:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800228a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80d9 	beq.w	8002446 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002294:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022a6:	4413      	add	r3, r2
 80022a8:	3b98      	subs	r3, #152	; 0x98
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80022ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022c0:	4413      	add	r3, r2
 80022c2:	3b94      	subs	r3, #148	; 0x94
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80022c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022da:	4413      	add	r3, r2
 80022dc:	3b90      	subs	r3, #144	; 0x90
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80022e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022e6:	1e5a      	subs	r2, r3, #1
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022f4:	4413      	add	r3, r2
 80022f6:	3b8c      	subs	r3, #140	; 0x8c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80022fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002310:	4413      	add	r3, r2
 8002312:	3b88      	subs	r3, #136	; 0x88
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800231a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800232c:	4413      	add	r3, r2
 800232e:	3b84      	subs	r3, #132	; 0x84
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002348:	4413      	add	r3, r2
 800234a:	3b80      	subs	r3, #128	; 0x80
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002352:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002364:	4413      	add	r3, r2
 8002366:	3b7c      	subs	r3, #124	; 0x7c
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800236e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002380:	4413      	add	r3, r2
 8002382:	3b7a      	subs	r3, #122	; 0x7a
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800238a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800239c:	4413      	add	r3, r2
 800239e:	3b78      	subs	r3, #120	; 0x78
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80023a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023b8:	4413      	add	r3, r2
 80023ba:	3b74      	subs	r3, #116	; 0x74
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80023c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023d4:	4413      	add	r3, r2
 80023d6:	3b70      	subs	r3, #112	; 0x70
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80023de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023e2:	1e5a      	subs	r2, r3, #1
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023f0:	4413      	add	r3, r2
 80023f2:	3b6c      	subs	r3, #108	; 0x6c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80023f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800240a:	4413      	add	r3, r2
 800240c:	3b68      	subs	r3, #104	; 0x68
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002414:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002426:	4413      	add	r3, r2
 8002428:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800242c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002430:	3204      	adds	r2, #4
 8002432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002436:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800243a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800243e:	3b01      	subs	r3, #1
 8002440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002444:	e57b      	b.n	8001f3e <lfs_dir_traverse+0x30a>
    } else {
        return res;
 8002446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800244a:	4618      	mov	r0, r3
 800244c:	37f4      	adds	r7, #244	; 0xf4
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop

08002454 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b0a5      	sub	sp, #148	; 0x94
 8002458:	af04      	add	r7, sp, #16
 800245a:	6178      	str	r0, [r7, #20]
 800245c:	6139      	str	r1, [r7, #16]
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00f      	beq.n	8002490 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002478:	429a      	cmp	r2, r3
 800247a:	d206      	bcs.n	800248a <lfs_dir_fetchmatch+0x36>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3304      	adds	r3, #4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800248a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800248e:	e39d      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
 8002494:	2300      	movs	r3, #0
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800249c:	2300      	movs	r3, #0
 800249e:	677b      	str	r3, [r7, #116]	; 0x74
 80024a0:	e056      	b.n	8002550 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 80024a2:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80024a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80024ac:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80024ae:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80024b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80024b8:	2104      	movs	r1, #4
 80024ba:	9103      	str	r1, [sp, #12]
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	9201      	str	r2, [sp, #4]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2304      	movs	r3, #4
 80024c6:	4602      	mov	r2, r0
 80024c8:	2100      	movs	r1, #0
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7fe f964 	bl	8000798 <lfs_bd_read>
 80024d0:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024da:	4413      	add	r3, r2
 80024dc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f8ed 	bl	80006c0 <lfs_fromle32>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024f0:	440b      	add	r3, r1
 80024f2:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <lfs_dir_fetchmatch+0xb4>
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002502:	d001      	beq.n	8002508 <lfs_dir_fetchmatch+0xb4>
            return err;
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	e361      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800250e:	d01c      	beq.n	800254a <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002518:	4413      	add	r3, r2
 800251a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	3301      	adds	r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	bfb8      	it	lt
 800252a:	425b      	neglt	r3, r3
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002532:	440b      	add	r3, r1
 8002534:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f7fe f8b2 	bl	80006a4 <lfs_scmp>
 8002540:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	dd01      	ble.n	800254a <lfs_dir_fetchmatch+0xf6>
            r = i;
 8002546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002548:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	3301      	adds	r3, #1
 800254e:	677b      	str	r3, [r7, #116]	; 0x74
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	2b01      	cmp	r3, #1
 8002554:	dda5      	ble.n	80024a2 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002558:	2b00      	cmp	r3, #0
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	bfb8      	it	lt
 8002560:	425b      	neglt	r3, r3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800256e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002570:	3301      	adds	r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	bfb8      	it	lt
 800257a:	425b      	neglt	r3, r3
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258a:	2b00      	cmp	r3, #0
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	bfb8      	it	lt
 8002592:	425b      	neglt	r3, r3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800259a:	4413      	add	r3, r2
 800259c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80025aa:	2300      	movs	r3, #0
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
 80025ae:	e2f9      	b.n	8002ba4 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80025c0:	4aa8      	ldr	r2, [pc, #672]	; (8002864 <lfs_dir_fetchmatch+0x410>)
 80025c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ca:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80025d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d6:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe f874 	bl	80006d6 <lfs_tole32>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	3308      	adds	r3, #8
 80025f8:	2204      	movs	r2, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f004 fda2 	bl	8007148 <lfs_crc>
 8002604:	4603      	mov	r3, r0
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe f857 	bl	80006c0 <lfs_fromle32>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002618:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800261a:	f7fe fd70 	bl	80010fe <lfs_tag_dsize>
 800261e:	4602      	mov	r2, r0
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	4413      	add	r3, r2
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002626:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800262c:	69d8      	ldr	r0, [r3, #28]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2204      	movs	r2, #4
 8002634:	9203      	str	r2, [sp, #12]
 8002636:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800263a:	9202      	str	r2, [sp, #8]
 800263c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4603      	mov	r3, r0
 8002644:	460a      	mov	r2, r1
 8002646:	2100      	movs	r1, #0
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f7fe f8a5 	bl	8000798 <lfs_bd_read>
 800264e:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002658:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800265c:	f000 81d5 	beq.w	8002a0a <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8002660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002662:	e2b3      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800266a:	2204      	movs	r2, #4
 800266c:	4618      	mov	r0, r3
 800266e:	f004 fd6b 	bl	8007148 <lfs_crc>
 8002672:	4603      	mov	r3, r0
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe f838 	bl	80006ee <lfs_frombe32>
 800267e:	4602      	mov	r2, r0
 8002680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002682:	4053      	eors	r3, r2
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fcb0 	bl	8000fee <lfs_tag_isvalid>
 800268e:	4603      	mov	r3, r0
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800269a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800269c:	f7fe fcd8 	bl	8001050 <lfs_tag_type2>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 80026b0:	e1ba      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fd22 	bl	80010fe <lfs_tag_dsize>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	441a      	add	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	f200 81a1 	bhi.w	8002a0e <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fcbc 	bl	8001050 <lfs_tag_type2>
 80026d8:	4603      	mov	r3, r0
 80026da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80026de:	d15e      	bne.n	800279e <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80026e0:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80026e6:	69dc      	ldr	r4, [r3, #28]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ee:	3204      	adds	r2, #4
 80026f0:	2104      	movs	r1, #4
 80026f2:	9103      	str	r1, [sp, #12]
 80026f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80026f8:	9102      	str	r1, [sp, #8]
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4623      	mov	r3, r4
 8002700:	4602      	mov	r2, r0
 8002702:	2100      	movs	r1, #0
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f7fe f847 	bl	8000798 <lfs_bd_read>
 800270a:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800270c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8002712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002714:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002718:	f000 817b 	beq.w	8002a12 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 800271c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 800271e:	e255      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd ffcc 	bl	80006c0 <lfs_fromle32>
 8002728:	4603      	mov	r3, r0
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8170 	bne.w	8002a16 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fca9 	bl	8001090 <lfs_tag_chunk>
 800273e:	4603      	mov	r3, r0
 8002740:	07db      	lsls	r3, r3, #31
 8002742:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002744:	4053      	eors	r3, r2
 8002746:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002750:	2204      	movs	r2, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fcf8 	bl	8007148 <lfs_crc>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fcca 	bl	80010fe <lfs_tag_dsize>
 800276a:	4602      	mov	r2, r0
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	441a      	add	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002778:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002780:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002782:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002794:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
 800279c:	e73c      	b.n	8002618 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800279e:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ae:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fca3 	bl	80010fe <lfs_tag_dsize>
 80027b8:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 80027ba:	3b04      	subs	r3, #4
 80027bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027c0:	9203      	str	r2, [sp, #12]
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	9501      	str	r5, [sp, #4]
 80027c6:	9400      	str	r4, [sp, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4632      	mov	r2, r6
 80027cc:	2100      	movs	r1, #0
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7fe f97f 	bl	8000ad2 <lfs_bd_crc>
 80027d4:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 80027d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 80027dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027e2:	f000 811a 	beq.w	8002a1a <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 80027e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e8:	e1f0      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fc1f 	bl	8001030 <lfs_tag_type1>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fc62 	bl	80010c4 <lfs_tag_id>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002808:	4293      	cmp	r3, r2
 800280a:	f200 80b5 	bhi.w	8002978 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fc57 	bl	80010c4 <lfs_tag_id>
 8002816:	4603      	mov	r3, r0
 8002818:	3301      	adds	r3, #1
 800281a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800281e:	e0ab      	b.n	8002978 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc04 	bl	8001030 <lfs_tag_type1>
 8002828:	4603      	mov	r3, r0
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282e:	d139      	bne.n	80028a4 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc39 	bl	80010aa <lfs_tag_splice>
 8002838:	4603      	mov	r3, r0
 800283a:	b29a      	uxth	r2, r3
 800283c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002840:	4413      	add	r3, r2
 8002842:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002846:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <lfs_dir_fetchmatch+0x414>)
 800284a:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800284c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002850:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 800285a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002860:	663b      	str	r3, [r7, #96]	; 0x60
 8002862:	e089      	b.n	8002978 <lfs_dir_fetchmatch+0x524>
 8002864:	0800c4f0 	.word	0x0800c4f0
 8002868:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800286c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	f000 8081 	beq.w	8002978 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fc23 	bl	80010c4 <lfs_tag_id>
 800287e:	4603      	mov	r3, r0
 8002880:	461c      	mov	r4, r3
 8002882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fc1d 	bl	80010c4 <lfs_tag_id>
 800288a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800288c:	429c      	cmp	r4, r3
 800288e:	d873      	bhi.n	8002978 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fc09 	bl	80010aa <lfs_tag_splice>
 8002898:	4603      	mov	r3, r0
 800289a:	029a      	lsls	r2, r3, #10
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	4413      	add	r3, r2
 80028a0:	663b      	str	r3, [r7, #96]	; 0x60
 80028a2:	e069      	b.n	8002978 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fbc2 	bl	8001030 <lfs_tag_type1>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028b2:	d132      	bne.n	800291a <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fbea 	bl	8001090 <lfs_tag_chunk>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 80028ce:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80028d4:	69dc      	ldr	r4, [r3, #28]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028dc:	3204      	adds	r2, #4
 80028de:	2108      	movs	r1, #8
 80028e0:	9103      	str	r1, [sp, #12]
 80028e2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80028e6:	9102      	str	r1, [sp, #8]
 80028e8:	9201      	str	r2, [sp, #4]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4623      	mov	r3, r4
 80028ee:	4602      	mov	r2, r0
 80028f0:	2100      	movs	r1, #0
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7fd ff50 	bl	8000798 <lfs_bd_read>
 80028f8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80028fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8002900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002902:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002906:	f000 808a 	beq.w	8002a1e <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800290a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290c:	e15e      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 800290e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fb37 	bl	8000f86 <lfs_pair_fromle32>
 8002918:	e02e      	b.n	8002978 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fba7 	bl	8001070 <lfs_tag_type3>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800292a:	429a      	cmp	r2, r3
 800292c:	d124      	bne.n	8002978 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 800292e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002934:	69dc      	ldr	r4, [r3, #28]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800293c:	3204      	adds	r2, #4
 800293e:	2108      	movs	r1, #8
 8002940:	9103      	str	r1, [sp, #12]
 8002942:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002946:	9102      	str	r1, [sp, #8]
 8002948:	9201      	str	r2, [sp, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4623      	mov	r3, r4
 800294e:	4602      	mov	r2, r0
 8002950:	2100      	movs	r1, #0
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7fd ff20 	bl	8000798 <lfs_bd_read>
 8002958:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800295a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8002960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002962:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002966:	d05c      	beq.n	8002a22 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fcc5 	bl	80012fc <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800297e:	405a      	eors	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f ae47 	bne.w	8002618 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800298a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002990:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002994:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
 8002998:	f107 0220 	add.w	r2, r7, #32
 800299c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029a0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80029a4:	4798      	blx	r3
 80029a6:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da05      	bge.n	80029ba <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 80029ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029b4:	d037      	beq.n	8002a26 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 80029b8:	e108      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 80029ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	663b      	str	r3, [r7, #96]	; 0x60
 80029c4:	e628      	b.n	8002618 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ca:	405a      	eors	r2, r3
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <lfs_dir_fetchmatch+0x780>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	663b      	str	r3, [r7, #96]	; 0x60
 80029da:	e61d      	b.n	8002618 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	2b02      	cmp	r3, #2
 80029e0:	f47f ae1a 	bne.w	8002618 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fb6c 	bl	80010c4 <lfs_tag_id>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461c      	mov	r4, r3
 80029f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fb66 	bl	80010c4 <lfs_tag_id>
 80029f8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80029fa:	429c      	cmp	r4, r3
 80029fc:	f63f ae0c 	bhi.w	8002618 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
 8002a08:	e606      	b.n	8002618 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8002a0a:	bf00      	nop
 8002a0c:	e00c      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                break;
 8002a0e:	bf00      	nop
 8002a10:	e00a      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a12:	bf00      	nop
 8002a14:	e008      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002a16:	bf00      	nop
 8002a18:	e006      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002a1a:	bf00      	nop
 8002a1c:	e004      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002a26:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d000      	beq.n	8002a32 <lfs_dir_fetchmatch+0x5de>
 8002a30:	e016      	b.n	8002a60 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fa1f 	bl	8000e78 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	bfb8      	it	lt
 8002a46:	425b      	neglt	r3, r3
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a4e:	4413      	add	r3, r2
 8002a50:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a5e:	e0a1      	b.n	8002ba4 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2200      	movs	r2, #0
 8002a64:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03a      	beq.n	8002ae4 <lfs_dir_fetchmatch+0x690>
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a76:	6992      	ldr	r2, [r2, #24]
 8002a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a7c:	fb02 f201 	mul.w	r2, r2, r1
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12e      	bne.n	8002ae4 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002a86:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02a      	beq.n	8002ae4 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002a94:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8002a9a:	69dd      	ldr	r5, [r3, #28]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68d2      	ldr	r2, [r2, #12]
 8002aa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aa6:	f107 001c 	add.w	r0, r7, #28
 8002aaa:	9003      	str	r0, [sp, #12]
 8002aac:	9102      	str	r1, [sp, #8]
 8002aae:	9201      	str	r2, [sp, #4]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	462b      	mov	r3, r5
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6978      	ldr	r0, [r7, #20]
 8002aba:	f7fe f80a 	bl	8000ad2 <lfs_bd_crc>
 8002abe:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <lfs_dir_fetchmatch+0x67e>
 8002ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002acc:	d001      	beq.n	8002ad2 <lfs_dir_fetchmatch+0x67e>
                    return err;
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	e07c      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	333c      	adds	r3, #60	; 0x3c
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe fba5 	bl	800123c <lfs_gstate_hasmovehere>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fae1 	bl	80010c4 <lfs_tag_id>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461c      	mov	r4, r3
 8002b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fadb 	bl	80010c4 <lfs_tag_id>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	429c      	cmp	r4, r3
 8002b12:	d104      	bne.n	8002b1e <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8002b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b1c:	e015      	b.n	8002b4a <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8002b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d011      	beq.n	8002b4a <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe faca 	bl	80010c4 <lfs_tag_id>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461c      	mov	r4, r3
 8002b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fac4 	bl	80010c4 <lfs_tag_id>
 8002b3c:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d203      	bcs.n	8002b4a <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b48:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fab5 	bl	80010c4 <lfs_tag_id>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	8a9b      	ldrh	r3, [r3, #20]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7fd fd3b 	bl	80005e0 <lfs_min>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b72:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fa39 	bl	8000fee <lfs_tag_isvalid>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8002b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b84:	e022      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fa9b 	bl	80010c4 <lfs_tag_id>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	8a9b      	ldrh	r3, [r3, #20]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d202      	bcs.n	8002ba0 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8002b9a:	f06f 0301 	mvn.w	r3, #1
 8002b9e:	e015      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e013      	b.n	8002bcc <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f77f ad02 	ble.w	80025b0 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <lfs_dir_fetchmatch+0x784>)
 8002bb6:	9101      	str	r1, [sp, #4]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	f240 5242 	movw	r2, #1346	; 0x542
 8002bc0:	4906      	ldr	r1, [pc, #24]	; (8002bdc <lfs_dir_fetchmatch+0x788>)
 8002bc2:	4807      	ldr	r0, [pc, #28]	; (8002be0 <lfs_dir_fetchmatch+0x78c>)
 8002bc4:	f008 fdce 	bl	800b764 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002bc8:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3784      	adds	r7, #132	; 0x84
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd4:	7ffffc00 	.word	0x7ffffc00
 8002bd8:	0800c4ac 	.word	0x0800c4ac
 8002bdc:	0800c3a4 	.word	0x0800c3a4
 8002be0:	0800c4b8 	.word	0x0800c4b8

08002be4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9302      	str	r3, [sp, #8]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fc22 	bl	8002454 <lfs_dir_fetchmatch>
 8002c10:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <lfs_dir_getgstate+0x5c>)
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <lfs_dir_getgstate+0x60>)
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7fe feab 	bl	8001990 <lfs_dir_get>
 8002c3a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da05      	bge.n	8002c4e <lfs_dir_getgstate+0x32>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f113 0f02 	cmn.w	r3, #2
 8002c48:	d001      	beq.n	8002c4e <lfs_dir_getgstate+0x32>
        return res;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	e00f      	b.n	8002c6e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f113 0f02 	cmn.w	r3, #2
 8002c54:	d00a      	beq.n	8002c6c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fb0e 	bl	800127c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fa5d 	bl	8001126 <lfs_gstate_xor>
    }

    return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	7ff0000c 	.word	0x7ff0000c
 8002c7c:	7ff00000 	.word	0x7ff00000

08002c80 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b08f      	sub	sp, #60	; 0x3c
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	689c      	ldr	r4, [r3, #8]
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	f7fe fa20 	bl	80010e4 <lfs_tag_size>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fd fc99 	bl	80005e0 <lfs_min>
 8002cae:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002cb0:	6a3c      	ldr	r4, [r7, #32]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	6852      	ldr	r2, [r2, #4]
 8002cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbc:	6849      	ldr	r1, [r1, #4]
 8002cbe:	69b8      	ldr	r0, [r7, #24]
 8002cc0:	9003      	str	r0, [sp, #12]
 8002cc2:	9102      	str	r1, [sp, #8]
 8002cc4:	9201      	str	r2, [sp, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4622      	mov	r2, r4
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6a38      	ldr	r0, [r7, #32]
 8002cd0:	f7fd feae 	bl	8000a30 <lfs_bd_cmp>
 8002cd4:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <lfs_dir_find_match+0x60>
        return res;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	e014      	b.n	8002d0a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	689c      	ldr	r4, [r3, #8]
 8002ce4:	68b8      	ldr	r0, [r7, #8]
 8002ce6:	f7fe f9fd 	bl	80010e4 <lfs_tag_size>
 8002cea:	4603      	mov	r3, r0
 8002cec:	429c      	cmp	r4, r3
 8002cee:	d00b      	beq.n	8002d08 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	689c      	ldr	r4, [r3, #8]
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f7fe f9f5 	bl	80010e4 <lfs_tag_size>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	d201      	bcs.n	8002d04 <lfs_dir_find_match+0x84>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e002      	b.n	8002d0a <lfs_dir_find_match+0x8a>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e000      	b.n	8002d0a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	372c      	adds	r7, #44	; 0x2c
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
	...

08002d14 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b093      	sub	sp, #76	; 0x4c
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002d34:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002d36:	4b6e      	ldr	r3, [pc, #440]	; (8002ef0 <lfs_dir_find+0x1dc>)
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002d4a:	496a      	ldr	r1, [pc, #424]	; (8002ef4 <lfs_dir_find+0x1e0>)
 8002d4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d4e:	f008 fd6f 	bl	800b830 <strspn>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	4413      	add	r3, r2
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002d5a:	4966      	ldr	r1, [pc, #408]	; (8002ef4 <lfs_dir_find+0x1e0>)
 8002d5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d5e:	f008 fd56 	bl	800b80e <strcspn>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <lfs_dir_find+0x62>
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <lfs_dir_find+0x1e4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d00a      	beq.n	8002d8c <lfs_dir_find+0x78>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d10c      	bne.n	8002d96 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	495f      	ldr	r1, [pc, #380]	; (8002efc <lfs_dir_find+0x1e8>)
 8002d80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d82:	f008 f933 	bl	800afec <memcmp>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <lfs_dir_find+0x82>
            name += namelen;
 8002d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	4413      	add	r3, r2
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002d94:	e7d9      	b.n	8002d4a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	4413      	add	r3, r2
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002da2:	4954      	ldr	r1, [pc, #336]	; (8002ef4 <lfs_dir_find+0x1e0>)
 8002da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002da6:	f008 fd43 	bl	800b830 <strspn>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	4413      	add	r3, r2
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002db2:	4950      	ldr	r1, [pc, #320]	; (8002ef4 <lfs_dir_find+0x1e0>)
 8002db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db6:	f008 fd2a 	bl	800b80e <strcspn>
 8002dba:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01d      	beq.n	8002dfe <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d112      	bne.n	8002dee <lfs_dir_find+0xda>
 8002dc8:	2202      	movs	r2, #2
 8002dca:	494c      	ldr	r1, [pc, #304]	; (8002efc <lfs_dir_find+0x1e8>)
 8002dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dce:	f008 f90d 	bl	800afec <memcmp>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <lfs_dir_find+0xda>
                depth -= 1;
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	4413      	add	r3, r2
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002dec:	e7ad      	b.n	8002d4a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	3301      	adds	r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	4413      	add	r3, r2
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002dfc:	e7d1      	b.n	8002da2 <lfs_dir_find+0x8e>
                break;
 8002dfe:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <lfs_dir_find+0xf8>
            return tag;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	e06c      	b.n	8002ee6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e10:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f92b 	bl	8001070 <lfs_tag_type3>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d002      	beq.n	8002e26 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002e20:	f06f 0313 	mvn.w	r3, #19
 8002e24:	e05f      	b.n	8002ee6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f94b 	bl	80010c4 <lfs_tag_id>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d01c      	beq.n	8002e74 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f941 	bl	80010c4 <lfs_tag_id>
 8002e42:	4603      	mov	r3, r0
 8002e44:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002e52:	9200      	str	r2, [sp, #0]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <lfs_dir_find+0x1ec>)
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7fe fd99 	bl	8001990 <lfs_dir_get>
 8002e5e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da01      	bge.n	8002e6a <lfs_dir_find+0x156>
                return res;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	e03d      	b.n	8002ee6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f889 	bl	8000f86 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002e7a:	212f      	movs	r1, #47	; 0x2f
 8002e7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e7e:	f008 fcb9 	bl	800b7f4 <strchr>
 8002e82:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <lfs_dir_find+0x178>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	e000      	b.n	8002e8e <lfs_dir_find+0x17a>
 8002e8c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	613a      	str	r2, [r7, #16]
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	617a      	str	r2, [r7, #20]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002e9a:	f107 0210 	add.w	r2, r7, #16
 8002e9e:	9203      	str	r2, [sp, #12]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <lfs_dir_find+0x1f0>)
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002eae:	4622      	mov	r2, r4
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff face 	bl	8002454 <lfs_dir_fetchmatch>
 8002eb8:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da01      	bge.n	8002ec4 <lfs_dir_find+0x1b0>
                return tag;
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	e010      	b.n	8002ee6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	4413      	add	r3, r2
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002ed2:	e73a      	b.n	8002d4a <lfs_dir_find+0x36>
            if (!dir->split) {
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	7ddb      	ldrb	r3, [r3, #23]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0c8      	beq.n	8002e74 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002ee2:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	373c      	adds	r7, #60	; 0x3c
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	002ffc00 	.word	0x002ffc00
 8002ef4:	0800c4f8 	.word	0x0800c4f8
 8002ef8:	0800c4fc 	.word	0x0800c4fc
 8002efc:	0800c500 	.word	0x0800c500
 8002f00:	700ffc00 	.word	0x700ffc00
 8002f04:	08002c81 	.word	0x08002c81

08002f08 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f103 0010 	add.w	r0, r3, #16
 8002f1c:	68fc      	ldr	r4, [r7, #12]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	6852      	ldr	r2, [r2, #4]
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	9103      	str	r1, [sp, #12]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	9102      	str	r1, [sp, #8]
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	4622      	mov	r2, r4
 8002f36:	4601      	mov	r1, r0
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7fd febf 	bl	8000cbc <lfs_bd_prog>
 8002f3e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <lfs_dir_commitprog+0x42>
        return err;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e010      	b.n	8002f6c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 f8f8 	bl	8007148 <lfs_crc>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	441a      	add	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	605a      	str	r2, [r3, #4]
    return 0;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08f      	sub	sp, #60	; 0x3c
 8002f78:	af04      	add	r7, sp, #16
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe f8bb 	bl	80010fe <lfs_tag_dsize>
 8002f88:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	441a      	add	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d902      	bls.n	8002fa0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002f9a:	f06f 031b 	mvn.w	r3, #27
 8002f9e:	e065      	b.n	800306c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4053      	eors	r3, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fbaa 	bl	8000706 <lfs_tobe32>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002fb6:	f107 0214 	add.w	r2, r7, #20
 8002fba:	2304      	movs	r3, #4
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff ffa2 	bl	8002f08 <lfs_dir_commitprog>
 8002fc4:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <lfs_dir_commitattr+0x5c>
        return err;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	e04d      	b.n	800306c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0c      	blt.n	8002ff0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	3b04      	subs	r3, #4
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff ff92 	bl	8002f08 <lfs_dir_commitprog>
 8002fe4:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d039      	beq.n	8003060 <lfs_dir_commitattr+0xec>
            return err;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	e03d      	b.n	800306c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e02d      	b.n	8003056 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002ffa:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003002:	1f1c      	subs	r4, r3, #4
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	440a      	add	r2, r1
 8003010:	2101      	movs	r1, #1
 8003012:	9103      	str	r1, [sp, #12]
 8003014:	f107 0113 	add.w	r1, r7, #19
 8003018:	9102      	str	r1, [sp, #8]
 800301a:	9201      	str	r2, [sp, #4]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4623      	mov	r3, r4
 8003020:	4602      	mov	r2, r0
 8003022:	2100      	movs	r1, #0
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7fd fbb7 	bl	8000798 <lfs_bd_read>
 800302a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <lfs_dir_commitattr+0xc2>
                return err;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	e01a      	b.n	800306c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003036:	f107 0213 	add.w	r2, r7, #19
 800303a:	2301      	movs	r3, #1
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ff62 	bl	8002f08 <lfs_dir_commitprog>
 8003044:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <lfs_dir_commitattr+0xdc>
                return err;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	e00d      	b.n	800306c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3301      	adds	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	3b04      	subs	r3, #4
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	429a      	cmp	r2, r3
 800305e:	d3cc      	bcc.n	8002ffa <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	609a      	str	r2, [r3, #8]
    return 0;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	372c      	adds	r7, #44	; 0x2c
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}

08003074 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b097      	sub	sp, #92	; 0x5c
 8003078:	af04      	add	r7, sp, #16
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003082:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd faa6 	bl	80005e0 <lfs_min>
 8003094:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fac3 	bl	800062a <lfs_alignup>
 80030a4:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80030ae:	e0fe      	b.n	80032ae <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	3b04      	subs	r3, #4
 80030ba:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fa8e 	bl	80005e0 <lfs_min>
 80030c4:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4413      	add	r3, r2
        lfs_off_t noff = (
 80030cc:	3304      	adds	r3, #4
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80030d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d206      	bcs.n	80030e6 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	3b14      	subs	r3, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030e0:	f7fd fa7e 	bl	80005e0 <lfs_min>
 80030e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80030e6:	23ff      	movs	r3, #255	; 0xff
 80030e8:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80030ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d35f      	bcc.n	80031b2 <lfs_dir_commitcrc+0x13e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003102:	429a      	cmp	r2, r3
 8003104:	d855      	bhi.n	80031b2 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8003106:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800310c:	6998      	ldr	r0, [r3, #24]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	9203      	str	r2, [sp, #12]
 8003116:	f107 021b 	add.w	r2, r7, #27
 800311a:	9202      	str	r2, [sp, #8]
 800311c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800311e:	9201      	str	r2, [sp, #4]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fb35 	bl	8000798 <lfs_bd_read>
 800312e:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <lfs_dir_commitcrc+0xce>
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800313c:	d001      	beq.n	8003142 <lfs_dir_commitcrc+0xce>
                return err;
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	e101      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003146:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003150:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 8003156:	699c      	ldr	r4, [r3, #24]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	f107 0108 	add.w	r1, r7, #8
 8003162:	3104      	adds	r1, #4
 8003164:	9103      	str	r1, [sp, #12]
 8003166:	9202      	str	r2, [sp, #8]
 8003168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316a:	9201      	str	r2, [sp, #4]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	4623      	mov	r3, r4
 8003170:	4602      	mov	r2, r0
 8003172:	2100      	movs	r1, #0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fcac 	bl	8000ad2 <lfs_bd_crc>
 800317a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <lfs_dir_commitcrc+0x11a>
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003188:	d001      	beq.n	800318e <lfs_dir_commitcrc+0x11a>
                    return err;
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	e0db      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe f8ca 	bl	800132c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4a6c      	ldr	r2, [pc, #432]	; (8003350 <lfs_dir_commitcrc+0x2dc>)
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fee7 	bl	8002f74 <lfs_dir_commitattr>
 80031a6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <lfs_dir_commitcrc+0x13e>
                    return err;
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	e0c9      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80031b2:	7efb      	ldrb	r3, [r7, #27]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	09db      	lsrs	r3, r3, #7
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	051a      	lsls	r2, r3, #20
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031c8:	1acb      	subs	r3, r1, r3
 80031ca:	3b04      	subs	r3, #4
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80031d2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	4053      	eors	r3, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fa90 	bl	8000706 <lfs_tobe32>
 80031e6:	4603      	mov	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f107 0110 	add.w	r1, r7, #16
 80031f2:	2204      	movs	r2, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 ffa7 	bl	8007148 <lfs_crc>
 80031fa:	4602      	mov	r2, r0
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fa66 	bl	80006d6 <lfs_tole32>
 800320a:	4603      	mov	r3, r0
 800320c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 0010 	add.w	r0, r3, #16
 8003214:	687c      	ldr	r4, [r7, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6852      	ldr	r2, [r2, #4]
 800321e:	2108      	movs	r1, #8
 8003220:	9103      	str	r1, [sp, #12]
 8003222:	f107 0110 	add.w	r1, r7, #16
 8003226:	9102      	str	r1, [sp, #8]
 8003228:	9201      	str	r2, [sp, #4]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2300      	movs	r3, #0
 800322e:	4622      	mov	r2, r4
 8003230:	4601      	mov	r1, r0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd fd42 	bl	8000cbc <lfs_bd_prog>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	e080      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800325e:	7efb      	ldrb	r3, [r7, #27]
 8003260:	43db      	mvns	r3, r3
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	405a      	eors	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <lfs_dir_commitcrc+0x21e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4413      	add	r3, r2
 800328c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800328e:	429a      	cmp	r2, r3
 8003290:	d30d      	bcc.n	80032ae <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f103 0110 	add.w	r1, r3, #16
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	2300      	movs	r3, #0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fcd9 	bl	8000c54 <lfs_bd_sync>
 80032a2:	6238      	str	r0, [r7, #32]
            if (err) {
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <lfs_dir_commitcrc+0x23a>
                return err;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	e04b      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b4:	429a      	cmp	r2, r3
 80032b6:	f63f aefb 	bhi.w	80030b0 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ca:	1d1c      	adds	r4, r3, #4
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d4:	1a8a      	subs	r2, r1, r2
 80032d6:	f107 011c 	add.w	r1, r7, #28
 80032da:	9103      	str	r1, [sp, #12]
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e0:	9201      	str	r2, [sp, #4]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4623      	mov	r3, r4
 80032e6:	4602      	mov	r2, r0
 80032e8:	2100      	movs	r1, #0
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fbf1 	bl	8000ad2 <lfs_bd_crc>
 80032f0:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <lfs_dir_commitcrc+0x288>
        return err;
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	e024      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003300:	429a      	cmp	r2, r3
 8003302:	d002      	beq.n	800330a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003304:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003308:	e01d      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f107 021c 	add.w	r2, r7, #28
 8003314:	9203      	str	r2, [sp, #12]
 8003316:	2204      	movs	r2, #4
 8003318:	9202      	str	r2, [sp, #8]
 800331a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800331c:	9201      	str	r2, [sp, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2304      	movs	r3, #4
 8003322:	460a      	mov	r2, r1
 8003324:	2100      	movs	r1, #0
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fbd3 	bl	8000ad2 <lfs_bd_crc>
 800332c:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <lfs_dir_commitcrc+0x2c4>
        return err;
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	e006      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800333e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003342:	e000      	b.n	8003346 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	374c      	adds	r7, #76	; 0x4c
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	bf00      	nop
 8003350:	5ffffc08 	.word	0x5ffffc08

08003354 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af04      	add	r7, sp, #16
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e016      	b.n	8003392 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	bfb8      	it	lt
 8003370:	425b      	neglt	r3, r3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	4413      	add	r3, r2
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe f9a0 	bl	80016c0 <lfs_alloc>
 8003380:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <lfs_dir_alloc+0x38>
            return err;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	e058      	b.n	800343e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b01      	cmp	r3, #1
 8003396:	dde5      	ble.n	8003364 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80033a8:	2004      	movs	r0, #4
 80033aa:	9003      	str	r0, [sp, #12]
 80033ac:	9202      	str	r2, [sp, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2304      	movs	r3, #4
 80033b6:	460a      	mov	r2, r1
 80033b8:	2100      	movs	r1, #0
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd f9ec 	bl	8000798 <lfs_bd_read>
 80033c0:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f97a 	bl	80006c0 <lfs_fromle32>
 80033cc:	4602      	mov	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <lfs_dir_alloc+0x90>
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80033de:	d001      	beq.n	80033e4 <lfs_dir_alloc+0x90>
        return err;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	e02c      	b.n	800343e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	dd0e      	ble.n	800340c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fd f912 	bl	800062a <lfs_alignup>
 8003406:	4602      	mov	r2, r0
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2204      	movs	r2, #4
 8003410:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f04f 32ff 	mov.w	r2, #4294967295
 8003426:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f04f 32ff 	mov.w	r2, #4294967295
 800342e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2200      	movs	r2, #0
 800343a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003446:	b580      	push	{r7, lr}
 8003448:	b092      	sub	sp, #72	; 0x48
 800344a:	af04      	add	r7, sp, #16
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	4619      	mov	r1, r3
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff7a 	bl	8003354 <lfs_dir_alloc>
 8003460:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <lfs_dir_split+0x26>
        return err;
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	e03c      	b.n	80034e6 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	7ddb      	ldrb	r3, [r3, #23]
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003480:	f107 0110 	add.w	r1, r7, #16
 8003484:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f879 	bl	8003590 <lfs_dir_compact>
 800349e:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da01      	bge.n	80034aa <lfs_dir_split+0x64>
        return res;
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	e01d      	b.n	80034e6 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2201      	movs	r2, #1
 80034ba:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3320      	adds	r3, #32
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7fd fd07 	bl	8000ed8 <lfs_pair_cmp>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <lfs_dir_split+0x9e>
 80034d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3738      	adds	r7, #56	; 0x38
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80034fe:	68b8      	ldr	r0, [r7, #8]
 8003500:	f7fd fdfd 	bl	80010fe <lfs_tag_dsize>
 8003504:	4602      	mov	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	441a      	add	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	601a      	str	r2, [r3, #0]
    return 0;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	f7ff fd1d 	bl	8002f74 <lfs_dir_commitattr>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003554:	2b00      	cmp	r3, #0
 8003556:	dd11      	ble.n	800357c <lfs_dir_needsrelocation+0x38>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003564:	3201      	adds	r2, #1
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	fbb3 f1f2 	udiv	r1, r3, r2
 800356e:	fb02 f201 	mul.w	r2, r2, r1
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <lfs_dir_needsrelocation+0x38>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <lfs_dir_needsrelocation+0x3a>
 800357c:	2300      	movs	r3, #0
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b0a4      	sub	sp, #144	; 0x90
 8003594:	af0a      	add	r7, sp, #40	; 0x28
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ffcc 	bl	8003544 <lfs_dir_needsrelocation>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80035bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <lfs_dir_compact+0x52>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	657a      	str	r2, [r7, #84]	; 0x54
 80035ca:	2201      	movs	r2, #1
 80035cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80035ce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd fc7f 	bl	8000ed8 <lfs_pair_cmp>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 8155 	bne.w	800388c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e8:	2300      	movs	r3, #0
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f8:	2300      	movs	r3, #0
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <lfs_dir_compact+0x80>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	3b08      	subs	r3, #8
 800360e:	e003      	b.n	8003618 <lfs_dir_compact+0x88>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003618:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4619      	mov	r1, r3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7fd fbf7 	bl	8000e14 <lfs_bd_erase>
 8003626:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003634:	f000 812c 	beq.w	8003890 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363a:	e187      	b.n	800394c <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd f848 	bl	80006d6 <lfs_tole32>
 8003646:	4602      	mov	r2, r0
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003652:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003656:	2304      	movs	r3, #4
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff fc55 	bl	8002f08 <lfs_dir_commitprog>
 800365e:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd f82b 	bl	80006c0 <lfs_fromle32>
 800366a:	4602      	mov	r2, r0
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
            if (err) {
 8003670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800367c:	f000 810a 	beq.w	8003894 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003682:	e163      	b.n	800394c <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003684:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003688:	425b      	negs	r3, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	637a      	str	r2, [r7, #52]	; 0x34
 8003692:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003696:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003698:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800369c:	9208      	str	r2, [sp, #32]
 800369e:	4aad      	ldr	r2, [pc, #692]	; (8003954 <lfs_dir_compact+0x3c4>)
 80036a0:	9207      	str	r2, [sp, #28]
 80036a2:	9306      	str	r3, [sp, #24]
 80036a4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80036a8:	9305      	str	r3, [sp, #20]
 80036aa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80036ae:	9304      	str	r3, [sp, #16]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9303      	str	r3, [sp, #12]
 80036b4:	4ba8      	ldr	r3, [pc, #672]	; (8003958 <lfs_dir_compact+0x3c8>)
 80036b6:	9302      	str	r3, [sp, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
 80036c4:	2200      	movs	r2, #0
 80036c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7fe fab3 	bl	8001c34 <lfs_dir_traverse>
 80036ce:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80036d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80036d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80036dc:	f000 80dc 	beq.w	8003898 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80036e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e2:	e133      	b.n	800394c <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3318      	adds	r3, #24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fbda 	bl	8000ea2 <lfs_pair_isnull>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3318      	adds	r3, #24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fc5b 	bl	8000fba <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	7ddb      	ldrb	r3, [r3, #23]
 8003708:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800370c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800370e:	4a93      	ldr	r2, [pc, #588]	; (800395c <lfs_dir_compact+0x3cc>)
 8003710:	431a      	orrs	r2, r3
                        dir->tail);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003716:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fc2a 	bl	8002f74 <lfs_dir_commitattr>
 8003720:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3318      	adds	r3, #24
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fc2d 	bl	8000f86 <lfs_pair_fromle32>
                if (err) {
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003738:	f000 80b0 	beq.w	800389c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800373c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373e:	e105      	b.n	800394c <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800374c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d011      	beq.n	800377e <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fcdd 	bl	8001126 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fcd4 	bl	8001126 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fccb 	bl	8001126 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800379c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037a0:	461a      	mov	r2, r3
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fa39 	bl	8002c1c <lfs_dir_getgstate>
 80037aa:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80037ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <lfs_dir_compact+0x226>
                return err;
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	e0ca      	b.n	800394c <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80037b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fcd8 	bl	8001170 <lfs_gstate_iszero>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d016      	beq.n	80037fa <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80037cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fd73 	bl	80012bc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80037d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037da:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80037de:	4a60      	ldr	r2, [pc, #384]	; (8003960 <lfs_dir_compact+0x3d0>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff fbc7 	bl	8002f74 <lfs_dir_commitattr>
 80037e6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80037e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80037f4:	d054      	beq.n	80038a0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	e0a8      	b.n	800394c <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80037fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037fe:	4619      	mov	r1, r3
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fc37 	bl	8003074 <lfs_dir_commitcrc>
 8003806:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800380e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003810:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003814:	d046      	beq.n	80038a4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003818:	e098      	b.n	800394c <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003820:	6992      	ldr	r2, [r2, #24]
 8003822:	fbb3 f1f2 	udiv	r1, r3, r2
 8003826:	fb02 f201 	mul.w	r2, r2, r1
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <lfs_dir_compact+0x2ae>
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <lfs_dir_compact+0x3d4>)
 8003832:	4a4d      	ldr	r2, [pc, #308]	; (8003968 <lfs_dir_compact+0x3d8>)
 8003834:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8003838:	484c      	ldr	r0, [pc, #304]	; (800396c <lfs_dir_compact+0x3dc>)
 800383a:	f007 fb6d 	bl	800af18 <__assert_func>
            lfs_pair_swap(dir->pair);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd fb19 	bl	8000e78 <lfs_pair_swap>
            dir->count = end - begin;
 8003846:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800384a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	b29a      	uxth	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800385c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800386e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d064      	beq.n	8003946 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	333c      	adds	r3, #60	; 0x3c
 8003882:	3230      	adds	r2, #48	; 0x30
 8003884:	ca07      	ldmia	r2, {r0, r1, r2}
 8003886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800388a:	e05c      	b.n	8003946 <lfs_dir_compact+0x3b6>
        goto relocate;
 800388c:	bf00      	nop
 800388e:	e00a      	b.n	80038a6 <lfs_dir_compact+0x316>
                    goto relocate;
 8003890:	bf00      	nop
 8003892:	e008      	b.n	80038a6 <lfs_dir_compact+0x316>
                    goto relocate;
 8003894:	bf00      	nop
 8003896:	e006      	b.n	80038a6 <lfs_dir_compact+0x316>
                    goto relocate;
 8003898:	bf00      	nop
 800389a:	e004      	b.n	80038a6 <lfs_dir_compact+0x316>
                        goto relocate;
 800389c:	bf00      	nop
 800389e:	e002      	b.n	80038a6 <lfs_dir_compact+0x316>
                        goto relocate;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <lfs_dir_compact+0x316>
                    goto relocate;
 80038a4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3310      	adds	r3, #16
 80038b0:	4619      	mov	r1, r3
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7fc ff4a 	bl	800074c <lfs_cache_drop>
        if (!tired) {
 80038b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <lfs_dir_compact+0x3e0>)
 80038cc:	9200      	str	r2, [sp, #0]
 80038ce:	f640 0201 	movw	r2, #2049	; 0x801
 80038d2:	4926      	ldr	r1, [pc, #152]	; (800396c <lfs_dir_compact+0x3dc>)
 80038d4:	4827      	ldr	r0, [pc, #156]	; (8003974 <lfs_dir_compact+0x3e4>)
 80038d6:	f007 ff45 	bl	800b764 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	617a      	str	r2, [r7, #20]
 80038e0:	2201      	movs	r2, #1
 80038e2:	61ba      	str	r2, [r7, #24]
 80038e4:	f107 0214 	add.w	r2, r7, #20
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd faf4 	bl	8000ed8 <lfs_pair_cmp>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <lfs_dir_compact+0x3e0>)
 80038fc:	9200      	str	r2, [sp, #0]
 80038fe:	f640 0206 	movw	r2, #2054	; 0x806
 8003902:	491a      	ldr	r1, [pc, #104]	; (800396c <lfs_dir_compact+0x3dc>)
 8003904:	481c      	ldr	r0, [pc, #112]	; (8003978 <lfs_dir_compact+0x3e8>)
 8003906:	f007 ff2d 	bl	800b764 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800390a:	f06f 031b 	mvn.w	r3, #27
 800390e:	e01d      	b.n	800394c <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7fd fed2 	bl	80016c0 <lfs_alloc>
 800391c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800391e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <lfs_dir_compact+0x3ae>
 8003924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003926:	f113 0f1c 	cmn.w	r3, #28
 800392a:	d106      	bne.n	800393a <lfs_dir_compact+0x3aa>
 800392c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <lfs_dir_compact+0x3ae>
            return err;
 800393a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800393c:	e006      	b.n	800394c <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003944:	e64d      	b.n	80035e2 <lfs_dir_compact+0x52>
        break;
 8003946:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800394c:	4618      	mov	r0, r3
 800394e:	3768      	adds	r7, #104	; 0x68
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	0800351b 	.word	0x0800351b
 8003958:	400ffc00 	.word	0x400ffc00
 800395c:	000ffc08 	.word	0x000ffc08
 8003960:	7ffffc0c 	.word	0x7ffffc0c
 8003964:	0800c504 	.word	0x0800c504
 8003968:	0800cecc 	.word	0x0800cecc
 800396c:	0800c3a4 	.word	0x0800c3a4
 8003970:	0800c4ac 	.word	0x0800c4ac
 8003974:	0800c52c 	.word	0x0800c52c
 8003978:	0800c550 	.word	0x0800c550

0800397c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b097      	sub	sp, #92	; 0x5c
 8003980:	af0a      	add	r7, sp, #40	; 0x28
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800398a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003990:	e058      	b.n	8003a44 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	b29b      	uxth	r3, r3
 800399a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399c:	b292      	uxth	r2, r2
 800399e:	4252      	negs	r2, r2
 80039a0:	b292      	uxth	r2, r2
 80039a2:	b212      	sxth	r2, r2
 80039a4:	f107 0118 	add.w	r1, r7, #24
 80039a8:	9108      	str	r1, [sp, #32]
 80039aa:	4978      	ldr	r1, [pc, #480]	; (8003b8c <lfs_dir_splittingcompact+0x210>)
 80039ac:	9107      	str	r1, [sp, #28]
 80039ae:	9206      	str	r2, [sp, #24]
 80039b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039b4:	9205      	str	r2, [sp, #20]
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9303      	str	r3, [sp, #12]
 80039bc:	4b74      	ldr	r3, [pc, #464]	; (8003b90 <lfs_dir_splittingcompact+0x214>)
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	2200      	movs	r2, #0
 80039ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fe f92f 	bl	8001c34 <lfs_dir_traverse>
 80039d6:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <lfs_dir_splittingcompact+0x66>
                return err;
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	e0d0      	b.n	8003b84 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 80039e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2bfe      	cmp	r3, #254	; 0xfe
 80039ec:	d822      	bhi.n	8003a34 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f2:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80039f4:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	e003      	b.n	8003a14 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a10:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003a12:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003a18:	6992      	ldr	r2, [r2, #24]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fe04 	bl	800062a <lfs_alignup>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4619      	mov	r1, r3
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7fc fdda 	bl	80005e0 <lfs_min>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d20e      	bcs.n	8003a52 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003a34:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a40:	4413      	add	r3, r2
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003a44:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d8a0      	bhi.n	8003992 <lfs_dir_splittingcompact+0x16>
 8003a50:	e000      	b.n	8003a54 <lfs_dir_splittingcompact+0xd8>
                break;
 8003a52:	bf00      	nop
        }

        if (split == begin) {
 8003a54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d02d      	beq.n	8003aba <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a66:	9202      	str	r2, [sp, #8]
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fce6 	bl	8003446 <lfs_dir_split>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <lfs_dir_splittingcompact+0x112>
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f113 0f1c 	cmn.w	r3, #28
 8003a88:	d001      	beq.n	8003a8e <lfs_dir_splittingcompact+0x112>
            return err;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	e07a      	b.n	8003b84 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	493d      	ldr	r1, [pc, #244]	; (8003b94 <lfs_dir_splittingcompact+0x218>)
 8003a9e:	9101      	str	r1, [sp, #4]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	f640 0259 	movw	r2, #2137	; 0x859
 8003aa8:	493b      	ldr	r1, [pc, #236]	; (8003b98 <lfs_dir_splittingcompact+0x21c>)
 8003aaa:	483c      	ldr	r0, [pc, #240]	; (8003b9c <lfs_dir_splittingcompact+0x220>)
 8003aac:	f007 fe5a 	bl	800b764 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003ab0:	e004      	b.n	8003abc <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003ab8:	e767      	b.n	800398a <lfs_dir_splittingcompact+0xe>
            break;
 8003aba:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff fd40 	bl	8003544 <lfs_dir_needsrelocation>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04d      	beq.n	8003b66 <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	613a      	str	r2, [r7, #16]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	617a      	str	r2, [r7, #20]
 8003ad4:	f107 0210 	add.w	r2, r7, #16
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd f9fc 	bl	8000ed8 <lfs_pair_cmp>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d13f      	bne.n	8003b66 <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f003 fa28 	bl	8006f3c <lfs_fs_rawsize>
 8003aec:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	da01      	bge.n	8003af8 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	e045      	b.n	8003b84 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afc:	085a      	lsrs	r2, r3, #1
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d930      	bls.n	8003b66 <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <lfs_dir_splittingcompact+0x218>)
 8003b0a:	9200      	str	r2, [sp, #0]
 8003b0c:	f640 026d 	movw	r2, #2157	; 0x86d
 8003b10:	4921      	ldr	r1, [pc, #132]	; (8003b98 <lfs_dir_splittingcompact+0x21c>)
 8003b12:	4823      	ldr	r0, [pc, #140]	; (8003ba0 <lfs_dir_splittingcompact+0x224>)
 8003b14:	f007 fe26 	bl	800b764 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003b18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fc89 	bl	8003446 <lfs_dir_split>
 8003b34:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <lfs_dir_splittingcompact+0x1cc>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f113 0f1c 	cmn.w	r3, #28
 8003b42:	d001      	beq.n	8003b48 <lfs_dir_splittingcompact+0x1cc>
                return err;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	e01d      	b.n	8003b84 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <lfs_dir_splittingcompact+0x218>)
 8003b50:	f640 0277 	movw	r2, #2167	; 0x877
 8003b54:	4910      	ldr	r1, [pc, #64]	; (8003b98 <lfs_dir_splittingcompact+0x21c>)
 8003b56:	4813      	ldr	r0, [pc, #76]	; (8003ba4 <lfs_dir_splittingcompact+0x228>)
 8003b58:	f007 fe04 	bl	800b764 <iprintf>
 8003b5c:	e003      	b.n	8003b66 <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 8003b5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003b66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fd07 	bl	8003590 <lfs_dir_compact>
 8003b82:	4603      	mov	r3, r0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3734      	adds	r7, #52	; 0x34
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}
 8003b8c:	080034ef 	.word	0x080034ef
 8003b90:	400ffc00 	.word	0x400ffc00
 8003b94:	0800c4ac 	.word	0x0800c4ac
 8003b98:	0800c3a4 	.word	0x0800c3a4
 8003b9c:	0800c588 	.word	0x0800c588
 8003ba0:	0800c5b8 	.word	0x0800c5b8
 8003ba4:	0800c5e8 	.word	0x0800c5e8

08003ba8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b0a6      	sub	sp, #152	; 0x98
 8003bac:	af0a      	add	r7, sp, #40	; 0x28
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc4:	e06d      	b.n	8003ca2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd fa4d 	bl	8001070 <lfs_tag_type3>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f240 4301 	movw	r3, #1025	; 0x401
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d106      	bne.n	8003bf0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	8a9b      	ldrh	r3, [r3, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	829a      	strh	r2, [r3, #20]
 8003bee:	e055      	b.n	8003c9c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd fa38 	bl	8001070 <lfs_tag_type3>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d114      	bne.n	8003c36 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	8a9b      	ldrh	r3, [r3, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <lfs_dir_relocatingcommit+0x7a>
 8003c14:	4ba4      	ldr	r3, [pc, #656]	; (8003ea8 <lfs_dir_relocatingcommit+0x300>)
 8003c16:	4aa5      	ldr	r2, [pc, #660]	; (8003eac <lfs_dir_relocatingcommit+0x304>)
 8003c18:	f640 018f 	movw	r1, #2191	; 0x88f
 8003c1c:	48a4      	ldr	r0, [pc, #656]	; (8003eb0 <lfs_dir_relocatingcommit+0x308>)
 8003c1e:	f007 f97b 	bl	800af18 <__assert_func>
            dir->count -= 1;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	8a9b      	ldrh	r3, [r3, #20]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003c34:	e032      	b.n	8003c9c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd f9f5 	bl	8001030 <lfs_tag_type1>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c4c:	d126      	bne.n	8003c9c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa09 	bl	8001090 <lfs_tag_chunk>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3318      	adds	r3, #24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd f975 	bl	8000f86 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	db8c      	blt.n	8003bc6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003cac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d02b      	beq.n	8003d0c <lfs_dir_relocatingcommit+0x164>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	8a9b      	ldrh	r3, [r3, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d127      	bne.n	8003d0c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <lfs_dir_relocatingcommit+0x12a>
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <lfs_dir_relocatingcommit+0x30c>)
 8003cc6:	4a79      	ldr	r2, [pc, #484]	; (8003eac <lfs_dir_relocatingcommit+0x304>)
 8003cc8:	f640 019c 	movw	r1, #2204	; 0x89c
 8003ccc:	4878      	ldr	r0, [pc, #480]	; (8003eb0 <lfs_dir_relocatingcommit+0x308>)
 8003cce:	f007 f923 	bl	800af18 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f002 fc8a 	bl	80065f4 <lfs_fs_pred>
 8003ce0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <lfs_dir_relocatingcommit+0x14c>
 8003ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cea:	f113 0f02 	cmn.w	r3, #2
 8003cee:	d001      	beq.n	8003cf4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cf2:	e203      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cf6:	f113 0f02 	cmn.w	r3, #2
 8003cfa:	d007      	beq.n	8003d0c <lfs_dir_relocatingcommit+0x164>
 8003cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d00:	7ddb      	ldrb	r3, [r3, #23]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003d06:	2302      	movs	r3, #2
 8003d08:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003d0a:	e121      	b.n	8003f50 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	7d9b      	ldrb	r3, [r3, #22]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80fb 	beq.w	8003f0c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <lfs_dir_relocatingcommit+0x1a0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	3b08      	subs	r3, #8
 8003d46:	e003      	b.n	8003d50 <lfs_dir_relocatingcommit+0x1a8>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3318      	adds	r3, #24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f92f 	bl	8000fba <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d72:	9308      	str	r3, [sp, #32]
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <lfs_dir_relocatingcommit+0x310>)
 8003d76:	9307      	str	r3, [sp, #28]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9306      	str	r3, [sp, #24]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	460b      	mov	r3, r1
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7fd ff4a 	bl	8001c34 <lfs_dir_traverse>
 8003da0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f8ed 	bl	8000f86 <lfs_pair_fromle32>
        if (err) {
 8003dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db4:	f113 0f1c 	cmn.w	r3, #28
 8003db8:	f000 80aa 	beq.w	8003f10 <lfs_dir_relocatingcommit+0x368>
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003dc2:	f000 80a5 	beq.w	8003f10 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	e198      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f99f 	bl	8001126 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fd f996 	bl	8001126 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd f98d 	bl	8001126 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e12:	f023 0303 	bic.w	r3, r3, #3
 8003e16:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd f9a7 	bl	8001170 <lfs_gstate_iszero>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f083 0301 	eor.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d027      	beq.n	8003e7e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003e2e:	f107 031c 	add.w	r3, r7, #28
 8003e32:	461a      	mov	r2, r3
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fe fef0 	bl	8002c1c <lfs_dir_getgstate>
 8003e3c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	e159      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd fa35 	bl	80012bc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003e52:	f107 031c 	add.w	r3, r7, #28
 8003e56:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <lfs_dir_relocatingcommit+0x314>)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff f889 	bl	8002f74 <lfs_dir_commitattr>
 8003e62:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6c:	f113 0f1c 	cmn.w	r3, #28
 8003e70:	d050      	beq.n	8003f14 <lfs_dir_relocatingcommit+0x36c>
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003e78:	d04c      	beq.n	8003f14 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	e13e      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e82:	4619      	mov	r1, r3
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff f8f5 	bl	8003074 <lfs_dir_commitcrc>
 8003e8a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e94:	f113 0f1c 	cmn.w	r3, #28
 8003e98:	d03e      	beq.n	8003f18 <lfs_dir_relocatingcommit+0x370>
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ea0:	d03a      	beq.n	8003f18 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	e12a      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
 8003ea6:	bf00      	nop
 8003ea8:	0800c614 	.word	0x0800c614
 8003eac:	0800cedc 	.word	0x0800cedc
 8003eb0:	0800c3a4 	.word	0x0800c3a4
 8003eb4:	0800c624 	.word	0x0800c624
 8003eb8:	0800351b 	.word	0x0800351b
 8003ebc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ec6:	6992      	ldr	r2, [r2, #24]
 8003ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ecc:	fb02 f201 	mul.w	r2, r2, r1
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <lfs_dir_relocatingcommit+0x33c>
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	; (8004104 <lfs_dir_relocatingcommit+0x55c>)
 8003ed8:	4a8b      	ldr	r2, [pc, #556]	; (8004108 <lfs_dir_relocatingcommit+0x560>)
 8003eda:	f640 01e6 	movw	r1, #2278	; 0x8e6
 8003ede:	488b      	ldr	r0, [pc, #556]	; (800410c <lfs_dir_relocatingcommit+0x564>)
 8003ee0:	f007 f81a 	bl	800af18 <__assert_func>
        dir->off = commit.off;
 8003ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	333c      	adds	r3, #60	; 0x3c
 8003ef6:	3230      	adds	r2, #48	; 0x30
 8003ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3348      	adds	r3, #72	; 0x48
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	e021      	b.n	8003f50 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8003f0c:	bf00      	nop
 8003f0e:	e004      	b.n	8003f1a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003f10:	bf00      	nop
 8003f12:	e002      	b.n	8003f1a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003f18:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	4619      	mov	r1, r3
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7fc fc13 	bl	800074c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	8a9b      	ldrh	r3, [r3, #20]
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fd1d 	bl	800397c <lfs_dir_splittingcompact>
 8003f42:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da01      	bge.n	8003f4e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	e0d6      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8003f4e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	663b      	str	r3, [r7, #96]	; 0x60
 8003f62:	e0c6      	b.n	80040f2 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f66:	3308      	adds	r3, #8
 8003f68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc ffb2 	bl	8000ed8 <lfs_pair_cmp>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 80b8 	bne.w	80040ec <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8003f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f103 0408 	add.w	r4, r3, #8
 8003f84:	4615      	mov	r5, r2
 8003f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f94:	3308      	adds	r3, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f000 809d 	beq.w	80040d8 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa2:	e07b      	b.n	800409c <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd f85e 	bl	8001070 <lfs_tag_type3>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d115      	bne.n	8003fec <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc2:	889c      	ldrh	r4, [r3, #4]
 8003fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd f878 	bl	80010c4 <lfs_tag_id>
 8003fd4:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d108      	bne.n	8003fec <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e054      	b.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd f83a 	bl	8001070 <lfs_tag_type3>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004004:	429a      	cmp	r2, r3
 8004006:	d11c      	bne.n	8004042 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400a:	889c      	ldrh	r4, [r3, #4]
 800400c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	4413      	add	r3, r2
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd f854 	bl	80010c4 <lfs_tag_id>
 800401c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800401e:	429c      	cmp	r4, r3
 8004020:	d90f      	bls.n	8004042 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8004022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004024:	889b      	ldrh	r3, [r3, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800402e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004030:	799b      	ldrb	r3, [r3, #6]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d12f      	bne.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004040:	e029      	b.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4413      	add	r3, r2
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fd f80f 	bl	8001070 <lfs_tag_type3>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	f240 4301 	movw	r3, #1025	; 0x401
 800405a:	429a      	cmp	r2, r3
 800405c:	d11b      	bne.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800405e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004060:	889c      	ldrh	r4, [r3, #4]
 8004062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4413      	add	r3, r2
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f829 	bl	80010c4 <lfs_tag_id>
 8004072:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004074:	429c      	cmp	r4, r3
 8004076:	d30e      	bcc.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8004078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407a:	889b      	ldrh	r3, [r3, #4]
 800407c:	3301      	adds	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004082:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004086:	799b      	ldrb	r3, [r3, #6]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d104      	bne.n	8004096 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 800408c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8004096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004098:	3301      	adds	r3, #1
 800409a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800409c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800409e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a2:	429a      	cmp	r2, r3
 80040a4:	f6ff af7e 	blt.w	8003fa4 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80040a8:	e016      	b.n	80040d8 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 80040aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ac:	889a      	ldrh	r2, [r3, #4]
 80040ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b0:	8b9b      	ldrh	r3, [r3, #28]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b8:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80040ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040bc:	f103 0108 	add.w	r1, r3, #8
 80040c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c2:	3320      	adds	r3, #32
 80040c4:	461a      	mov	r2, r3
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7fe fd8c 	bl	8002be4 <lfs_dir_fetch>
 80040cc:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80040ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <lfs_dir_relocatingcommit+0x530>
                    return err;
 80040d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d6:	e011      	b.n	80040fc <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 80040d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040da:	889a      	ldrh	r2, [r3, #4]
 80040dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040de:	8b9b      	ldrh	r3, [r3, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d303      	bcc.n	80040ec <lfs_dir_relocatingcommit+0x544>
 80040e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e6:	7fdb      	ldrb	r3, [r3, #31]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1de      	bne.n	80040aa <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80040ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	663b      	str	r3, [r7, #96]	; 0x60
 80040f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f af35 	bne.w	8003f64 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3770      	adds	r7, #112	; 0x70
 8004100:	46bd      	mov	sp, r7
 8004102:	bdb0      	pop	{r4, r5, r7, pc}
 8004104:	0800c504 	.word	0x0800c504
 8004108:	0800cedc 	.word	0x0800cedc
 800410c:	0800c3a4 	.word	0x0800c3a4

08004110 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b0bc      	sub	sp, #240	; 0xf0
 8004114:	af04      	add	r7, sp, #16
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004126:	e045      	b.n	80041b4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412c:	3308      	adds	r3, #8
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	d03a      	beq.n	80041aa <lfs_dir_orphaningcommit+0x9a>
 8004134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004138:	3308      	adds	r3, #8
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc feca 	bl	8000ed8 <lfs_pair_cmp>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12f      	bne.n	80041aa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800414a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800414e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004150:	2b01      	cmp	r3, #1
 8004152:	d12a      	bne.n	80041aa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d023      	beq.n	80041aa <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800416e:	429a      	cmp	r2, r3
 8004170:	d91b      	bls.n	80041aa <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004172:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fff2 	bl	8005160 <lfs_file_outline>
 800417c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800418c:	e2ad      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800418e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f001 f806 	bl	80051a4 <lfs_file_flush>
 8004198:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800419c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <lfs_dir_orphaningcommit+0x9a>
                return err;
 80041a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041a8:	e29f      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80041aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1b5      	bne.n	8004128 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80041d2:	461d      	mov	r5, r3
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80041dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80041e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fcd8 	bl	8003ba8 <lfs_dir_relocatingcommit>
 80041f8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80041fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004200:	2b00      	cmp	r3, #0
 8004202:	da02      	bge.n	800420a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004208:	e26f      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fe60 	bl	8000ed8 <lfs_pair_cmp>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	461d      	mov	r5, r3
 8004222:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800422a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800422e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004236:	2b02      	cmp	r3, #2
 8004238:	d14a      	bne.n	80042d0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3348      	adds	r3, #72	; 0x48
 800423e:	461a      	mov	r2, r3
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7fe fcea 	bl	8002c1c <lfs_dir_getgstate>
 8004248:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 800424c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004258:	e247      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3318      	adds	r3, #24
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fea5 	bl	8000fba <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	7ddb      	ldrb	r3, [r3, #23]
 8004274:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004278:	051a      	lsls	r2, r3, #20
 800427a:	4bc2      	ldr	r3, [pc, #776]	; (8004584 <lfs_dir_orphaningcommit+0x474>)
 800427c:	4313      	orrs	r3, r2
 800427e:	667b      	str	r3, [r7, #100]	; 0x64
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3318      	adds	r3, #24
 8004284:	66bb      	str	r3, [r7, #104]	; 0x68
 8004286:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800428a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800428e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004292:	2000      	movs	r0, #0
 8004294:	9001      	str	r0, [sp, #4]
 8004296:	2001      	movs	r0, #1
 8004298:	9000      	str	r0, [sp, #0]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff fc84 	bl	8003ba8 <lfs_dir_relocatingcommit>
 80042a0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc fe6c 	bl	8000f86 <lfs_pair_fromle32>
        if (state < 0) {
 80042ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da02      	bge.n	80042bc <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80042b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ba:	e216      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80042bc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80042c0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80042c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80042d6:	e1fc      	b.n	80046d2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80042d8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80042dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042e8:	4ca7      	ldr	r4, [pc, #668]	; (8004588 <lfs_dir_orphaningcommit+0x478>)
 80042ea:	9403      	str	r4, [sp, #12]
 80042ec:	9102      	str	r1, [sp, #8]
 80042ee:	9201      	str	r2, [sp, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4603      	mov	r3, r0
 80042f4:	f44f 6217 	mov.w	r2, #2416	; 0x970
 80042f8:	49a4      	ldr	r1, [pc, #656]	; (800458c <lfs_dir_orphaningcommit+0x47c>)
 80042fa:	48a5      	ldr	r0, [pc, #660]	; (8004590 <lfs_dir_orphaningcommit+0x480>)
 80042fc:	f007 fa32 	bl	800b764 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f103 0220 	add.w	r2, r3, #32
 800430c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fde0 	bl	8000ed8 <lfs_pair_cmp>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800431e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004326:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004336:	e037      	b.n	80043a8 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004338:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800433c:	f103 0208 	add.w	r2, r3, #8
 8004340:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fdc6 	bl	8000ed8 <lfs_pair_cmp>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004352:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004356:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800435a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800435c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004360:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004364:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004366:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800436a:	799b      	ldrb	r3, [r3, #6]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d116      	bne.n	800439e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004374:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004378:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc fdaa 	bl	8000ed8 <lfs_pair_cmp>
 8004384:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800438a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800438e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004394:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004398:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800439e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1c3      	bne.n	8004338 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80043b0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80043b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043b8:	4619      	mov	r1, r3
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f002 f9cc 	bl	8006758 <lfs_fs_parent>
 80043c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80043c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	da07      	bge.n	80043dc <lfs_dir_orphaningcommit+0x2cc>
 80043cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043d0:	f113 0f02 	cmn.w	r3, #2
 80043d4:	d002      	beq.n	80043dc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80043d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043da:	e186      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80043dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043e0:	f113 0f02 	cmn.w	r3, #2
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80043ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043f2:	f113 0f02 	cmn.w	r3, #2
 80043f6:	f000 809e 	beq.w	8004536 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80043fa:	2101      	movs	r1, #1
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f002 fa43 	bl	8006888 <lfs_fs_preporphans>
 8004402:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <lfs_dir_orphaningcommit+0x304>
                return err;
 800440e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004412:	e16a      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004414:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004418:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3330      	adds	r3, #48	; 0x30
 8004420:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc ff08 	bl	800123c <lfs_gstate_hasmovehere>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d02d      	beq.n	800448e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fe44 	bl	80010c4 <lfs_tag_id>
 800443c:	4603      	mov	r3, r0
 800443e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004442:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004446:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800444a:	484f      	ldr	r0, [pc, #316]	; (8004588 <lfs_dir_orphaningcommit+0x478>)
 800444c:	9002      	str	r0, [sp, #8]
 800444e:	9201      	str	r2, [sp, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	460b      	mov	r3, r1
 8004454:	f640 129d 	movw	r2, #2461	; 0x99d
 8004458:	494c      	ldr	r1, [pc, #304]	; (800458c <lfs_dir_orphaningcommit+0x47c>)
 800445a:	484e      	ldr	r0, [pc, #312]	; (8004594 <lfs_dir_orphaningcommit+0x484>)
 800445c:	f007 f982 	bl	800b764 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004460:	2200      	movs	r2, #0
 8004462:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f002 fa5e 	bl	8006928 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800446c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc fe27 	bl	80010c4 <lfs_tag_id>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800447e:	4293      	cmp	r3, r2
 8004480:	d205      	bcs.n	800448e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004486:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800448a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004494:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004496:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fd8d 	bl	8000fba <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80044a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80044a4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <lfs_dir_orphaningcommit+0x3ac>
 80044ac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80044b6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80044ba:	e000      	b.n	80044be <lfs_dir_orphaningcommit+0x3ae>
 80044bc:	2300      	movs	r3, #0
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
 80044c0:	2300      	movs	r3, #0
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044ce:	653b      	str	r3, [r7, #80]	; 0x50
 80044d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044d4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80044d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80044dc:	2000      	movs	r0, #0
 80044de:	9001      	str	r0, [sp, #4]
 80044e0:	2002      	movs	r0, #2
 80044e2:	9000      	str	r0, [sp, #0]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fb5f 	bl	8003ba8 <lfs_dir_relocatingcommit>
 80044ea:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80044ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc fd47 	bl	8000f86 <lfs_pair_fromle32>
            if (state < 0) {
 80044f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	da02      	bge.n	8004506 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004504:	e0f1      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800450a:	2b01      	cmp	r3, #1
 800450c:	d113      	bne.n	8004536 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800450e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800451a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800451e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004526:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800452a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004534:	e0cd      	b.n	80046d2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004536:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800453a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800453e:	4619      	mov	r1, r3
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f002 f857 	bl	80065f4 <lfs_fs_pred>
 8004546:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800454a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <lfs_dir_orphaningcommit+0x452>
 8004552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004556:	f113 0f02 	cmn.w	r3, #2
 800455a:	d002      	beq.n	8004562 <lfs_dir_orphaningcommit+0x452>
            return err;
 800455c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004560:	e0c3      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004562:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01a      	beq.n	80045a0 <lfs_dir_orphaningcommit+0x490>
 800456a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800456e:	f113 0f02 	cmn.w	r3, #2
 8004572:	d115      	bne.n	80045a0 <lfs_dir_orphaningcommit+0x490>
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <lfs_dir_orphaningcommit+0x488>)
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <lfs_dir_orphaningcommit+0x48c>)
 8004578:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <lfs_dir_orphaningcommit+0x47c>)
 800457e:	f006 fccb 	bl	800af18 <__assert_func>
 8004582:	bf00      	nop
 8004584:	000ffc08 	.word	0x000ffc08
 8004588:	0800c4ac 	.word	0x0800c4ac
 800458c:	0800c3a4 	.word	0x0800c3a4
 8004590:	0800c62c 	.word	0x0800c62c
 8004594:	0800c668 	.word	0x0800c668
 8004598:	0800c6ac 	.word	0x0800c6ac
 800459c:	0800cef8 	.word	0x0800cef8

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80045a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045a4:	f113 0f02 	cmn.w	r3, #2
 80045a8:	f000 8093 	beq.w	80046d2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3330      	adds	r3, #48	; 0x30
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fc fdfa 	bl	80011aa <lfs_gstate_hasorphans>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d011      	beq.n	80045e0 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80045bc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80045c0:	425b      	negs	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	b25b      	sxtb	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f002 f95d 	bl	8006888 <lfs_fs_preporphans>
 80045ce:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80045d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80045da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045de:	e084      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80045e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80045e4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3330      	adds	r3, #48	; 0x30
 80045ec:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fe22 	bl	800123c <lfs_gstate_hasmovehere>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01c      	beq.n	8004638 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fd5e 	bl	80010c4 <lfs_tag_id>
 8004608:	4603      	mov	r3, r0
 800460a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800460e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004612:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004616:	4837      	ldr	r0, [pc, #220]	; (80046f4 <lfs_dir_orphaningcommit+0x5e4>)
 8004618:	9002      	str	r0, [sp, #8]
 800461a:	9201      	str	r2, [sp, #4]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	460b      	mov	r3, r1
 8004620:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8004624:	4934      	ldr	r1, [pc, #208]	; (80046f8 <lfs_dir_orphaningcommit+0x5e8>)
 8004626:	4835      	ldr	r0, [pc, #212]	; (80046fc <lfs_dir_orphaningcommit+0x5ec>)
 8004628:	f007 f89c 	bl	800b764 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800462c:	2200      	movs	r2, #0
 800462e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f002 f978 	bl	8006928 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800463e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004644:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fcb6 	bl	8000fba <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800464e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004652:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <lfs_dir_orphaningcommit+0x55a>
 800465a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004664:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004668:	e000      	b.n	800466c <lfs_dir_orphaningcommit+0x55c>
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	2300      	movs	r3, #0
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
 8004672:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004676:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800467a:	051a      	lsls	r2, r3, #20
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <lfs_dir_orphaningcommit+0x5f0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
 8004688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004690:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004694:	2000      	movs	r0, #0
 8004696:	9001      	str	r0, [sp, #4]
 8004698:	2002      	movs	r0, #2
 800469a:	9000      	str	r0, [sp, #0]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fa83 	bl	8003ba8 <lfs_dir_relocatingcommit>
 80046a2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80046a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fc fc6b 	bl	8000f86 <lfs_pair_fromle32>
            if (state < 0) {
 80046b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da02      	bge.n	80046be <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80046b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046bc:	e015      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80046be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80046c2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80046c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80046ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80046d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f43f adfe 	beq.w	80042d8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80046dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <lfs_dir_orphaningcommit+0x5d8>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e000      	b.n	80046ea <lfs_dir_orphaningcommit+0x5da>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	37e0      	adds	r7, #224	; 0xe0
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bdb0      	pop	{r4, r5, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	0800c4ac 	.word	0x0800c4ac
 80046f8:	0800c3a4 	.word	0x0800c3a4
 80046fc:	0800c668 	.word	0x0800c668
 8004700:	000ffc08 	.word	0x000ffc08

08004704 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fcf9 	bl	8004110 <lfs_dir_orphaningcommit>
 800471e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	da01      	bge.n	800472a <lfs_dir_commit+0x26>
        return orphans;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	e00d      	b.n	8004746 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004730:	2100      	movs	r1, #0
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f002 fa1a 	bl	8006b6c <lfs_fs_deorphan>
 8004738:	6138      	str	r0, [r7, #16]
        if (err) {
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <lfs_dir_commit+0x40>
            return err;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	e000      	b.n	8004746 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800474e:	b590      	push	{r4, r7, lr}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	3b08      	subs	r3, #8
 8004766:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <lfs_ctz_index+0x2e>
        return 0;
 8004778:	2300      	movs	r3, #0
 800477a:	e01c      	b.n	80047b6 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f7fb ff83 	bl	800068c <lfs_popc>
 8004786:	4603      	mov	r3, r0
 8004788:	3302      	adds	r3, #2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	1ad2      	subs	r2, r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	1ad4      	subs	r4, r2, r3
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7fb ff71 	bl	800068c <lfs_popc>
 80047aa:	4603      	mov	r3, r0
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	1ae2      	subs	r2, r4, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	601a      	str	r2, [r3, #0]
    return i;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}

080047be <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80047be:	b590      	push	{r4, r7, lr}
 80047c0:	b08f      	sub	sp, #60	; 0x3c
 80047c2:	af04      	add	r7, sp, #16
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80047d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	601a      	str	r2, [r3, #0]
        *off = 0;
 80047da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
        return 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e053      	b.n	800488c <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	3b01      	subs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	4619      	mov	r1, r3
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ffac 	bl	800474e <lfs_ctz_index>
 80047f6:	4603      	mov	r3, r0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80047fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff ffa4 	bl	800474e <lfs_ctz_index>
 8004806:	4603      	mov	r3, r0
 8004808:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800480a:	e034      	b.n	8004876 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	3301      	adds	r3, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb ff1a 	bl	800064e <lfs_npw2>
 800481a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800481c:	1e5c      	subs	r4, r3, #1
 800481e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004820:	f7fb ff25 	bl	800066e <lfs_ctz>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	4620      	mov	r0, r4
 800482a:	f7fb fed9 	bl	80005e0 <lfs_min>
 800482e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	0092      	lsls	r2, r2, #2
 8004836:	2104      	movs	r1, #4
 8004838:	9103      	str	r1, [sp, #12]
 800483a:	4639      	mov	r1, r7
 800483c:	9102      	str	r1, [sp, #8]
 800483e:	9201      	str	r2, [sp, #4]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2304      	movs	r3, #4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fb ffa5 	bl	8000798 <lfs_bd_read>
 800484e:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb ff34 	bl	80006c0 <lfs_fromle32>
 8004858:	4603      	mov	r3, r0
 800485a:	603b      	str	r3, [r7, #0]
        if (err) {
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <lfs_ctz_find+0xa8>
            return err;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	e012      	b.n	800488c <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004866:	2201      	movs	r2, #1
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	461a      	mov	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	429a      	cmp	r2, r3
 800487c:	d8c6      	bhi.n	800480c <lfs_ctz_find+0x4e>
    }

    *block = head;
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	601a      	str	r2, [r3, #0]
    return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	372c      	adds	r7, #44	; 0x2c
 8004890:	46bd      	mov	sp, r7
 8004892:	bd90      	pop	{r4, r7, pc}

08004894 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b092      	sub	sp, #72	; 0x48
 8004898:	af04      	add	r7, sp, #16
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80048a2:	f107 0320 	add.w	r3, r7, #32
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7fc ff09 	bl	80016c0 <lfs_alloc>
 80048ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <lfs_ctz_extend+0x26>
            return err;
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	e0e9      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	4619      	mov	r1, r3
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7fc faa8 	bl	8000e14 <lfs_bd_erase>
 80048c4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80048d2:	f000 80cb 	beq.w	8004a6c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	e0d9      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d107      	bne.n	80048f0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e4:	601a      	str	r2, [r3, #0]
                *off = 0;
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
                return 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e0ce      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	3b01      	subs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80048f6:	f107 031c 	add.w	r3, r7, #28
 80048fa:	4619      	mov	r1, r3
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff ff26 	bl	800474e <lfs_ctz_index>
 8004902:	4603      	mov	r3, r0
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	429a      	cmp	r2, r3
 8004916:	d044      	beq.n	80049a2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
 800491c:	e035      	b.n	800498a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	2301      	movs	r3, #1
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	f107 0317 	add.w	r3, r7, #23
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	2100      	movs	r1, #0
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7fb ff2b 	bl	8000798 <lfs_bd_read>
 8004942:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <lfs_ctz_extend+0xba>
                        return err;
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	e09f      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2201      	movs	r2, #1
 8004952:	9203      	str	r2, [sp, #12]
 8004954:	f107 0217 	add.w	r2, r7, #23
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495c:	9201      	str	r2, [sp, #4]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2301      	movs	r3, #1
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7fc f9a8 	bl	8000cbc <lfs_bd_prog>
 800496c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800497a:	d101      	bne.n	8004980 <lfs_ctz_extend+0xec>
                            goto relocate;
 800497c:	bf00      	nop
                    goto relocate;
 800497e:	e075      	b.n	8004a6c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004982:	e084      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	3301      	adds	r3, #1
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498e:	429a      	cmp	r2, r3
 8004990:	d3c5      	bcc.n	800491e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004992:	6a3a      	ldr	r2, [r7, #32]
 8004994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004996:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	601a      	str	r2, [r3, #0]
                return 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	e075      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	3301      	adds	r3, #1
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f7fb fe60 	bl	800066e <lfs_ctz>
 80049ae:	4603      	mov	r3, r0
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80049b8:	2300      	movs	r3, #0
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
 80049bc:	e049      	b.n	8004a52 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fe88 	bl	80006d6 <lfs_tole32>
 80049c6:	4603      	mov	r3, r0
 80049c8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	0092      	lsls	r2, r2, #2
 80049d0:	2104      	movs	r1, #4
 80049d2:	9103      	str	r1, [sp, #12]
 80049d4:	f107 0118 	add.w	r1, r7, #24
 80049d8:	9102      	str	r1, [sp, #8]
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2301      	movs	r3, #1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fc f969 	bl	8000cbc <lfs_bd_prog>
 80049ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb fe66 	bl	80006c0 <lfs_fromle32>
 80049f4:	4603      	mov	r3, r0
 80049f6:	61bb      	str	r3, [r7, #24]
                if (err) {
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004a04:	d034      	beq.n	8004a70 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	e041      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d01b      	beq.n	8004a4c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a18:	0092      	lsls	r2, r2, #2
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	9103      	str	r1, [sp, #12]
 8004a1e:	f107 0118 	add.w	r1, r7, #24
 8004a22:	9102      	str	r1, [sp, #8]
 8004a24:	9201      	str	r2, [sp, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2304      	movs	r3, #4
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fb feb2 	bl	8000798 <lfs_bd_read>
 8004a34:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fb fe41 	bl	80006c0 <lfs_fromle32>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <lfs_ctz_extend+0x1b8>
                        return err;
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	e020      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	3301      	adds	r3, #1
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3b1      	bcc.n	80049be <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	601a      	str	r2, [r3, #0]
            return 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e010      	b.n	8004a8e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004a70:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <lfs_ctz_extend+0x204>)
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	f640 328a 	movw	r2, #2954	; 0xb8a
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <lfs_ctz_extend+0x208>)
 8004a7e:	4808      	ldr	r0, [pc, #32]	; (8004aa0 <lfs_ctz_extend+0x20c>)
 8004a80:	f006 fe70 	bl	800b764 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7fb fe60 	bl	800074c <lfs_cache_drop>
    while (true) {
 8004a8c:	e709      	b.n	80048a2 <lfs_ctz_extend+0xe>
    }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3738      	adds	r7, #56	; 0x38
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	0800c4ac 	.word	0x0800c4ac
 8004a9c:	0800c3a4 	.word	0x0800c3a4
 8004aa0:	0800c52c 	.word	0x0800c52c

08004aa4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b090      	sub	sp, #64	; 0x40
 8004aa8:	af04      	add	r7, sp, #16
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <lfs_ctz_traverse+0x18>
        return 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e06d      	b.n	8004b98 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	f107 031c 	add.w	r3, r7, #28
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fe40 	bl	800474e <lfs_ctz_index>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ad8:	4798      	blx	r3
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <lfs_ctz_traverse+0x42>
            return err;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	e058      	b.n	8004b98 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <lfs_ctz_traverse+0x4c>
            return 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e053      	b.n	8004b98 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	f1c3 0302 	rsb	r3, r3, #2
 8004afa:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004afc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004afe:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004b00:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004b02:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fb fe3c 	bl	8000798 <lfs_bd_read>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fb fdcb 	bl	80006c0 <lfs_fromle32>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fb fdc5 	bl	80006c0 <lfs_fromle32>
 8004b36:	4603      	mov	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <lfs_ctz_traverse+0xa0>
            return err;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	e029      	b.n	8004b98 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b48:	e013      	b.n	8004b72 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b52:	4413      	add	r3, r2
 8004b54:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004b5e:	4798      	blx	r3
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <lfs_ctz_traverse+0xc8>
                return err;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	e015      	b.n	8004b98 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	3301      	adds	r3, #1
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	dbe6      	blt.n	8004b4a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b86:	4413      	add	r3, r2
 8004b88:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004b8c:	603b      	str	r3, [r7, #0]
        index -= count;
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004b96:	e79c      	b.n	8004ad2 <lfs_ctz_traverse+0x2e>
    }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3730      	adds	r7, #48	; 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004ba0:	b5b0      	push	{r4, r5, r7, lr}
 8004ba2:	b09a      	sub	sp, #104	; 0x68
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f002 f987 	bl	8006ecc <lfs_fs_forceconsistency>
 8004bbe:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <lfs_file_rawopencfg+0x2a>
            return err;
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc8:	e1b0      	b.n	8004f2c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004bce:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f103 0108 	add.w	r1, r3, #8
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	1d3a      	adds	r2, r7, #4
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7fe f88d 	bl	8002d14 <lfs_dir_find>
 8004bfa:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0c      	bge.n	8004c1c <lfs_file_rawopencfg+0x7c>
 8004c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c04:	f113 0f02 	cmn.w	r3, #2
 8004c08:	d105      	bne.n	8004c16 <lfs_file_rawopencfg+0x76>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	889b      	ldrh	r3, [r3, #4]
 8004c0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d102      	bne.n	8004c1c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004c1a:	e17c      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7fc fc78 	bl	800151a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c2c:	f113 0f02 	cmn.w	r3, #2
 8004c30:	d14e      	bne.n	8004cd0 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004c3c:	f06f 0301 	mvn.w	r3, #1
 8004c40:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004c42:	e168      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fad2 	bl	80001f0 <strlen>
 8004c4c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d903      	bls.n	8004c60 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004c58:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004c5e:	e15a      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f103 0108 	add.w	r1, r3, #8
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	889b      	ldrh	r3, [r3, #4]
 8004c6a:	029b      	lsls	r3, r3, #10
 8004c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	2300      	movs	r3, #0
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	889b      	ldrh	r3, [r3, #4]
 8004c7e:	029a      	lsls	r2, r3, #10
 8004c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	889b      	ldrh	r3, [r3, #4]
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fd2b 	bl	8004704 <lfs_dir_commit>
 8004cae:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	f113 0f1c 	cmn.w	r3, #28
 8004cb6:	d001      	beq.n	8004cbc <lfs_file_rawopencfg+0x11c>
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	e001      	b.n	8004cc0 <lfs_file_rawopencfg+0x120>
 8004cbc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 8125 	bne.w	8004f14 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004cca:	4b9a      	ldr	r3, [pc, #616]	; (8004f34 <lfs_file_rawopencfg+0x394>)
 8004ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cce:	e044      	b.n	8004d5a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8004cda:	f06f 0310 	mvn.w	r3, #16
 8004cde:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004ce0:	e119      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8004ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc f9c3 	bl	8001070 <lfs_tag_type3>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d003      	beq.n	8004cf8 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8004cf0:	f06f 0314 	mvn.w	r3, #20
 8004cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004cf6:	e10e      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	889b      	ldrh	r3, [r3, #4]
 8004d06:	029b      	lsls	r3, r3, #10
 8004d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d10:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d1e:	e01c      	b.n	8004d5a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	889b      	ldrh	r3, [r3, #4]
 8004d2a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d30:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d38:	9200      	str	r2, [sp, #0]
 8004d3a:	4a7f      	ldr	r2, [pc, #508]	; (8004f38 <lfs_file_rawopencfg+0x398>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7fc fe27 	bl	8001990 <lfs_dir_get>
 8004d42:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da02      	bge.n	8004d50 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004d4e:	e0e2      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3328      	adds	r3, #40	; 0x28
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fc fb01 	bl	800135c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5e:	e063      	b.n	8004e28 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03c      	beq.n	8004de6 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d8a:	051a      	lsls	r2, r3, #20
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	889b      	ldrh	r3, [r3, #4]
 8004d90:	029b      	lsls	r3, r3, #10
 8004d92:	ea42 0103 	orr.w	r1, r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	6858      	ldr	r0, [r3, #4]
 8004d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4403      	add	r3, r0
 8004da8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004daa:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <lfs_file_rawopencfg+0x39c>)
 8004dc8:	4621      	mov	r1, r4
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7fc fde0 	bl	8001990 <lfs_dir_get>
 8004dd0:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da06      	bge.n	8004de6 <lfs_file_rawopencfg+0x246>
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dda:	f113 0f02 	cmn.w	r3, #2
 8004dde:	d002      	beq.n	8004de6 <lfs_file_rawopencfg+0x246>
                err = res;
 8004de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004de4:	e097      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8004e0e:	f06f 031b 	mvn.w	r3, #27
 8004e12:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004e14:	e07f      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e24:	3301      	adds	r3, #1
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d395      	bcc.n	8004d60 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e48:	e010      	b.n	8004e6c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb fc64 	bl	800071e <lfs_malloc>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8004e64:	f06f 030b 	mvn.w	r3, #11
 8004e68:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004e6a:	e054      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3340      	adds	r3, #64	; 0x40
 8004e70:	4619      	mov	r1, r3
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7fb fc79 	bl	800076a <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fc f8f8 	bl	8001070 <lfs_tag_type3>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	f240 2301 	movw	r3, #513	; 0x201
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d141      	bne.n	8004f10 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f06f 0201 	mvn.w	r2, #1
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc f924 	bl	80010e4 <lfs_tag_size>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d020      	beq.n	8004f10 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	889b      	ldrh	r3, [r3, #4]
 8004ed8:	029c      	lsls	r4, r3, #10
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb7c 	bl	80005e0 <lfs_min>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004eec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	; (8004f38 <lfs_file_rawopencfg+0x398>)
 8004efa:	4629      	mov	r1, r5
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7fc fd47 	bl	8001990 <lfs_dir_get>
 8004f02:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8004f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da02      	bge.n	8004f10 <lfs_file_rawopencfg+0x370>
                err = res;
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004f0e:	e002      	b.n	8004f16 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e00b      	b.n	8004f2c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8004f14:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f823 	bl	8004f70 <lfs_file_rawclose>
    return err;
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3760      	adds	r7, #96	; 0x60
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bdb0      	pop	{r4, r5, r7, pc}
 8004f34:	20100000 	.word	0x20100000
 8004f38:	700ffc00 	.word	0x700ffc00
 8004f3c:	7ffffc00 	.word	0x7ffffc00

08004f40 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <lfs_file_rawopen+0x2c>)
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fe21 	bl	8004ba0 <lfs_file_rawopencfg>
 8004f5e:	6178      	str	r0, [r7, #20]
    return err;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	0800cf10 	.word	0x0800cf10

08004f70 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9e5 	bl	800534c <lfs_file_rawsync>
 8004f82:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc faa5 	bl	80014d6 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb fbcb 	bl	8000736 <lfs_free>
    }

    return err;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b08d      	sub	sp, #52	; 0x34
 8004fb0:	af06      	add	r7, sp, #24
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004fb6:	f107 030c 	add.w	r3, r7, #12
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fc fb7f 	bl	80016c0 <lfs_alloc>
 8004fc2:	6138      	str	r0, [r7, #16]
        if (err) {
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <lfs_file_relocate+0x22>
            return err;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	e0bb      	b.n	8005146 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fb ff1e 	bl	8000e14 <lfs_bd_erase>
 8004fd8:	6138      	str	r0, [r7, #16]
        if (err) {
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fe6:	f000 809b 	beq.w	8005120 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	e0ab      	b.n	8005146 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e069      	b.n	80050c8 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d027      	beq.n	8005050 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f103 0008 	add.w	r0, r3, #8
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	889b      	ldrh	r3, [r3, #4]
 8005018:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800501a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	2101      	movs	r1, #1
 8005024:	9105      	str	r1, [sp, #20]
 8005026:	f107 010b 	add.w	r1, r7, #11
 800502a:	9104      	str	r1, [sp, #16]
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	9103      	str	r1, [sp, #12]
 8005030:	9302      	str	r3, [sp, #8]
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <lfs_file_relocate+0x1a4>)
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	9200      	str	r2, [sp, #0]
 8005038:	4623      	mov	r3, r4
 800503a:	2200      	movs	r2, #0
 800503c:	4601      	mov	r1, r0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fc fcc1 	bl	80019c6 <lfs_dir_getread>
 8005044:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <lfs_file_relocate+0xde>
                    return err;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	e07a      	b.n	8005146 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8005056:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad4      	subs	r4, r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	2201      	movs	r2, #1
 8005066:	9203      	str	r2, [sp, #12]
 8005068:	f107 020b 	add.w	r2, r7, #11
 800506c:	9202      	str	r2, [sp, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	9201      	str	r2, [sp, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4623      	mov	r3, r4
 8005076:	4602      	mov	r2, r0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fb fb8d 	bl	8000798 <lfs_bd_read>
 800507e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <lfs_file_relocate+0xde>
                    return err;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	e05d      	b.n	8005146 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f103 0110 	add.w	r1, r3, #16
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	9203      	str	r2, [sp, #12]
 8005098:	f107 020b 	add.w	r2, r7, #11
 800509c:	9202      	str	r2, [sp, #8]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	9201      	str	r2, [sp, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2301      	movs	r3, #1
 80050a6:	4602      	mov	r2, r0
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fb fe07 	bl	8000cbc <lfs_bd_prog>
 80050ae:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80050bc:	d032      	beq.n	8005124 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	e041      	b.n	8005146 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3301      	adds	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d390      	bcc.n	8004ff4 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69d9      	ldr	r1, [r3, #28]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	461a      	mov	r2, r3
 80050e2:	f005 ff91 	bl	800b008 <memcpy>
        file->cache.block = lfs->pcache.block;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3310      	adds	r3, #16
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fb fb30 	bl	800076a <lfs_cache_zero>

        file->block = nblock;
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800511c:	2300      	movs	r3, #0
 800511e:	e012      	b.n	8005146 <lfs_file_relocate+0x19a>
                goto relocate;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005124:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <lfs_file_relocate+0x1a8>)
 800512a:	9200      	str	r2, [sp, #0]
 800512c:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8005130:	4909      	ldr	r1, [pc, #36]	; (8005158 <lfs_file_relocate+0x1ac>)
 8005132:	480a      	ldr	r0, [pc, #40]	; (800515c <lfs_file_relocate+0x1b0>)
 8005134:	f006 fb16 	bl	800b764 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3310      	adds	r3, #16
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fb04 	bl	800074c <lfs_cache_drop>
    while (true) {
 8005144:	e737      	b.n	8004fb6 <lfs_file_relocate+0xa>
    }
}
 8005146:	4618      	mov	r0, r3
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	fff7fc00 	.word	0xfff7fc00
 8005154:	0800c4ac 	.word	0x0800c4ac
 8005158:	0800c3a4 	.word	0x0800c3a4
 800515c:	0800c52c 	.word	0x0800c52c

08005160 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fa42 	bl	80015fc <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ff16 	bl	8004fac <lfs_file_relocate>
 8005180:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <lfs_file_outline+0x2c>
        return err;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	e006      	b.n	800519a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b09f      	sub	sp, #124	; 0x7c
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d105      	bne.n	80051d2 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3340      	adds	r3, #64	; 0x40
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fb fabd 	bl	800074c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80a4 	beq.w	8005334 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d176      	bne.n	80052ec <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	2254      	movs	r2, #84	; 0x54
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f005 ff0c 	bl	800b024 <memset>
                .ctz.head = file->ctz.head,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
 8005218:	2301      	movs	r3, #1
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800522a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fa8a 	bl	800074c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005238:	e02b      	b.n	8005292 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800523a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800523e:	f107 010c 	add.w	r1, r7, #12
 8005242:	2301      	movs	r3, #1
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f90d 	bl	8005464 <lfs_file_flushedread>
 800524a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800524c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524e:	2b00      	cmp	r3, #0
 8005250:	da01      	bge.n	8005256 <lfs_file_flush+0xb2>
                    return res;
 8005252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005254:	e06f      	b.n	8005336 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005256:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800525a:	2301      	movs	r3, #1
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa08 	bl	8005674 <lfs_file_flushedwrite>
 8005264:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005268:	2b00      	cmp	r3, #0
 800526a:	da01      	bge.n	8005270 <lfs_file_flush+0xcc>
                    return res;
 800526c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800526e:	e062      	b.n	8005336 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d00b      	beq.n	8005292 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800527a:	f107 030c 	add.w	r3, r7, #12
 800527e:	3340      	adds	r3, #64	; 0x40
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fb fa62 	bl	800074c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fb fa5d 	bl	800074c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	429a      	cmp	r2, r3
 800529c:	d3cd      	bcc.n	800523a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	2301      	movs	r3, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fb fc59 	bl	8000b60 <lfs_bd_flush>
 80052ae:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80052b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d026      	beq.n	8005304 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80052b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80052bc:	d001      	beq.n	80052c2 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80052be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052c0:	e039      	b.n	8005336 <lfs_file_flush+0x192>
                        goto relocate;
 80052c2:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <lfs_file_flush+0x19c>)
 80052ca:	9200      	str	r2, [sp, #0]
 80052cc:	f640 520f 	movw	r2, #3343	; 0xd0f
 80052d0:	491c      	ldr	r1, [pc, #112]	; (8005344 <lfs_file_flush+0x1a0>)
 80052d2:	481d      	ldr	r0, [pc, #116]	; (8005348 <lfs_file_flush+0x1a4>)
 80052d4:	f006 fa46 	bl	800b764 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fe66 	bl	8004fac <lfs_file_relocate>
 80052e0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80052e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0da      	beq.n	800529e <lfs_file_flush+0xfa>
                    return err;
 80052e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052ea:	e024      	b.n	8005336 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f7fb f962 	bl	80005c0 <lfs_max>
 80052fc:	4602      	mov	r2, r0
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
 8005302:	e000      	b.n	8005306 <lfs_file_flush+0x162>
                break;
 8005304:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005332:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3774      	adds	r7, #116	; 0x74
 800533a:	46bd      	mov	sp, r7
 800533c:	bd90      	pop	{r4, r7, pc}
 800533e:	bf00      	nop
 8005340:	0800c4ac 	.word	0x0800c4ac
 8005344:	0800c3a4 	.word	0x0800c3a4
 8005348:	0800c52c 	.word	0x0800c52c

0800534c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b090      	sub	sp, #64	; 0x40
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005362:	2300      	movs	r3, #0
 8005364:	e07a      	b.n	800545c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ff1b 	bl	80051a4 <lfs_file_flush>
 800536e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	e06a      	b.n	800545c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d063      	beq.n	800545a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb fd83 	bl	8000ea2 <lfs_pair_isnull>
 800539c:	4603      	mov	r3, r0
 800539e:	f083 0301 	eor.w	r3, r3, #1
 80053a2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d058      	beq.n	800545a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80053b4:	f240 2301 	movw	r3, #513	; 0x201
 80053b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
 80053c6:	e014      	b.n	80053f2 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80053c8:	f240 2302 	movw	r3, #514	; 0x202
 80053cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d4:	3228      	adds	r2, #40	; 0x28
 80053d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053da:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80053de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb ffd2 	bl	800138c <lfs_ctz_tole32>
            buffer = &ctz;
 80053e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80053ee:	2308      	movs	r3, #8
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f103 0108 	add.w	r1, r3, #8
 80053f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053fa:	051a      	lsls	r2, r3, #20
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	889b      	ldrh	r3, [r3, #4]
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	431a      	orrs	r2, r3
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	889b      	ldrh	r3, [r3, #4]
 8005412:	029a      	lsls	r2, r3, #10
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	f107 0218 	add.w	r2, r7, #24
 800542e:	2302      	movs	r3, #2
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff f967 	bl	8004704 <lfs_dir_commit>
 8005436:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	e006      	b.n	800545c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3740      	adds	r7, #64	; 0x40
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b090      	sub	sp, #64	; 0x40
 8005468:	af06      	add	r7, sp, #24
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	429a      	cmp	r2, r3
 8005484:	d301      	bcc.n	800548a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005486:	2300      	movs	r3, #0
 8005488:	e0b7      	b.n	80055fa <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	4619      	mov	r1, r3
 8005496:	6838      	ldr	r0, [r7, #0]
 8005498:	f7fb f8a2 	bl	80005e0 <lfs_min>
 800549c:	6038      	str	r0, [r7, #0]
    nsize = size;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80054a2:	e0a5      	b.n	80055f0 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d130      	bne.n	8005520 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11c      	bne.n	8005504 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	3138      	adds	r1, #56	; 0x38
 80054e0:	68b8      	ldr	r0, [r7, #8]
 80054e2:	303c      	adds	r0, #60	; 0x3c
 80054e4:	9003      	str	r0, [sp, #12]
 80054e6:	9102      	str	r1, [sp, #8]
 80054e8:	9201      	str	r2, [sp, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	462b      	mov	r3, r5
 80054ee:	4622      	mov	r2, r4
 80054f0:	2100      	movs	r1, #0
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff f963 	bl	80047be <lfs_ctz_find>
 80054f8:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <lfs_file_flushedread+0xb0>
                    return err;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	e07a      	b.n	80055fa <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f06f 0201 	mvn.w	r2, #1
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	4619      	mov	r1, r3
 800552e:	6a38      	ldr	r0, [r7, #32]
 8005530:	f7fb f856 	bl	80005e0 <lfs_min>
 8005534:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d026      	beq.n	8005590 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f103 0408 	add.w	r4, r3, #8
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005552:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	889b      	ldrh	r3, [r3, #4]
 8005558:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800555a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	9005      	str	r0, [sp, #20]
 800556a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800556c:	9004      	str	r0, [sp, #16]
 800556e:	9103      	str	r1, [sp, #12]
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <lfs_file_flushedread+0x1a0>)
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	9200      	str	r2, [sp, #0]
 8005578:	462b      	mov	r3, r5
 800557a:	2200      	movs	r2, #0
 800557c:	4621      	mov	r1, r4
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7fc fa21 	bl	80019c6 <lfs_dir_getread>
 8005584:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01d      	beq.n	80055c8 <lfs_file_flushedread+0x164>
                return err;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	e034      	b.n	80055fa <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800559a:	69dc      	ldr	r4, [r3, #28]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	9103      	str	r1, [sp, #12]
 80055a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055aa:	9102      	str	r1, [sp, #8]
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4623      	mov	r3, r4
 80055b2:	4602      	mov	r2, r0
 80055b4:	2100      	movs	r1, #0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fb f8ee 	bl	8000798 <lfs_bd_read>
 80055bc:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <lfs_file_flushedread+0x164>
                return err;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	e018      	b.n	80055fa <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	441a      	add	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	441a      	add	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4413      	add	r3, r2
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f47f af56 	bne.w	80054a4 <lfs_file_flushedread+0x40>
    }

    return size;
 80055f8:	683b      	ldr	r3, [r7, #0]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdb0      	pop	{r4, r5, r7, pc}
 8005602:	bf00      	nop
 8005604:	fff7fc00 	.word	0xfff7fc00

08005608 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <lfs_file_rawread+0x28>
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <lfs_file_rawread+0x60>)
 8005624:	4a11      	ldr	r2, [pc, #68]	; (800566c <lfs_file_rawread+0x64>)
 8005626:	f640 519a 	movw	r1, #3482	; 0xd9a
 800562a:	4811      	ldr	r0, [pc, #68]	; (8005670 <lfs_file_rawread+0x68>)
 800562c:	f005 fc74 	bl	800af18 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fdb0 	bl	80051a4 <lfs_file_flush>
 8005644:	6178      	str	r0, [r7, #20]
        if (err) {
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <lfs_file_rawread+0x48>
            return err;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	e006      	b.n	800565e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff04 	bl	8005464 <lfs_file_flushedread>
 800565c:	4603      	mov	r3, r0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	0800c6d4 	.word	0x0800c6d4
 800566c:	0800cf1c 	.word	0x0800cf1c
 8005670:	0800c3a4 	.word	0x0800c3a4

08005674 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005674:	b5b0      	push	{r4, r5, r7, lr}
 8005676:	b090      	sub	sp, #64	; 0x40
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 810e 	beq.w	80058b4 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	441a      	add	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fa ff8a 	bl	80005c0 <lfs_max>
 80056ac:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80056b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80056c4:	08db      	lsrs	r3, r3, #3
 80056c6:	e003      	b.n	80056d0 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056cc:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7fa ff84 	bl	80005e0 <lfs_min>
 80056d8:	4603      	mov	r3, r0
 80056da:	4619      	mov	r1, r3
 80056dc:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80056e0:	f7fa ff7e 	bl	80005e0 <lfs_min>
 80056e4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80056e6:	429c      	cmp	r4, r3
 80056e8:	f240 80e4 	bls.w	80058b4 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff fd36 	bl	8005160 <lfs_file_outline>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80db 	beq.w	80058b4 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	e0d7      	b.n	80058be <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005722:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d16d      	bne.n	8005804 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d159      	bne.n	80057e8 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d12f      	bne.n	80057a0 <lfs_file_flushedwrite+0x12c>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d02b      	beq.n	80057a0 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800575a:	3a01      	subs	r2, #1
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005760:	2000      	movs	r0, #0
 8005762:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005764:	f107 0010 	add.w	r0, r7, #16
 8005768:	9003      	str	r0, [sp, #12]
 800576a:	9102      	str	r1, [sp, #8]
 800576c:	9201      	str	r2, [sp, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462b      	mov	r3, r5
 8005772:	4622      	mov	r2, r4
 8005774:	2100      	movs	r1, #0
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff f821 	bl	80047be <lfs_ctz_find>
 800577c:	6238      	str	r0, [r7, #32]
                    if (err) {
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	e094      	b.n	80058be <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3340      	adds	r3, #64	; 0x40
 8005798:	4619      	mov	r1, r3
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7fa ffe5 	bl	800076a <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7fb ff2b 	bl	80015fc <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80057ac:	68fc      	ldr	r4, [r7, #12]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	3238      	adds	r2, #56	; 0x38
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	313c      	adds	r1, #60	; 0x3c
 80057be:	9102      	str	r1, [sp, #8]
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462b      	mov	r3, r5
 80057c6:	4622      	mov	r2, r4
 80057c8:	4601      	mov	r1, r0
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff f862 	bl	8004894 <lfs_ctz_extend>
 80057d0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00f      	beq.n	80057f8 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	e06a      	b.n	80058be <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f06f 0201 	mvn.w	r2, #1
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005814:	f7fa fee4 	bl	80005e0 <lfs_min>
 8005818:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005820:	68fc      	ldr	r4, [r7, #12]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800582a:	69b9      	ldr	r1, [r7, #24]
 800582c:	9103      	str	r1, [sp, #12]
 800582e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005830:	9102      	str	r1, [sp, #8]
 8005832:	9201      	str	r2, [sp, #4]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2301      	movs	r3, #1
 8005838:	4622      	mov	r2, r4
 800583a:	4601      	mov	r1, r0
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7fb fa3d 	bl	8000cbc <lfs_bd_prog>
 8005842:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01c      	beq.n	8005884 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005850:	d007      	beq.n	8005862 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	e02d      	b.n	80058be <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8005862:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fba0 	bl	8004fac <lfs_file_relocate>
 800586c:	6178      	str	r0, [r7, #20]
            if (err) {
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0d2      	beq.n	800581a <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	e01c      	b.n	80058be <lfs_file_flushedwrite+0x24a>
            break;
 8005884:	bf00      	nop
            }
        }

        file->pos += diff;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	441a      	add	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	441a      	add	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800589e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	4413      	add	r3, r2
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80058a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fb fea4 	bl	80015fc <lfs_alloc_ack>
    while (nsize > 0) {
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f47f af29 	bne.w	800570e <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80058bc:	683b      	ldr	r3, [r7, #0]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3730      	adds	r7, #48	; 0x30
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080058c8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08a      	sub	sp, #40	; 0x28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <lfs_file_rawwrite+0x28>
 80058e2:	4b38      	ldr	r3, [pc, #224]	; (80059c4 <lfs_file_rawwrite+0xfc>)
 80058e4:	4a38      	ldr	r2, [pc, #224]	; (80059c8 <lfs_file_rawwrite+0x100>)
 80058e6:	f640 6105 	movw	r1, #3589	; 0xe05
 80058ea:	4838      	ldr	r0, [pc, #224]	; (80059cc <lfs_file_rawwrite+0x104>)
 80058ec:	f005 fb14 	bl	800af18 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff fc50 	bl	80051a4 <lfs_file_flush>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <lfs_file_rawwrite+0x48>
            return err;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	e055      	b.n	80059bc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <lfs_file_rawwrite+0x68>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	429a      	cmp	r2, r3
 8005926:	d203      	bcs.n	8005930 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	441a      	add	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	429a      	cmp	r2, r3
 800593e:	d902      	bls.n	8005946 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005940:	f06f 031a 	mvn.w	r3, #26
 8005944:	e03a      	b.n	80059bc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d121      	bne.n	8005996 <lfs_file_rawwrite+0xce>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	429a      	cmp	r2, r3
 800595c:	d91b      	bls.n	8005996 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800596c:	e00e      	b.n	800598c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
 8005972:	f107 0217 	add.w	r2, r7, #23
 8005976:	2301      	movs	r3, #1
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fe7a 	bl	8005674 <lfs_file_flushedwrite>
 8005980:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	da01      	bge.n	800598c <lfs_file_rawwrite+0xc4>
                return res;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	e017      	b.n	80059bc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	429a      	cmp	r2, r3
 8005994:	d8eb      	bhi.n	800596e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fe69 	bl	8005674 <lfs_file_flushedwrite>
 80059a2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da01      	bge.n	80059ae <lfs_file_rawwrite+0xe6>
        return nsize;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	e006      	b.n	80059bc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80059ba:	69bb      	ldr	r3, [r7, #24]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	0800c704 	.word	0x0800c704
 80059c8:	0800cf30 	.word	0x0800cf30
 80059cc:	0800c3a4 	.word	0x0800c3a4

080059d0 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	; 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <lfs_init+0x34>
 80059f6:	4b98      	ldr	r3, [pc, #608]	; (8005c58 <lfs_init+0x288>)
 80059f8:	4a98      	ldr	r2, [pc, #608]	; (8005c5c <lfs_init+0x28c>)
 80059fa:	f241 0123 	movw	r1, #4131	; 0x1023
 80059fe:	4898      	ldr	r0, [pc, #608]	; (8005c60 <lfs_init+0x290>)
 8005a00:	f005 fa8a 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <lfs_init+0x4c>
 8005a0e:	4b95      	ldr	r3, [pc, #596]	; (8005c64 <lfs_init+0x294>)
 8005a10:	4a92      	ldr	r2, [pc, #584]	; (8005c5c <lfs_init+0x28c>)
 8005a12:	f241 0124 	movw	r1, #4132	; 0x1024
 8005a16:	4892      	ldr	r0, [pc, #584]	; (8005c60 <lfs_init+0x290>)
 8005a18:	f005 fa7e 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <lfs_init+0x64>
 8005a26:	4b90      	ldr	r3, [pc, #576]	; (8005c68 <lfs_init+0x298>)
 8005a28:	4a8c      	ldr	r2, [pc, #560]	; (8005c5c <lfs_init+0x28c>)
 8005a2a:	f241 0125 	movw	r1, #4133	; 0x1025
 8005a2e:	488c      	ldr	r0, [pc, #560]	; (8005c60 <lfs_init+0x290>)
 8005a30:	f005 fa72 	bl	800af18 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a3e:	6952      	ldr	r2, [r2, #20]
 8005a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a44:	fb02 f201 	mul.w	r2, r2, r1
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d006      	beq.n	8005a5c <lfs_init+0x8c>
 8005a4e:	4b87      	ldr	r3, [pc, #540]	; (8005c6c <lfs_init+0x29c>)
 8005a50:	4a82      	ldr	r2, [pc, #520]	; (8005c5c <lfs_init+0x28c>)
 8005a52:	f241 0129 	movw	r1, #4137	; 0x1029
 8005a56:	4882      	ldr	r0, [pc, #520]	; (8005c60 <lfs_init+0x290>)
 8005a58:	f005 fa5e 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a66:	6992      	ldr	r2, [r2, #24]
 8005a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a6c:	fb02 f201 	mul.w	r2, r2, r1
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <lfs_init+0xb4>
 8005a76:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <lfs_init+0x2a0>)
 8005a78:	4a78      	ldr	r2, [pc, #480]	; (8005c5c <lfs_init+0x28c>)
 8005a7a:	f241 012a 	movw	r1, #4138	; 0x102a
 8005a7e:	4878      	ldr	r0, [pc, #480]	; (8005c60 <lfs_init+0x290>)
 8005a80:	f005 fa4a 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a94:	fb02 f201 	mul.w	r2, r2, r1
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d006      	beq.n	8005aac <lfs_init+0xdc>
 8005a9e:	4b75      	ldr	r3, [pc, #468]	; (8005c74 <lfs_init+0x2a4>)
 8005aa0:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <lfs_init+0x28c>)
 8005aa2:	f241 012b 	movw	r1, #4139	; 0x102b
 8005aa6:	486e      	ldr	r0, [pc, #440]	; (8005c60 <lfs_init+0x290>)
 8005aa8:	f005 fa36 	bl	800af18 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d806      	bhi.n	8005ac4 <lfs_init+0xf4>
 8005ab6:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <lfs_init+0x2a8>)
 8005ab8:	4a68      	ldr	r2, [pc, #416]	; (8005c5c <lfs_init+0x28c>)
 8005aba:	f241 012e 	movw	r1, #4142	; 0x102e
 8005abe:	4868      	ldr	r0, [pc, #416]	; (8005c60 <lfs_init+0x290>)
 8005ac0:	f005 fa2a 	bl	800af18 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	3b08      	subs	r3, #8
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fdba 	bl	800064e <lfs_npw2>
 8005ada:	4603      	mov	r3, r0
 8005adc:	009a      	lsls	r2, r3, #2
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d906      	bls.n	8005af6 <lfs_init+0x126>
 8005ae8:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <lfs_init+0x2ac>)
 8005aea:	4a5c      	ldr	r2, [pc, #368]	; (8005c5c <lfs_init+0x28c>)
 8005aec:	f241 0131 	movw	r1, #4145	; 0x1031
 8005af0:	485b      	ldr	r0, [pc, #364]	; (8005c60 <lfs_init+0x290>)
 8005af2:	f005 fa11 	bl	800af18 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d106      	bne.n	8005b0e <lfs_init+0x13e>
 8005b00:	4b5f      	ldr	r3, [pc, #380]	; (8005c80 <lfs_init+0x2b0>)
 8005b02:	4a56      	ldr	r2, [pc, #344]	; (8005c5c <lfs_init+0x28c>)
 8005b04:	f241 013a 	movw	r1, #4154	; 0x103a
 8005b08:	4855      	ldr	r0, [pc, #340]	; (8005c60 <lfs_init+0x290>)
 8005b0a:	f005 fa05 	bl	800af18 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <lfs_init+0x154>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	e010      	b.n	8005b46 <lfs_init+0x176>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fa fdf7 	bl	800071e <lfs_malloc>
 8005b30:	4602      	mov	r2, r0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <lfs_init+0x176>
            err = LFS_ERR_NOMEM;
 8005b3e:	f06f 030b 	mvn.w	r3, #11
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005b44:	e0ff      	b.n	8005d46 <lfs_init+0x376>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <lfs_init+0x18c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e010      	b.n	8005b7e <lfs_init+0x1ae>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa fddb 	bl	800071e <lfs_malloc>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <lfs_init+0x1ae>
            err = LFS_ERR_NOMEM;
 8005b76:	f06f 030b 	mvn.w	r3, #11
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005b7c:	e0e3      	b.n	8005d46 <lfs_init+0x376>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fa fdf1 	bl	800076a <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3310      	adds	r3, #16
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fa fdeb 	bl	800076a <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <lfs_init+0x1dc>
 8005b9e:	4b39      	ldr	r3, [pc, #228]	; (8005c84 <lfs_init+0x2b4>)
 8005ba0:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <lfs_init+0x28c>)
 8005ba2:	f241 0158 	movw	r1, #4184	; 0x1058
 8005ba6:	482e      	ldr	r0, [pc, #184]	; (8005c60 <lfs_init+0x290>)
 8005ba8:	f005 f9b6 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <lfs_init+0x1f8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <lfs_init+0x206>
 8005bc8:	4b2f      	ldr	r3, [pc, #188]	; (8005c88 <lfs_init+0x2b8>)
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <lfs_init+0x28c>)
 8005bcc:	f241 0159 	movw	r1, #4185	; 0x1059
 8005bd0:	4823      	ldr	r0, [pc, #140]	; (8005c60 <lfs_init+0x290>)
 8005bd2:	f005 f9a1 	bl	800af18 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <lfs_init+0x21c>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64
 8005bea:	e010      	b.n	8005c0e <lfs_init+0x23e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fa fd93 	bl	800071e <lfs_malloc>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <lfs_init+0x23e>
            err = LFS_ERR_NOMEM;
 8005c06:	f06f 030b 	mvn.w	r3, #11
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c0c:	e09b      	b.n	8005d46 <lfs_init+0x376>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2bff      	cmp	r3, #255	; 0xff
 8005c16:	d906      	bls.n	8005c26 <lfs_init+0x256>
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <lfs_init+0x2bc>)
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <lfs_init+0x28c>)
 8005c1c:	f241 0166 	movw	r1, #4198	; 0x1066
 8005c20:	480f      	ldr	r0, [pc, #60]	; (8005c60 <lfs_init+0x290>)
 8005c22:	f005 f979 	bl	800af18 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <lfs_init+0x26e>
        lfs->name_max = LFS_NAME_MAX;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da25      	bge.n	8005c94 <lfs_init+0x2c4>
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <lfs_init+0x2c0>)
 8005c4a:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <lfs_init+0x28c>)
 8005c4c:	f241 016c 	movw	r1, #4204	; 0x106c
 8005c50:	4803      	ldr	r0, [pc, #12]	; (8005c60 <lfs_init+0x290>)
 8005c52:	f005 f961 	bl	800af18 <__assert_func>
 8005c56:	bf00      	nop
 8005c58:	0800c734 	.word	0x0800c734
 8005c5c:	0800cf44 	.word	0x0800cf44
 8005c60:	0800c3a4 	.word	0x0800c3a4
 8005c64:	0800c750 	.word	0x0800c750
 8005c68:	0800c76c 	.word	0x0800c76c
 8005c6c:	0800c788 	.word	0x0800c788
 8005c70:	0800c7b8 	.word	0x0800c7b8
 8005c74:	0800c7e8 	.word	0x0800c7e8
 8005c78:	0800c81c 	.word	0x0800c81c
 8005c7c:	0800c838 	.word	0x0800c838
 8005c80:	0800c884 	.word	0x0800c884
 8005c84:	0800c8a0 	.word	0x0800c8a0
 8005c88:	0800c8c0 	.word	0x0800c8c0
 8005c8c:	0800c914 	.word	0x0800c914
 8005c90:	0800c930 	.word	0x0800c930
    lfs->file_max = lfs->cfg->file_max;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <lfs_init+0x2de>
        lfs->file_max = LFS_FILE_MAX;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005cac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d906      	bls.n	8005cca <lfs_init+0x2fa>
 8005cbc:	4b26      	ldr	r3, [pc, #152]	; (8005d58 <lfs_init+0x388>)
 8005cbe:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <lfs_init+0x38c>)
 8005cc0:	f241 0172 	movw	r1, #4210	; 0x1072
 8005cc4:	4826      	ldr	r0, [pc, #152]	; (8005d60 <lfs_init+0x390>)
 8005cc6:	f005 f927 	bl	800af18 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <lfs_init+0x314>
        lfs->attr_max = LFS_ATTR_MAX;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005ce2:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d906      	bls.n	8005d02 <lfs_init+0x332>
 8005cf4:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <lfs_init+0x394>)
 8005cf6:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <lfs_init+0x38c>)
 8005cf8:	f241 0178 	movw	r1, #4216	; 0x1078
 8005cfc:	4818      	ldr	r0, [pc, #96]	; (8005d60 <lfs_init+0x390>)
 8005cfe:	f005 f90b 	bl	800af18 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	333c      	adds	r3, #60	; 0x3c
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	605a      	str	r2, [r3, #4]
 8005d28:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3330      	adds	r3, #48	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3348      	adds	r3, #72	; 0x48
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e003      	b.n	8005d4e <lfs_init+0x37e>

cleanup:
    lfs_deinit(lfs);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f80e 	bl	8005d68 <lfs_deinit>
    return err;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3730      	adds	r7, #48	; 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	0800c954 	.word	0x0800c954
 8005d5c:	0800cf44 	.word	0x0800cf44
 8005d60:	0800c3a4 	.word	0x0800c3a4
 8005d64:	0800c970 	.word	0x0800c970

08005d68 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fa fcd9 	bl	8000736 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fccf 	bl	8000736 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fa fcc5 	bl	8000736 <lfs_free>
    }

    return 0;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b0a0      	sub	sp, #128	; 0x80
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe01 	bl	80059d0 <lfs_init>
 8005dce:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <lfs_rawformat+0x22>
            return err;
 8005dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dd8:	e08d      	b.n	8005ef6 <lfs_rawformat+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <lfs_rawformat+0x38>
 8005de2:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <lfs_rawformat+0x148>)
 8005de4:	4a47      	ldr	r2, [pc, #284]	; (8005f04 <lfs_rawformat+0x14c>)
 8005de6:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8005dea:	4847      	ldr	r0, [pc, #284]	; (8005f08 <lfs_rawformat+0x150>)
 8005dec:	f005 f894 	bl	800af18 <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f005 f911 	bl	800b024 <memset>
        lfs->free.off = 0;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	00da      	lsls	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fa fbe2 	bl	80005e0 <lfs_min>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fb fbe7 	bl	80015fc <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fd fa8d 	bl	8003354 <lfs_dir_alloc>
 8005e3a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d150      	bne.n	8005ee4 <lfs_rawformat+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb fb7c 	bl	8001540 <lfs_fs_disk_version>
 8005e48:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8005e4a:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e50:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8005e52:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8005e58:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8005e5e:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8005e64:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8005e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fb fadb 	bl	800142c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005e76:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <lfs_rawformat+0x154>)
 8005e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <lfs_rawformat+0x158>)
 8005e80:	657b      	str	r3, [r7, #84]	; 0x54
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <lfs_rawformat+0x15c>)
 8005e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e86:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <lfs_rawformat+0x160>)
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e90:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005e94:	f107 010c 	add.w	r1, r7, #12
 8005e98:	2303      	movs	r3, #3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fe fc32 	bl	8004704 <lfs_dir_commit>
 8005ea0:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8005ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11f      	bne.n	8005ee8 <lfs_rawformat+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005eae:	f107 010c 	add.w	r1, r7, #12
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fe fc24 	bl	8004704 <lfs_dir_commit>
 8005ebc:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <lfs_rawformat+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec8:	2301      	movs	r3, #1
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
 8005ecc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc fe84 	bl	8002be4 <lfs_dir_fetch>
 8005edc:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	e004      	b.n	8005eee <lfs_rawformat+0x136>
            goto cleanup;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <lfs_rawformat+0x136>
            goto cleanup;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <lfs_rawformat+0x136>
            goto cleanup;
 8005eec:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff3a 	bl	8005d68 <lfs_deinit>
    return err;
 8005ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3780      	adds	r7, #128	; 0x80
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800c9a0 	.word	0x0800c9a0
 8005f04:	0800cf50 	.word	0x0800cf50
 8005f08:	0800c3a4 	.word	0x0800c3a4
 8005f0c:	40100000 	.word	0x40100000
 8005f10:	0ff00008 	.word	0x0ff00008
 8005f14:	0800c9b8 	.word	0x0800c9b8
 8005f18:	20100018 	.word	0x20100018

08005f1c <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1e:	b09f      	sub	sp, #124	; 0x7c
 8005f20:	af04      	add	r7, sp, #16
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fd51 	bl	80059d0 <lfs_init>
 8005f2e:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <lfs_rawmount+0x1e>
        return err;
 8005f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f38:	e1f1      	b.n	800631e <lfs_rawmount+0x402>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005f3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f3e:	2220      	movs	r2, #32
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f005 f86e 	bl	800b024 <memset>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005f4c:	4aa6      	ldr	r2, [pc, #664]	; (80061e8 <lfs_rawmount+0x2cc>)
 8005f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f56:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8005f62:	e188      	b.n	8006276 <lfs_rawmount+0x35a>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8005f64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa ffdb 	bl	8000f2c <lfs_pair_issync>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8005f7c:	4b9b      	ldr	r3, [pc, #620]	; (80061ec <lfs_rawmount+0x2d0>)
 8005f7e:	f241 02f2 	movw	r2, #4338	; 0x10f2
 8005f82:	499b      	ldr	r1, [pc, #620]	; (80061f0 <lfs_rawmount+0x2d4>)
 8005f84:	489b      	ldr	r0, [pc, #620]	; (80061f4 <lfs_rawmount+0x2d8>)
 8005f86:	f005 fbed 	bl	800b764 <iprintf>
            err = LFS_ERR_CORRUPT;
 8005f8a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005f8e:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8005f90:	e1c1      	b.n	8006316 <lfs_rawmount+0x3fa>
        }
        if (tortoise_i == tortoise_period) {
 8005f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d108      	bne.n	8005fac <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8005fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fae:	3301      	adds	r3, #1
 8005fb0:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	4b90      	ldr	r3, [pc, #576]	; (80061f8 <lfs_rawmount+0x2dc>)
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fba:	2308      	movs	r3, #8
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fc2:	f103 0218 	add.w	r2, r3, #24
 8005fc6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005fca:	f107 0320 	add.w	r3, r7, #32
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	4b8a      	ldr	r3, [pc, #552]	; (80061fc <lfs_rawmount+0x2e0>)
 8005fd2:	9302      	str	r3, [sp, #8]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	4b89      	ldr	r3, [pc, #548]	; (8006200 <lfs_rawmount+0x2e4>)
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4b89      	ldr	r3, [pc, #548]	; (8006204 <lfs_rawmount+0x2e8>)
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fc fa38 	bl	8002454 <lfs_dir_fetchmatch>
 8005fe4:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da02      	bge.n	8005ff2 <lfs_rawmount+0xd6>
            err = tag;
 8005fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fee:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8005ff0:	e191      	b.n	8006316 <lfs_rawmount+0x3fa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8131 	beq.w	800625c <lfs_rawmount+0x340>
 8005ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fb f804 	bl	800100a <lfs_tag_isdelete>
 8006002:	4603      	mov	r3, r0
 8006004:	f083 0301 	eor.w	r3, r3, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8126 	beq.w	800625c <lfs_rawmount+0x340>
            // update root
            lfs->root[0] = dir.pair[0];
 8006010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800601c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4b78      	ldr	r3, [pc, #480]	; (8006208 <lfs_rawmount+0x2ec>)
 8006028:	4a76      	ldr	r2, [pc, #472]	; (8006204 <lfs_rawmount+0x2e8>)
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fb fcb0 	bl	8001990 <lfs_dir_get>
 8006030:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006034:	2b00      	cmp	r3, #0
 8006036:	da02      	bge.n	800603e <lfs_rawmount+0x122>
                err = tag;
 8006038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800603a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800603c:	e16b      	b.n	8006316 <lfs_rawmount+0x3fa>
            }
            lfs_superblock_fromle32(&superblock);
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f7fb f9ba 	bl	80013bc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fb fa80 	bl	800155c <lfs_fs_disk_version_major>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fb fa85 	bl	8001578 <lfs_fs_disk_version_minor>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006076:	4293      	cmp	r3, r2
 8006078:	d91d      	bls.n	80060b6 <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 800607a:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 800607e:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fa6a 	bl	800155c <lfs_fs_disk_version_major>
 8006088:	4603      	mov	r3, r0
 800608a:	461e      	mov	r6, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fb fa73 	bl	8001578 <lfs_fs_disk_version_minor>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	4b55      	ldr	r3, [pc, #340]	; (80061ec <lfs_rawmount+0x2d0>)
 8006098:	9303      	str	r3, [sp, #12]
 800609a:	9202      	str	r2, [sp, #8]
 800609c:	9601      	str	r6, [sp, #4]
 800609e:	9400      	str	r4, [sp, #0]
 80060a0:	462b      	mov	r3, r5
 80060a2:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 80060a6:	4952      	ldr	r1, [pc, #328]	; (80061f0 <lfs_rawmount+0x2d4>)
 80060a8:	4858      	ldr	r0, [pc, #352]	; (800620c <lfs_rawmount+0x2f0>)
 80060aa:	f005 fb5b 	bl	800b764 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80060ae:	f06f 0315 	mvn.w	r3, #21
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80060b4:	e0d1      	b.n	800625a <lfs_rawmount+0x33e>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb fa5e 	bl	8001578 <lfs_fs_disk_version_minor>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d21d      	bcs.n	8006104 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 80060c8:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80060cc:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb fa43 	bl	800155c <lfs_fs_disk_version_major>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461e      	mov	r6, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fb fa4c 	bl	8001578 <lfs_fs_disk_version_minor>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	4b41      	ldr	r3, [pc, #260]	; (80061ec <lfs_rawmount+0x2d0>)
 80060e6:	9303      	str	r3, [sp, #12]
 80060e8:	9202      	str	r2, [sp, #8]
 80060ea:	9601      	str	r6, [sp, #4]
 80060ec:	9400      	str	r4, [sp, #0]
 80060ee:	462b      	mov	r3, r5
 80060f0:	f241 122e 	movw	r2, #4398	; 0x112e
 80060f4:	493e      	ldr	r1, [pc, #248]	; (80061f0 <lfs_rawmount+0x2d4>)
 80060f6:	4846      	ldr	r0, [pc, #280]	; (8006210 <lfs_rawmount+0x2f4>)
 80060f8:	f005 fb34 	bl	800b764 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 80060fc:	2101      	movs	r1, #1
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fbac 	bl	800685c <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	429a      	cmp	r2, r3
 8006112:	d910      	bls.n	8006136 <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4934      	ldr	r1, [pc, #208]	; (80061ec <lfs_rawmount+0x2d0>)
 800611c:	9101      	str	r1, [sp, #4]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	f241 123c 	movw	r2, #4412	; 0x113c
 8006126:	4932      	ldr	r1, [pc, #200]	; (80061f0 <lfs_rawmount+0x2d4>)
 8006128:	483a      	ldr	r0, [pc, #232]	; (8006214 <lfs_rawmount+0x2f8>)
 800612a:	f005 fb1b 	bl	800b764 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800612e:	f06f 0315 	mvn.w	r3, #21
 8006132:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006134:	e091      	b.n	800625a <lfs_rawmount+0x33e>
                }

                lfs->name_max = superblock.name_max;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d018      	beq.n	8006174 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	429a      	cmp	r2, r3
 800614a:	d910      	bls.n	800616e <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006152:	4926      	ldr	r1, [pc, #152]	; (80061ec <lfs_rawmount+0x2d0>)
 8006154:	9101      	str	r1, [sp, #4]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	f241 1247 	movw	r2, #4423	; 0x1147
 800615e:	4924      	ldr	r1, [pc, #144]	; (80061f0 <lfs_rawmount+0x2d4>)
 8006160:	482d      	ldr	r0, [pc, #180]	; (8006218 <lfs_rawmount+0x2fc>)
 8006162:	f005 faff 	bl	800b764 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006166:	f06f 0315 	mvn.w	r3, #21
 800616a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 800616c:	e075      	b.n	800625a <lfs_rawmount+0x33e>
                }

                lfs->file_max = superblock.file_max;
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006180:	429a      	cmp	r2, r3
 8006182:	d910      	bls.n	80061a6 <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800618a:	4918      	ldr	r1, [pc, #96]	; (80061ec <lfs_rawmount+0x2d0>)
 800618c:	9101      	str	r1, [sp, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	f241 1252 	movw	r2, #4434	; 0x1152
 8006196:	4916      	ldr	r1, [pc, #88]	; (80061f0 <lfs_rawmount+0x2d4>)
 8006198:	4820      	ldr	r0, [pc, #128]	; (800621c <lfs_rawmount+0x300>)
 800619a:	f005 fae3 	bl	800b764 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800619e:	f06f 0315 	mvn.w	r3, #21
 80061a2:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80061a4:	e059      	b.n	800625a <lfs_rawmount+0x33e>
                }

                lfs->attr_max = superblock.attr_max;
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d036      	beq.n	8006224 <lfs_rawmount+0x308>
                    && superblock.block_count != lfs->cfg->block_count) {
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d030      	beq.n	8006224 <lfs_rawmount+0x308>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	4908      	ldr	r1, [pc, #32]	; (80061ec <lfs_rawmount+0x2d0>)
 80061cc:	9101      	str	r1, [sp, #4]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	f241 125e 	movw	r2, #4446	; 0x115e
 80061d6:	4906      	ldr	r1, [pc, #24]	; (80061f0 <lfs_rawmount+0x2d4>)
 80061d8:	4811      	ldr	r0, [pc, #68]	; (8006220 <lfs_rawmount+0x304>)
 80061da:	f005 fac3 	bl	800b764 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80061de:	f06f 0315 	mvn.w	r3, #21
 80061e2:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80061e4:	e039      	b.n	800625a <lfs_rawmount+0x33e>
 80061e6:	bf00      	nop
 80061e8:	0800c4f0 	.word	0x0800c4f0
 80061ec:	0800c4ac 	.word	0x0800c4ac
 80061f0:	0800c3a4 	.word	0x0800c3a4
 80061f4:	0800c9c4 	.word	0x0800c9c4
 80061f8:	0800c9b8 	.word	0x0800c9b8
 80061fc:	08002c81 	.word	0x08002c81
 8006200:	0ff00008 	.word	0x0ff00008
 8006204:	7ffffc00 	.word	0x7ffffc00
 8006208:	20100018 	.word	0x20100018
 800620c:	0800c9f0 	.word	0x0800c9f0
 8006210:	0800ca28 	.word	0x0800ca28
 8006214:	0800ca68 	.word	0x0800ca68
 8006218:	0800ca9c 	.word	0x0800ca9c
 800621c:	0800cad0 	.word	0x0800cad0
 8006220:	0800cb04 	.word	0x0800cb04
            }

            lfs->block_count = superblock.block_count;
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	429a      	cmp	r2, r3
 8006234:	d012      	beq.n	800625c <lfs_rawmount+0x340>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	493a      	ldr	r1, [pc, #232]	; (8006328 <lfs_rawmount+0x40c>)
 8006240:	9101      	str	r1, [sp, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	f241 1267 	movw	r2, #4455	; 0x1167
 800624a:	4938      	ldr	r1, [pc, #224]	; (800632c <lfs_rawmount+0x410>)
 800624c:	4838      	ldr	r0, [pc, #224]	; (8006330 <lfs_rawmount+0x414>)
 800624e:	f005 fa89 	bl	800b764 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006252:	f06f 0315 	mvn.w	r3, #21
 8006256:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006258:	bf00      	nop
            goto cleanup;
 800625a:	e05c      	b.n	8006316 <lfs_rawmount+0x3fa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fc fcd7 	bl	8002c1c <lfs_dir_getgstate>
 800626e:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	2b00      	cmp	r3, #0
 8006274:	d14e      	bne.n	8006314 <lfs_rawmount+0x3f8>
    while (!lfs_pair_isnull(dir.tail)) {
 8006276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800627a:	3318      	adds	r3, #24
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa fe10 	bl	8000ea2 <lfs_pair_isnull>
 8006282:	4603      	mov	r3, r0
 8006284:	f083 0301 	eor.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	f47f ae6a 	bne.w	8005f64 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3330      	adds	r3, #48	; 0x30
 8006294:	4618      	mov	r0, r3
 8006296:	f7fa ff6b 	bl	8001170 <lfs_gstate_iszero>
 800629a:	4603      	mov	r3, r0
 800629c:	f083 0301 	eor.w	r3, r3, #1
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <lfs_rawmount+0x3ac>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062b2:	481d      	ldr	r0, [pc, #116]	; (8006328 <lfs_rawmount+0x40c>)
 80062b4:	9002      	str	r0, [sp, #8]
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	460b      	mov	r3, r1
 80062bc:	f241 1277 	movw	r2, #4471	; 0x1177
 80062c0:	491a      	ldr	r1, [pc, #104]	; (800632c <lfs_rawmount+0x410>)
 80062c2:	481c      	ldr	r0, [pc, #112]	; (8006334 <lfs_rawmount+0x418>)
 80062c4:	f005 fa4e 	bl	800b764 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fa fe8e 	bl	8000fee <lfs_tag_isvalid>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	3230      	adds	r2, #48	; 0x30
 80062ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80062f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006300:	fb02 f201 	mul.w	r2, r2, r1
 8006304:	1a9a      	subs	r2, r3, r2
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb f984 	bl	8001618 <lfs_alloc_drop>

    return 0;
 8006310:	2300      	movs	r3, #0
 8006312:	e004      	b.n	800631e <lfs_rawmount+0x402>
            goto cleanup;
 8006314:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f80e 	bl	8006338 <lfs_rawunmount>
    return err;
 800631c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800631e:	4618      	mov	r0, r3
 8006320:	376c      	adds	r7, #108	; 0x6c
 8006322:	46bd      	mov	sp, r7
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006326:	bf00      	nop
 8006328:	0800c4ac 	.word	0x0800c4ac
 800632c:	0800c3a4 	.word	0x0800c3a4
 8006330:	0800cb38 	.word	0x0800cb38
 8006334:	0800cb68 	.word	0x0800cb68

08006338 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff fd11 	bl	8005d68 <lfs_deinit>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b0a1      	sub	sp, #132	; 0x84
 8006354:	af04      	add	r7, sp, #16
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800635e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006362:	2220      	movs	r2, #32
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f004 fe5c 	bl	800b024 <memset>
 800636c:	2301      	movs	r3, #1
 800636e:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006370:	4a9b      	ldr	r2, [pc, #620]	; (80065e0 <lfs_fs_rawtraverse+0x290>)
 8006372:	f107 031c 	add.w	r3, r7, #28
 8006376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800637a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800637e:	2301      	movs	r3, #1
 8006380:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006382:	2301      	movs	r3, #1
 8006384:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8006386:	e0c1      	b.n	800650c <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006388:	f107 021c 	add.w	r2, r7, #28
 800638c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006390:	3318      	adds	r3, #24
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa fdc9 	bl	8000f2c <lfs_pair_issync>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 80063a0:	4b90      	ldr	r3, [pc, #576]	; (80065e4 <lfs_fs_rawtraverse+0x294>)
 80063a2:	f241 12d2 	movw	r2, #4562	; 0x11d2
 80063a6:	4990      	ldr	r1, [pc, #576]	; (80065e8 <lfs_fs_rawtraverse+0x298>)
 80063a8:	4890      	ldr	r0, [pc, #576]	; (80065ec <lfs_fs_rawtraverse+0x29c>)
 80063aa:	f005 f9db 	bl	800b764 <iprintf>
            return LFS_ERR_CORRUPT;
 80063ae:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80063b2:	e110      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 80063b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d108      	bne.n	80063ce <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80063c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	3301      	adds	r3, #1
 80063d2:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 80063d4:	2300      	movs	r3, #0
 80063d6:	667b      	str	r3, [r7, #100]	; 0x64
 80063d8:	e014      	b.n	8006404 <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 80063da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063dc:	3306      	adds	r3, #6
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80063e4:	4413      	add	r3, r2
 80063e6:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4611      	mov	r1, r2
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 80063f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <lfs_fs_rawtraverse+0xae>
                return err;
 80063fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fc:	e0eb      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 80063fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006400:	3301      	adds	r3, #1
 8006402:	667b      	str	r3, [r7, #100]	; 0x64
 8006404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006406:	2b01      	cmp	r3, #1
 8006408:	dde7      	ble.n	80063da <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	f103 0218 	add.w	r2, r3, #24
 8006412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7fc fbe3 	bl	8002be4 <lfs_dir_fetch>
 800641e:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <lfs_fs_rawtraverse+0xda>
            return err;
 8006426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006428:	e0d5      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800642a:	2300      	movs	r3, #0
 800642c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006430:	e067      	b.n	8006502 <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006432:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006436:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006444:	f107 0214 	add.w	r2, r7, #20
 8006448:	9200      	str	r2, [sp, #0]
 800644a:	4a69      	ldr	r2, [pc, #420]	; (80065f0 <lfs_fs_rawtraverse+0x2a0>)
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7fb fa9f 	bl	8001990 <lfs_dir_get>
 8006452:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	da05      	bge.n	8006466 <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	f113 0f02 	cmn.w	r3, #2
 8006460:	d049      	beq.n	80064f6 <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 8006462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006464:	e0b7      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8006466:	f107 0314 	add.w	r3, r7, #20
 800646a:	4618      	mov	r0, r3
 800646c:	f7fa ff76 	bl	800135c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006472:	4618      	mov	r0, r3
 8006474:	f7fa fdfc 	bl	8001070 <lfs_tag_type3>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	f240 2302 	movw	r3, #514	; 0x202
 8006480:	429a      	cmp	r2, r3
 8006482:	d113      	bne.n	80064ac <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	6978      	ldr	r0, [r7, #20]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	9201      	str	r2, [sp, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4603      	mov	r3, r0
 8006496:	460a      	mov	r2, r1
 8006498:	2100      	movs	r1, #0
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7fe fb02 	bl	8004aa4 <lfs_ctz_traverse>
 80064a0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d027      	beq.n	80064f8 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 80064a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064aa:	e094      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d022      	beq.n	80064f8 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80064b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fa fddb 	bl	8001070 <lfs_tag_type3>
 80064ba:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c0:	d11a      	bne.n	80064f8 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 80064c2:	2300      	movs	r3, #0
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c6:	e012      	b.n	80064ee <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 80064c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	f107 0214 	add.w	r2, r7, #20
 80064d0:	4413      	add	r3, r2
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4611      	mov	r1, r2
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
 80064dc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 80064de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <lfs_fs_rawtraverse+0x198>
                        return err;
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	e076      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 80064e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ea:	3301      	adds	r3, #1
 80064ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	dde9      	ble.n	80064c8 <lfs_fs_rawtraverse+0x178>
 80064f4:	e000      	b.n	80064f8 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 80064f6:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80064f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064fc:	3301      	adds	r3, #1
 80064fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006502:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006504:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006508:	429a      	cmp	r2, r3
 800650a:	d392      	bcc.n	8006432 <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 800650c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006510:	3318      	adds	r3, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fa fcc5 	bl	8000ea2 <lfs_pair_isnull>
 8006518:	4603      	mov	r3, r0
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	f47f af31 	bne.w	8006388 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	65bb      	str	r3, [r7, #88]	; 0x58
 800652c:	e04f      	b.n	80065ce <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800652e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006530:	799b      	ldrb	r3, [r3, #6]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d147      	bne.n	80065c6 <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01d      	beq.n	800657e <lfs_fs_rawtraverse+0x22e>
 8006542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d117      	bne.n	800657e <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800654e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006550:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006558:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800655a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	9202      	str	r2, [sp, #8]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	4623      	mov	r3, r4
 800656a:	4602      	mov	r2, r0
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7fe fa99 	bl	8004aa4 <lfs_ctz_traverse>
 8006572:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <lfs_fs_rawtraverse+0x22e>
                return err;
 800657a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657c:	e02b      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800657e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01e      	beq.n	80065c8 <lfs_fs_rawtraverse+0x278>
 800658a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d118      	bne.n	80065c8 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006598:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80065a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4623      	mov	r3, r4
 80065b2:	4602      	mov	r2, r0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7fe fa75 	bl	8004aa4 <lfs_ctz_traverse>
 80065ba:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 80065bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <lfs_fs_rawtraverse+0x278>
                return err;
 80065c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c4:	e007      	b.n	80065d6 <lfs_fs_rawtraverse+0x286>
            continue;
 80065c6:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80065c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1ac      	bne.n	800652e <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3774      	adds	r7, #116	; 0x74
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	0800c4f0 	.word	0x0800c4f0
 80065e4:	0800c4ac 	.word	0x0800c4ac
 80065e8:	0800c3a4 	.word	0x0800c3a4
 80065ec:	0800c9c4 	.word	0x0800c9c4
 80065f0:	700ffc00 	.word	0x700ffc00

080065f4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800660c:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <lfs_fs_pred+0xd0>)
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006616:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800661a:	2301      	movs	r3, #1
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 800661e:	2301      	movs	r3, #1
 8006620:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006622:	e03e      	b.n	80066a2 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3318      	adds	r3, #24
 8006628:	f107 0214 	add.w	r2, r7, #20
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f7fa fc7c 	bl	8000f2c <lfs_pair_issync>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <lfs_fs_pred+0xd4>)
 800663c:	f241 2230 	movw	r2, #4656	; 0x1230
 8006640:	4922      	ldr	r1, [pc, #136]	; (80066cc <lfs_fs_pred+0xd8>)
 8006642:	4823      	ldr	r0, [pc, #140]	; (80066d0 <lfs_fs_pred+0xdc>)
 8006644:	f005 f88e 	bl	800b764 <iprintf>
            return LFS_ERR_CORRUPT;
 8006648:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800664c:	e036      	b.n	80066bc <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	429a      	cmp	r2, r3
 8006654:	d10a      	bne.n	800666c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	3301      	adds	r3, #1
 8006670:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3318      	adds	r3, #24
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	4618      	mov	r0, r3
 800667a:	f7fa fc2d 	bl	8000ed8 <lfs_pair_cmp>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <lfs_fs_pred+0x94>
            return 0;
 8006684:	2300      	movs	r3, #0
 8006686:	e019      	b.n	80066bc <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3318      	adds	r3, #24
 800668c:	461a      	mov	r2, r3
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7fc faa7 	bl	8002be4 <lfs_dir_fetch>
 8006696:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <lfs_fs_pred+0xae>
            return err;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	e00c      	b.n	80066bc <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3318      	adds	r3, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fa fbfb 	bl	8000ea2 <lfs_pair_isnull>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1b5      	bne.n	8006624 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80066b8:	f06f 0301 	mvn.w	r3, #1
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	; 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	0800c4f0 	.word	0x0800c4f0
 80066c8:	0800c4ac 	.word	0x0800c4ac
 80066cc:	0800c3a4 	.word	0x0800c3a4
 80066d0:	0800c9c4 	.word	0x0800c9c4

080066d4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80066d4:	b5b0      	push	{r4, r5, r7, lr}
 80066d6:	b08e      	sub	sp, #56	; 0x38
 80066d8:	af04      	add	r7, sp, #16
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80066f4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80066fa:	69dd      	ldr	r5, [r3, #28]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	2108      	movs	r1, #8
 8006706:	9103      	str	r1, [sp, #12]
 8006708:	f107 0110 	add.w	r1, r7, #16
 800670c:	9102      	str	r1, [sp, #8]
 800670e:	9201      	str	r2, [sp, #4]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	462b      	mov	r3, r5
 8006714:	4622      	mov	r2, r4
 8006716:	4601      	mov	r1, r0
 8006718:	6a38      	ldr	r0, [r7, #32]
 800671a:	f7fa f83d 	bl	8000798 <lfs_bd_read>
 800671e:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <lfs_fs_parent_match+0x56>
        return err;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	e012      	b.n	8006750 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4618      	mov	r0, r3
 8006730:	f7fa fc29 	bl	8000f86 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7fa fbca 	bl	8000ed8 <lfs_pair_cmp>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	bf14      	ite	ne
 800674a:	2301      	movne	r3, #1
 800674c:	2300      	moveq	r3, #0
 800674e:	b2db      	uxtb	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3728      	adds	r7, #40	; 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bdb0      	pop	{r4, r5, r7, pc}

08006758 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b090      	sub	sp, #64	; 0x40
 800675c:	af04      	add	r7, sp, #16
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006770:	4a33      	ldr	r2, [pc, #204]	; (8006840 <lfs_fs_parent+0xe8>)
 8006772:	f107 031c 	add.w	r3, r7, #28
 8006776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800677a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800677e:	2301      	movs	r3, #1
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006782:	2301      	movs	r3, #1
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006786:	e049      	b.n	800681c <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3318      	adds	r3, #24
 800678c:	f107 021c 	add.w	r2, r7, #28
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f7fa fbca 	bl	8000f2c <lfs_pair_issync>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <lfs_fs_parent+0xec>)
 80067a0:	f241 2271 	movw	r2, #4721	; 0x1271
 80067a4:	4928      	ldr	r1, [pc, #160]	; (8006848 <lfs_fs_parent+0xf0>)
 80067a6:	4829      	ldr	r0, [pc, #164]	; (800684c <lfs_fs_parent+0xf4>)
 80067a8:	f004 ffdc 	bl	800b764 <iprintf>
            return LFS_ERR_CORRUPT;
 80067ac:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80067b0:	e041      	b.n	8006836 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 80067b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d10a      	bne.n	80067d0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	3301      	adds	r3, #1
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80067ec:	f107 0310 	add.w	r3, r7, #16
 80067f0:	9303      	str	r3, [sp, #12]
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <lfs_fs_parent+0xf8>)
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	4b16      	ldr	r3, [pc, #88]	; (8006854 <lfs_fs_parent+0xfc>)
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	4b16      	ldr	r3, [pc, #88]	; (8006858 <lfs_fs_parent+0x100>)
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7fb fe26 	bl	8002454 <lfs_dir_fetchmatch>
 8006808:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <lfs_fs_parent+0xc4>
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	f113 0f02 	cmn.w	r3, #2
 8006816:	d001      	beq.n	800681c <lfs_fs_parent+0xc4>
            return tag;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	e00c      	b.n	8006836 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3318      	adds	r3, #24
 8006820:	4618      	mov	r0, r3
 8006822:	f7fa fb3e 	bl	8000ea2 <lfs_pair_isnull>
 8006826:	4603      	mov	r3, r0
 8006828:	f083 0301 	eor.w	r3, r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1aa      	bne.n	8006788 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006832:	f06f 0301 	mvn.w	r3, #1
}
 8006836:	4618      	mov	r0, r3
 8006838:	3730      	adds	r7, #48	; 0x30
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	0800c4f0 	.word	0x0800c4f0
 8006844:	0800c4ac 	.word	0x0800c4ac
 8006848:	0800c3a4 	.word	0x0800c3a4
 800684c:	0800c9c4 	.word	0x0800c9c4
 8006850:	080066d5 	.word	0x080066d5
 8006854:	20000008 	.word	0x20000008
 8006858:	7ff003ff 	.word	0x7ff003ff

0800685c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	025b      	lsls	r3, r3, #9
 8006874:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4618      	mov	r0, r3
 800689a:	f7fa fc23 	bl	80010e4 <lfs_tag_size>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <lfs_fs_preporphans+0x32>
 80068a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da06      	bge.n	80068ba <lfs_fs_preporphans+0x32>
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <lfs_fs_preporphans+0x90>)
 80068ae:	4a1b      	ldr	r2, [pc, #108]	; (800691c <lfs_fs_preporphans+0x94>)
 80068b0:	f241 2192 	movw	r1, #4754	; 0x1292
 80068b4:	481a      	ldr	r0, [pc, #104]	; (8006920 <lfs_fs_preporphans+0x98>)
 80068b6:	f004 fb2f 	bl	800af18 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fa fc10 	bl	80010e4 <lfs_tag_size>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80068ca:	d90a      	bls.n	80068e2 <lfs_fs_preporphans+0x5a>
 80068cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dd06      	ble.n	80068e2 <lfs_fs_preporphans+0x5a>
 80068d4:	4b13      	ldr	r3, [pc, #76]	; (8006924 <lfs_fs_preporphans+0x9c>)
 80068d6:	4a11      	ldr	r2, [pc, #68]	; (800691c <lfs_fs_preporphans+0x94>)
 80068d8:	f241 2193 	movw	r1, #4755	; 0x1293
 80068dc:	4810      	ldr	r0, [pc, #64]	; (8006920 <lfs_fs_preporphans+0x98>)
 80068de:	f004 fb1b 	bl	800af18 <__assert_func>
    lfs->gstate.tag += orphans;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068ea:	441a      	add	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3330      	adds	r3, #48	; 0x30
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fa fc54 	bl	80011aa <lfs_gstate_hasorphans>
 8006902:	4603      	mov	r3, r0
 8006904:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006906:	ea44 0203 	orr.w	r2, r4, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bd90      	pop	{r4, r7, pc}
 8006918:	0800cba0 	.word	0x0800cba0
 800691c:	0800cf60 	.word	0x0800cf60
 8006920:	0800c3a4 	.word	0x0800c3a4
 8006924:	0800cbd8 	.word	0x0800cbd8

08006928 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <lfs_fs_prepmove+0x70>)
 800693c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800693e:	897b      	ldrh	r3, [r7, #10]
 8006940:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006944:	428b      	cmp	r3, r1
 8006946:	d006      	beq.n	8006956 <lfs_fs_prepmove+0x2e>
 8006948:	897b      	ldrh	r3, [r7, #10]
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006950:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006954:	e000      	b.n	8006958 <lfs_fs_prepmove+0x30>
 8006956:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006964:	4293      	cmp	r3, r2
 8006966:	d002      	beq.n	800696e <lfs_fs_prepmove+0x46>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	e000      	b.n	8006970 <lfs_fs_prepmove+0x48>
 800696e:	2300      	movs	r3, #0
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006974:	897b      	ldrh	r3, [r7, #10]
 8006976:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <lfs_fs_prepmove+0x5e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	e000      	b.n	8006988 <lfs_fs_prepmove+0x60>
 8006986:	2300      	movs	r3, #0
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	800003ff 	.word	0x800003ff

0800699c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b098      	sub	sp, #96	; 0x60
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3330      	adds	r3, #48	; 0x30
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fa fc33 	bl	8001214 <lfs_gstate_needssuperblock>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f083 0301 	eor.w	r3, r3, #1
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <lfs_fs_desuperblock+0x22>
        return 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e04e      	b.n	8006a5c <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	4927      	ldr	r1, [pc, #156]	; (8006a64 <lfs_fs_desuperblock+0xc8>)
 80069c8:	9101      	str	r1, [sp, #4]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	f241 22ac 	movw	r2, #4780	; 0x12ac
 80069d2:	4925      	ldr	r1, [pc, #148]	; (8006a68 <lfs_fs_desuperblock+0xcc>)
 80069d4:	4825      	ldr	r0, [pc, #148]	; (8006a6c <lfs_fs_desuperblock+0xd0>)
 80069d6:	f004 fec5 	bl	800b764 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 0220 	add.w	r2, r3, #32
 80069e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fc f8fc 	bl	8002be4 <lfs_dir_fetch>
 80069ec:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 80069ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <lfs_fs_desuperblock+0x5c>
        return err;
 80069f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f6:	e031      	b.n	8006a5c <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fa fda1 	bl	8001540 <lfs_fs_disk_version>
 80069fe:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006a00:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a06:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006a08:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006a22:	f107 031c 	add.w	r3, r7, #28
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fa fd00 	bl	800142c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <lfs_fs_desuperblock+0xd4>)
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	f107 031c 	add.w	r3, r7, #28
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	f107 0214 	add.w	r2, r7, #20
 8006a3a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006a3e:	2301      	movs	r3, #1
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fd fe5f 	bl	8004704 <lfs_dir_commit>
 8006a46:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <lfs_fs_desuperblock+0xb6>
        return err;
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a50:	e004      	b.n	8006a5c <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006a52:	2100      	movs	r1, #0
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff01 	bl	800685c <lfs_fs_prepsuperblock>
    return 0;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3758      	adds	r7, #88	; 0x58
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	0800c4ac 	.word	0x0800c4ac
 8006a68:	0800c3a4 	.word	0x0800c3a4
 8006a6c:	0800cc10 	.word	0x0800cc10
 8006a70:	20100018 	.word	0x20100018

08006a74 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006a74:	b5b0      	push	{r4, r5, r7, lr}
 8006a76:	b094      	sub	sp, #80	; 0x50
 8006a78:	af04      	add	r7, sp, #16
 8006a7a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	333c      	adds	r3, #60	; 0x3c
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fa fbb4 	bl	80011ee <lfs_gstate_hasmove>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f083 0301 	eor.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <lfs_fs_demove+0x22>
        return 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e05b      	b.n	8006b4e <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fa fb0e 	bl	80010c4 <lfs_tag_id>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <lfs_fs_demove+0xe4>)
 8006aae:	9302      	str	r3, [sp, #8]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9400      	str	r4, [sp, #0]
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f241 22d4 	movw	r2, #4820	; 0x12d4
 8006aba:	4928      	ldr	r1, [pc, #160]	; (8006b5c <lfs_fs_demove+0xe8>)
 8006abc:	4828      	ldr	r0, [pc, #160]	; (8006b60 <lfs_fs_demove+0xec>)
 8006abe:	f004 fe51 	bl	800b764 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fa fad2 	bl	8001070 <lfs_tag_type3>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d006      	beq.n	8006ae6 <lfs_fs_demove+0x72>
 8006ad8:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <lfs_fs_demove+0xf0>)
 8006ada:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <lfs_fs_demove+0xf4>)
 8006adc:	f241 21db 	movw	r1, #4827	; 0x12db
 8006ae0:	481e      	ldr	r0, [pc, #120]	; (8006b5c <lfs_fs_demove+0xe8>)
 8006ae2:	f004 fa19 	bl	800af18 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006aec:	f107 0318 	add.w	r3, r7, #24
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fc f876 	bl	8002be4 <lfs_dir_fetch>
 8006af8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <lfs_fs_demove+0x90>
        return err;
 8006b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b02:	e024      	b.n	8006b4e <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fa fadb 	bl	80010c4 <lfs_tag_id>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006b12:	2200      	movs	r2, #0
 8006b14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff05 	bl	8006928 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006b26:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f107 0210 	add.w	r2, r7, #16
 8006b34:	f107 0118 	add.w	r1, r7, #24
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fd fde2 	bl	8004704 <lfs_dir_commit>
 8006b40:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <lfs_fs_demove+0xd8>
        return err;
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	e000      	b.n	8006b4e <lfs_fs_demove+0xda>
    }

    return 0;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3740      	adds	r7, #64	; 0x40
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bdb0      	pop	{r4, r5, r7, pc}
 8006b56:	bf00      	nop
 8006b58:	0800c4ac 	.word	0x0800c4ac
 8006b5c:	0800c3a4 	.word	0x0800c3a4
 8006b60:	0800cc44 	.word	0x0800cc44
 8006b64:	0800cc78 	.word	0x0800cc78
 8006b68:	0800cf74 	.word	0x0800cf74

08006b6c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006b6c:	b5b0      	push	{r4, r5, r7, lr}
 8006b6e:	b0b2      	sub	sp, #200	; 0xc8
 8006b70:	af04      	add	r7, sp, #16
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3330      	adds	r3, #48	; 0x30
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fa fb14 	bl	80011aa <lfs_gstate_hasorphans>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f083 0301 	eor.w	r3, r3, #1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <lfs_fs_deorphan+0x26>
        return 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e187      	b.n	8006ea2 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006b98:	e170      	b.n	8006e7c <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006b9a:	f107 0308 	add.w	r3, r7, #8
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f004 fa3e 	bl	800b024 <memset>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	2301      	movs	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006bb6:	e149      	b.n	8006e4c <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	f103 0218 	add.w	r2, r3, #24
 8006bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fc f80c 	bl	8002be4 <lfs_dir_fetch>
 8006bcc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8006bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <lfs_fs_deorphan+0x72>
                return err;
 8006bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bdc:	e161      	b.n	8006ea2 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8126 	beq.w	8006e38 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006bec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fdad 	bl	8006758 <lfs_fs_parent>
 8006bfe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da07      	bge.n	8006c1a <lfs_fs_deorphan+0xae>
 8006c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c0e:	f113 0f02 	cmn.w	r3, #2
 8006c12:	d002      	beq.n	8006c1a <lfs_fs_deorphan+0xae>
                    return tag;
 8006c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c18:	e143      	b.n	8006ea2 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 80ac 	bne.w	8006d7c <lfs_fs_deorphan+0x210>
 8006c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c28:	f113 0f02 	cmn.w	r3, #2
 8006c2c:	f000 80a6 	beq.w	8006d7c <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006c30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c34:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006c38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	4a9a      	ldr	r2, [pc, #616]	; (8006eac <lfs_fs_deorphan+0x340>)
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fa fea4 	bl	8001990 <lfs_dir_get>
 8006c48:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da02      	bge.n	8006c5a <lfs_fs_deorphan+0xee>
                        return state;
 8006c54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c58:	e0eb      	b.n	8006e32 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006c5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fa f991 	bl	8000f86 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	f103 0218 	add.w	r2, r3, #24
 8006c6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fa f95a 	bl	8000f2c <lfs_pair_issync>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f083 0301 	eor.w	r3, r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d07b      	beq.n	8006d7c <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006c84:	6a38      	ldr	r0, [r7, #32]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006c8c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006c90:	4c87      	ldr	r4, [pc, #540]	; (8006eb0 <lfs_fs_deorphan+0x344>)
 8006c92:	9403      	str	r4, [sp, #12]
 8006c94:	9102      	str	r1, [sp, #8]
 8006c96:	9201      	str	r2, [sp, #4]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f241 3221 	movw	r2, #4897	; 0x1321
 8006ca0:	4984      	ldr	r1, [pc, #528]	; (8006eb4 <lfs_fs_deorphan+0x348>)
 8006ca2:	4885      	ldr	r0, [pc, #532]	; (8006eb8 <lfs_fs_deorphan+0x34c>)
 8006ca4:	f004 fd5e 	bl	800b764 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006ca8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006cac:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3330      	adds	r3, #48	; 0x30
 8006cb4:	f107 0208 	add.w	r2, r7, #8
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fa fabe 	bl	800123c <lfs_gstate_hasmovehere>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01c      	beq.n	8006d00 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fa f9fa 	bl	80010c4 <lfs_tag_id>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006cde:	4874      	ldr	r0, [pc, #464]	; (8006eb0 <lfs_fs_deorphan+0x344>)
 8006ce0:	9002      	str	r0, [sp, #8]
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	f241 322c 	movw	r2, #4908	; 0x132c
 8006cec:	4971      	ldr	r1, [pc, #452]	; (8006eb4 <lfs_fs_deorphan+0x348>)
 8006cee:	4873      	ldr	r0, [pc, #460]	; (8006ebc <lfs_fs_deorphan+0x350>)
 8006cf0:	f004 fd38 	bl	800b764 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff fe14 	bl	8006928 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006d00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fa f958 	bl	8000fba <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006d0a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006d0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <lfs_fs_deorphan+0x1ba>
 8006d16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006d20:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006d24:	e000      	b.n	8006d28 <lfs_fs_deorphan+0x1bc>
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d32:	4b63      	ldr	r3, [pc, #396]	; (8006ec0 <lfs_fs_deorphan+0x354>)
 8006d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d40:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	2302      	movs	r3, #2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fd f9e0 	bl	8004110 <lfs_dir_orphaningcommit>
 8006d50:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006d54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fa f914 	bl	8000f86 <lfs_pair_fromle32>
                        if (state < 0) {
 8006d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da02      	bge.n	8006d6c <lfs_fs_deorphan+0x200>
                            return state;
 8006d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006d6a:	e062      	b.n	8006e32 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d16b      	bne.n	8006e4c <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006d7a:	e067      	b.n	8006e4c <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8006d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d159      	bne.n	8006e38 <lfs_fs_deorphan+0x2cc>
 8006d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d88:	f113 0f02 	cmn.w	r3, #2
 8006d8c:	d154      	bne.n	8006e38 <lfs_fs_deorphan+0x2cc>
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d051      	beq.n	8006e38 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006d94:	6a3a      	ldr	r2, [r7, #32]
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	4945      	ldr	r1, [pc, #276]	; (8006eb0 <lfs_fs_deorphan+0x344>)
 8006d9a:	9101      	str	r1, [sp, #4]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	f241 324c 	movw	r2, #4940	; 0x134c
 8006da4:	4943      	ldr	r1, [pc, #268]	; (8006eb4 <lfs_fs_deorphan+0x348>)
 8006da6:	4847      	ldr	r0, [pc, #284]	; (8006ec4 <lfs_fs_deorphan+0x358>)
 8006da8:	f004 fcdc 	bl	800b764 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fb ff2f 	bl	8002c1c <lfs_dir_getgstate>
 8006dbe:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8006dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <lfs_fs_deorphan+0x264>
                        return err;
 8006dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dce:	e030      	b.n	8006e32 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fa f8ef 	bl	8000fba <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006de0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006de4:	051a      	lsls	r2, r3, #20
 8006de6:	4b38      	ldr	r3, [pc, #224]	; (8006ec8 <lfs_fs_deorphan+0x35c>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	673b      	str	r3, [r7, #112]	; 0x70
 8006dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df0:	3318      	adds	r3, #24
 8006df2:	677b      	str	r3, [r7, #116]	; 0x74
 8006df4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fd f986 	bl	8004110 <lfs_dir_orphaningcommit>
 8006e04:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fa f8b9 	bl	8000f86 <lfs_pair_fromle32>
                    if (state < 0) {
 8006e14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	da02      	bge.n	8006e22 <lfs_fs_deorphan+0x2b6>
                        return state;
 8006e1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8006e20:	e03f      	b.n	8006ea2 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d104      	bne.n	8006e34 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006e30:	e00c      	b.n	8006e4c <lfs_fs_deorphan+0x2e0>
                return err;
 8006e32:	e036      	b.n	8006ea2 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8006e34:	bf00      	nop
 8006e36:	e009      	b.n	8006e4c <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8006e38:	f107 0408 	add.w	r4, r7, #8
 8006e3c:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8006e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	3318      	adds	r3, #24
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fa f825 	bl	8000ea2 <lfs_pair_isnull>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f083 0301 	eor.w	r3, r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f47f aea9 	bne.w	8006bb8 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8006e66:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <lfs_fs_deorphan+0x306>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e002      	b.n	8006e78 <lfs_fs_deorphan+0x30c>
 8006e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e76:	3301      	adds	r3, #1
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	f77f ae8a 	ble.w	8006b9a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3330      	adds	r3, #48	; 0x30
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa f9a0 	bl	80011d0 <lfs_gstate_getorphans>
 8006e90:	4603      	mov	r3, r0
 8006e92:	425b      	negs	r3, r3
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fcf4 	bl	8006888 <lfs_fs_preporphans>
 8006ea0:	4603      	mov	r3, r0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	37b8      	adds	r7, #184	; 0xb8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	7ffffc00 	.word	0x7ffffc00
 8006eb0:	0800c4ac 	.word	0x0800c4ac
 8006eb4:	0800c3a4 	.word	0x0800c3a4
 8006eb8:	0800ccac 	.word	0x0800ccac
 8006ebc:	0800ccf0 	.word	0x0800ccf0
 8006ec0:	600ffc08 	.word	0x600ffc08
 8006ec4:	0800cd38 	.word	0x0800cd38
 8006ec8:	000ffc08 	.word	0x000ffc08

08006ecc <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fd61 	bl	800699c <lfs_fs_desuperblock>
 8006eda:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <lfs_fs_forceconsistency+0x1a>
        return err;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	e013      	b.n	8006f0e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fdc4 	bl	8006a74 <lfs_fs_demove>
 8006eec:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <lfs_fs_forceconsistency+0x2c>
        return err;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	e00a      	b.n	8006f0e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006ef8:	2101      	movs	r1, #1
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fe36 	bl	8006b6c <lfs_fs_deorphan>
 8006f00:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <lfs_fs_forceconsistency+0x40>
        return err;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e000      	b.n	8006f0e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]
    return 0;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006f48:	f107 0208 	add.w	r2, r7, #8
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4907      	ldr	r1, [pc, #28]	; (8006f6c <lfs_fs_rawsize+0x30>)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff f9fd 	bl	8006350 <lfs_fs_rawtraverse>
 8006f56:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <lfs_fs_rawsize+0x26>
        return err;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	e000      	b.n	8006f64 <lfs_fs_rawsize+0x28>
    }

    return size;
 8006f62:	68bb      	ldr	r3, [r7, #8]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	08006f17 	.word	0x08006f17

08006f70 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <lfs_format+0x18>
        return err;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	e005      	b.n	8006f94 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fe ff14 	bl	8005db8 <lfs_rawformat>
 8006f90:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <lfs_mount+0x18>
        return err;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e005      	b.n	8006fc0 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fe ffb0 	bl	8005f1c <lfs_rawmount>
 8006fbc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
    if (err) {
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <lfs_file_open+0x1c>
        return err;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	e01a      	b.n	800701a <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fa fa56 	bl	800149c <lfs_mlist_isopen>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f083 0301 	eor.w	r3, r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <lfs_file_open+0x42>
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <lfs_file_open+0x5c>)
 8006ffe:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <lfs_file_open+0x60>)
 8007000:	f241 712a 	movw	r1, #5930	; 0x172a
 8007004:	4809      	ldr	r0, [pc, #36]	; (800702c <lfs_file_open+0x64>)
 8007006:	f003 ff87 	bl	800af18 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7fd ff95 	bl	8004f40 <lfs_file_rawopen>
 8007016:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007018:	697b      	ldr	r3, [r7, #20]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800cd88 	.word	0x0800cd88
 8007028:	0800cf84 	.word	0x0800cf84
 800702c:	0800c3a4 	.word	0x0800c3a4

08007030 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <lfs_file_close+0x18>
        return err;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	e015      	b.n	8007074 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fa fa24 	bl	800149c <lfs_mlist_isopen>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <lfs_file_close+0x38>
 800705a:	4b08      	ldr	r3, [pc, #32]	; (800707c <lfs_file_close+0x4c>)
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <lfs_file_close+0x50>)
 800705e:	f241 714e 	movw	r1, #5966	; 0x174e
 8007062:	4808      	ldr	r0, [pc, #32]	; (8007084 <lfs_file_close+0x54>)
 8007064:	f003 ff58 	bl	800af18 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fd ff80 	bl	8004f70 <lfs_file_rawclose>
 8007070:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	0800cdc0 	.word	0x0800cdc0
 8007080:	0800cf94 	.word	0x0800cf94
 8007084:	0800c3a4 	.word	0x0800c3a4

08007088 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
    if (err) {
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <lfs_file_read+0x1c>
        return err;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	e017      	b.n	80070d4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fa f9f6 	bl	800149c <lfs_mlist_isopen>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <lfs_file_read+0x3c>
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <lfs_file_read+0x54>)
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <lfs_file_read+0x58>)
 80070ba:	f241 7170 	movw	r1, #6000	; 0x1770
 80070be:	4809      	ldr	r0, [pc, #36]	; (80070e4 <lfs_file_read+0x5c>)
 80070c0:	f003 ff2a 	bl	800af18 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7fe fa9c 	bl	8005608 <lfs_file_rawread>
 80070d0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80070d2:	693b      	ldr	r3, [r7, #16]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	0800cdc0 	.word	0x0800cdc0
 80070e0:	0800cfa4 	.word	0x0800cfa4
 80070e4:	0800c3a4 	.word	0x0800c3a4

080070e8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
    if (err) {
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <lfs_file_write+0x1c>
        return err;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	e017      	b.n	8007134 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa f9c6 	bl	800149c <lfs_mlist_isopen>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <lfs_file_write+0x3c>
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <lfs_file_write+0x54>)
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <lfs_file_write+0x58>)
 800711a:	f241 7182 	movw	r1, #6018	; 0x1782
 800711e:	4809      	ldr	r0, [pc, #36]	; (8007144 <lfs_file_write+0x5c>)
 8007120:	f003 fefa 	bl	800af18 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7fe fbcc 	bl	80058c8 <lfs_file_rawwrite>
 8007130:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007132:	693b      	ldr	r3, [r7, #16]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	0800cdc0 	.word	0x0800cdc0
 8007140:	0800cfb4 	.word	0x0800cfb4
 8007144:	0800c3a4 	.word	0x0800c3a4

08007148 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e024      	b.n	80071a8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	091a      	lsrs	r2, r3, #4
 8007162:	6939      	ldr	r1, [r7, #16]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	440b      	add	r3, r1
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	404b      	eors	r3, r1
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	4912      	ldr	r1, [pc, #72]	; (80071c0 <lfs_crc+0x78>)
 8007176:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800717a:	4053      	eors	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	091a      	lsrs	r2, r3, #4
 8007182:	6939      	ldr	r1, [r7, #16]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	440b      	add	r3, r1
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	091b      	lsrs	r3, r3, #4
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	404b      	eors	r3, r1
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	4909      	ldr	r1, [pc, #36]	; (80071c0 <lfs_crc+0x78>)
 800719a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800719e:	4053      	eors	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	3301      	adds	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d3d6      	bcc.n	800715e <lfs_crc+0x16>
    }

    return crc;
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	0800cfc4 	.word	0x0800cfc4

080071c4 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
//	}
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	HAL_TIM_Base_Start(&htim2);
//	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
//	HAL_TIM_Base_Stop(&htim2);
	HAL_Delay(1000);
 80071cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071d0:	f001 fa26 	bl	8008620 <HAL_Delay>
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <nor_cs_assert>:

void nor_cs_assert(){
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80071e0:	2200      	movs	r2, #0
 80071e2:	2108      	movs	r1, #8
 80071e4:	4802      	ldr	r0, [pc, #8]	; (80071f0 <nor_cs_assert+0x14>)
 80071e6:	f002 f809 	bl	80091fc <HAL_GPIO_WritePin>
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40020c00 	.word	0x40020c00

080071f4 <nor_cs_deassert>:

void nor_cs_deassert(){
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80071f8:	2201      	movs	r2, #1
 80071fa:	2108      	movs	r1, #8
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <nor_cs_deassert+0x14>)
 80071fe:	f001 fffd 	bl	80091fc <HAL_GPIO_WritePin>
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40020c00 	.word	0x40020c00

0800720c <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <nor_spi_tx+0x28>)
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, pData, Size, 1000);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	b29a      	uxth	r2, r3
 8007220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4804      	ldr	r0, [pc, #16]	; (8007238 <nor_spi_tx+0x2c>)
 8007228:	f002 fd23 	bl	8009c72 <HAL_SPI_Transmit>
//	while (DmaEnd == 0);
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000094 	.word	0x20000094
 8007238:	20000188 	.word	0x20000188

0800723c <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Receive(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <nor_spi_rx+0x28>)
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, pData, Size, 1000);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4804      	ldr	r0, [pc, #16]	; (8007268 <nor_spi_rx+0x2c>)
 8007258:	f002 fe47 	bl	8009eea <HAL_SPI_Receive>
//	DmaEnd =0;
//	while (DmaEnd == 0);
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000094 	.word	0x20000094
 8007268:	20000188 	.word	0x20000188

0800726c <__init_nor>:

void __init_nor(){
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <__init_nor+0x38>)
 8007272:	4a0d      	ldr	r2, [pc, #52]	; (80072a8 <__init_nor+0x3c>)
 8007274:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <__init_nor+0x38>)
 8007278:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <__init_nor+0x40>)
 800727a:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <__init_nor+0x38>)
 800727e:	4a0c      	ldr	r2, [pc, #48]	; (80072b0 <__init_nor+0x44>)
 8007280:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <__init_nor+0x38>)
 8007284:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <__init_nor+0x48>)
 8007286:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <__init_nor+0x38>)
 800728a:	4a0b      	ldr	r2, [pc, #44]	; (80072b8 <__init_nor+0x4c>)
 800728c:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 800728e:	4805      	ldr	r0, [pc, #20]	; (80072a4 <__init_nor+0x38>)
 8007290:	f000 fbdb 	bl	8007a4a <NOR_Init>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <__init_nor+0x32>
		Error_Handler();
 800729a:	f000 faa9 	bl	80077f0 <Error_Handler>
	}
}
 800729e:	bf00      	nop
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000240 	.word	0x20000240
 80072a8:	080071dd 	.word	0x080071dd
 80072ac:	080071f5 	.word	0x080071f5
 80072b0:	080071c5 	.word	0x080071c5
 80072b4:	0800723d 	.word	0x0800723d
 80072b8:	0800720d 	.word	0x0800720d

080072bc <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	4806      	ldr	r0, [pc, #24]	; (80072f0 <_fs_read+0x34>)
 80072d6:	f000 fe0b 	bl	8007ef0 <NOR_ReadSector>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <_fs_read+0x28>
		return 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e001      	b.n	80072e8 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 80072e4:	f06f 0304 	mvn.w	r3, #4
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000240 	.word	0x20000240

080072f4 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4806      	ldr	r0, [pc, #24]	; (8007328 <_fs_write+0x34>)
 800730e:	f000 fd49 	bl	8007da4 <NOR_WriteSector>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <_fs_write+0x28>
		return 0;
 8007318:	2300      	movs	r3, #0
 800731a:	e001      	b.n	8007320 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 800731c:	f06f 0304 	mvn.w	r3, #4
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000240 	.word	0x20000240

0800732c <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	4806      	ldr	r0, [pc, #24]	; (8007354 <_fs_erase+0x28>)
 800733a:	f000 fc9f 	bl	8007c7c <NOR_EraseSector>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <_fs_erase+0x1c>
		return 0;
 8007344:	2300      	movs	r3, #0
 8007346:	e001      	b.n	800734c <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 8007348:	f06f 0304 	mvn.w	r3, #4
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000240 	.word	0x20000240

08007358 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	return 0;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <__init_littefs>:

void __init_littefs(){
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
	static struct lfs_config LfsConfig = {0};
	int Error;

	LfsConfig.read_size = 64;
 8007376:	4b20      	ldr	r3, [pc, #128]	; (80073f8 <__init_littefs+0x88>)
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	615a      	str	r2, [r3, #20]
	LfsConfig.prog_size = 64;
 800737c:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <__init_littefs+0x88>)
 800737e:	2240      	movs	r2, #64	; 0x40
 8007380:	619a      	str	r2, [r3, #24]
	LfsConfig.block_size = Nor.info.u16SectorSize;
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <__init_littefs+0x8c>)
 8007384:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007386:	461a      	mov	r2, r3
 8007388:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <__init_littefs+0x88>)
 800738a:	61da      	str	r2, [r3, #28]
	LfsConfig.block_count = Nor.info.u32SectorCount;
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <__init_littefs+0x8c>)
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <__init_littefs+0x88>)
 8007392:	6213      	str	r3, [r2, #32]
	LfsConfig.cache_size = Nor.info.u16PageSize;
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <__init_littefs+0x8c>)
 8007396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007398:	461a      	mov	r2, r3
 800739a:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <__init_littefs+0x88>)
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
	LfsConfig.lookahead_size = 8;//Nor.info.u32SectorCount/8;
 800739e:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <__init_littefs+0x88>)
 80073a0:	2208      	movs	r2, #8
 80073a2:	62da      	str	r2, [r3, #44]	; 0x2c
	LfsConfig.block_cycles = 15000;
 80073a4:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <__init_littefs+0x88>)
 80073a6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24

	LfsConfig.read = _fs_read;
 80073ac:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <__init_littefs+0x88>)
 80073ae:	4a14      	ldr	r2, [pc, #80]	; (8007400 <__init_littefs+0x90>)
 80073b0:	605a      	str	r2, [r3, #4]
	LfsConfig.prog = _fs_write;
 80073b2:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <__init_littefs+0x88>)
 80073b4:	4a13      	ldr	r2, [pc, #76]	; (8007404 <__init_littefs+0x94>)
 80073b6:	609a      	str	r2, [r3, #8]
	LfsConfig.erase = _fs_erase;
 80073b8:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <__init_littefs+0x88>)
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <__init_littefs+0x98>)
 80073bc:	60da      	str	r2, [r3, #12]
	LfsConfig.sync = _fs_sync;
 80073be:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <__init_littefs+0x88>)
 80073c0:	4a12      	ldr	r2, [pc, #72]	; (800740c <__init_littefs+0x9c>)
 80073c2:	611a      	str	r2, [r3, #16]

	Error = lfs_mount(&Lfs, &LfsConfig);
 80073c4:	490c      	ldr	r1, [pc, #48]	; (80073f8 <__init_littefs+0x88>)
 80073c6:	4812      	ldr	r0, [pc, #72]	; (8007410 <__init_littefs+0xa0>)
 80073c8:	f7ff fde8 	bl	8006f9c <lfs_mount>
 80073cc:	6078      	str	r0, [r7, #4]
	if (Error != LFS_ERR_OK){
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <__init_littefs+0x80>
		lfs_format(&Lfs, &LfsConfig);
 80073d4:	4908      	ldr	r1, [pc, #32]	; (80073f8 <__init_littefs+0x88>)
 80073d6:	480e      	ldr	r0, [pc, #56]	; (8007410 <__init_littefs+0xa0>)
 80073d8:	f7ff fdca 	bl	8006f70 <lfs_format>
		Error = lfs_mount(&Lfs, &LfsConfig);
 80073dc:	4906      	ldr	r1, [pc, #24]	; (80073f8 <__init_littefs+0x88>)
 80073de:	480c      	ldr	r0, [pc, #48]	; (8007410 <__init_littefs+0xa0>)
 80073e0:	f7ff fddc 	bl	8006f9c <lfs_mount>
 80073e4:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <__init_littefs+0x80>
			Error_Handler();
 80073ec:	f000 fa00 	bl	80077f0 <Error_Handler>
		}
	}
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000098 	.word	0x20000098
 80073fc:	20000240 	.word	0x20000240
 8007400:	080072bd 	.word	0x080072bd
 8007404:	080072f5 	.word	0x080072f5
 8007408:	0800732d 	.word	0x0800732d
 800740c:	08007359 	.word	0x08007359
 8007410:	20000290 	.word	0x20000290

08007414 <__init_storage>:

void __init_storage(){
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
	__init_nor();
 8007418:	f7ff ff28 	bl	800726c <__init_nor>
	__init_littefs();
 800741c:	f7ff ffa8 	bl	8007370 <__init_littefs>
}
 8007420:	bf00      	nop
 8007422:	bd80      	pop	{r7, pc}

08007424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007428:	f001 f888 	bl	800853c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800742c:	f000 f86e 	bl	800750c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007430:	f000 f964 	bl	80076fc <MX_GPIO_Init>
  MX_SPI3_Init();
 8007434:	f000 f8da 	bl	80075ec <MX_SPI3_Init>
  MX_DMA_Init();
 8007438:	f000 f938 	bl	80076ac <MX_DMA_Init>
  MX_UART7_Init();
 800743c:	f000 f90c 	bl	8007658 <MX_UART7_Init>
	//	  Sector_Erase_4B(&hspi3, add, 64);
	//	  add+=65536;
	//  }

	  // myprintf("Starting LittleFS application........\n");
    HAL_Delay(100);
 8007440:	2064      	movs	r0, #100	; 0x64
 8007442:	f001 f8ed 	bl	8008620 <HAL_Delay>

  HAL_UART_Transmit(&huart7,"EPDM is starting *********\n", sizeof("EPDM is starting *********\n"),1000);
 8007446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800744a:	221c      	movs	r2, #28
 800744c:	4926      	ldr	r1, [pc, #152]	; (80074e8 <main+0xc4>)
 800744e:	4827      	ldr	r0, [pc, #156]	; (80074ec <main+0xc8>)
 8007450:	f003 fa99 	bl	800a986 <HAL_UART_Transmit>


  __init_storage();
 8007454:	f7ff ffde 	bl	8007414 <__init_storage>
   lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDWR | LFS_O_CREAT);
 8007458:	f240 1303 	movw	r3, #259	; 0x103
 800745c:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <main+0xcc>)
 800745e:	4925      	ldr	r1, [pc, #148]	; (80074f4 <main+0xd0>)
 8007460:	4825      	ldr	r0, [pc, #148]	; (80074f8 <main+0xd4>)
 8007462:	f7ff fdb1 	bl	8006fc8 <lfs_file_open>
   lfs_file_read(&Lfs, &File, &Counter, sizeof(app_count_t));
 8007466:	2308      	movs	r3, #8
 8007468:	4a24      	ldr	r2, [pc, #144]	; (80074fc <main+0xd8>)
 800746a:	4922      	ldr	r1, [pc, #136]	; (80074f4 <main+0xd0>)
 800746c:	4822      	ldr	r0, [pc, #136]	; (80074f8 <main+0xd4>)
 800746e:	f7ff fe0b 	bl	8007088 <lfs_file_read>
   lfs_file_close(&Lfs, &File);
 8007472:	4920      	ldr	r1, [pc, #128]	; (80074f4 <main+0xd0>)
 8007474:	4820      	ldr	r0, [pc, #128]	; (80074f8 <main+0xd4>)
 8007476:	f7ff fddb 	bl	8007030 <lfs_file_close>

   Counter.bootCount += 1;
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <main+0xd8>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	3301      	adds	r3, #1
 8007480:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <main+0xd8>)
 8007482:	6053      	str	r3, [r2, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <main+0xd8>)
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <main+0xd8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	491c      	ldr	r1, [pc, #112]	; (8007500 <main+0xdc>)
 800748e:	481d      	ldr	r0, [pc, #116]	; (8007504 <main+0xe0>)
 8007490:	f004 f990 	bl	800b7b4 <siprintf>
	  HAL_UART_Transmit(&huart7,Text, sizeof(Text),1000);
 8007494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007498:	2214      	movs	r2, #20
 800749a:	491a      	ldr	r1, [pc, #104]	; (8007504 <main+0xe0>)
 800749c:	4813      	ldr	r0, [pc, #76]	; (80074ec <main+0xc8>)
 800749e:	f003 fa72 	bl	800a986 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart7,"*******\n", sizeof("*******\n"),1000);
 80074a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a6:	2209      	movs	r2, #9
 80074a8:	4917      	ldr	r1, [pc, #92]	; (8007508 <main+0xe4>)
 80074aa:	4810      	ldr	r0, [pc, #64]	; (80074ec <main+0xc8>)
 80074ac:	f003 fa6b 	bl	800a986 <HAL_UART_Transmit>

		  lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDWR | LFS_O_CREAT);
 80074b0:	f240 1303 	movw	r3, #259	; 0x103
 80074b4:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <main+0xcc>)
 80074b6:	490f      	ldr	r1, [pc, #60]	; (80074f4 <main+0xd0>)
 80074b8:	480f      	ldr	r0, [pc, #60]	; (80074f8 <main+0xd4>)
 80074ba:	f7ff fd85 	bl	8006fc8 <lfs_file_open>
		  lfs_file_write(&Lfs, &File, &Counter, sizeof(app_count_t));
 80074be:	2308      	movs	r3, #8
 80074c0:	4a0e      	ldr	r2, [pc, #56]	; (80074fc <main+0xd8>)
 80074c2:	490c      	ldr	r1, [pc, #48]	; (80074f4 <main+0xd0>)
 80074c4:	480c      	ldr	r0, [pc, #48]	; (80074f8 <main+0xd4>)
 80074c6:	f7ff fe0f 	bl	80070e8 <lfs_file_write>
		  lfs_file_close(&Lfs, &File);
 80074ca:	490a      	ldr	r1, [pc, #40]	; (80074f4 <main+0xd0>)
 80074cc:	480a      	ldr	r0, [pc, #40]	; (80074f8 <main+0xd4>)
 80074ce:	f7ff fdaf 	bl	8007030 <lfs_file_close>

//		  while ((HAL_GetTick() - HalTickAux) < 1000);
		  HAL_Delay(1000);
 80074d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074d6:	f001 f8a3 	bl	8008620 <HAL_Delay>

		  Counter.secCount += 1;
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <main+0xd8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	4a06      	ldr	r2, [pc, #24]	; (80074fc <main+0xd8>)
 80074e2:	6013      	str	r3, [r2, #0]
  { sprintf(Text, "Bt %lu |Ct %lu\n", Counter.bootCount, Counter.secCount);
 80074e4:	e7ce      	b.n	8007484 <main+0x60>
 80074e6:	bf00      	nop
 80074e8:	0800ce30 	.word	0x0800ce30
 80074ec:	200000f0 	.word	0x200000f0
 80074f0:	0800ce4c 	.word	0x0800ce4c
 80074f4:	20000134 	.word	0x20000134
 80074f8:	20000290 	.word	0x20000290
 80074fc:	2000008c 	.word	0x2000008c
 8007500:	0800ce58 	.word	0x0800ce58
 8007504:	2000036c 	.word	0x2000036c
 8007508:	0800ce68 	.word	0x0800ce68

0800750c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b094      	sub	sp, #80	; 0x50
 8007510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007512:	f107 0320 	add.w	r3, r7, #32
 8007516:	2230      	movs	r2, #48	; 0x30
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f003 fd82 	bl	800b024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007520:	f107 030c 	add.w	r3, r7, #12
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	60da      	str	r2, [r3, #12]
 800752e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <SystemClock_Config+0xd8>)
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <SystemClock_Config+0xd8>)
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753e:	6413      	str	r3, [r2, #64]	; 0x40
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <SystemClock_Config+0xd8>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800754c:	2300      	movs	r3, #0
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <SystemClock_Config+0xdc>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <SystemClock_Config+0xdc>)
 8007556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <SystemClock_Config+0xdc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007568:	2301      	movs	r3, #1
 800756a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800756c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007572:	2302      	movs	r3, #2
 8007574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800757c:	230f      	movs	r3, #15
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8007580:	23d8      	movs	r3, #216	; 0xd8
 8007582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007584:	2302      	movs	r3, #2
 8007586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007588:	2304      	movs	r3, #4
 800758a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800758c:	f107 0320 	add.w	r3, r7, #32
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fe9d 	bl	80092d0 <HAL_RCC_OscConfig>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800759c:	f000 f928 	bl	80077f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80075a0:	f001 fe46 	bl	8009230 <HAL_PWREx_EnableOverDrive>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80075aa:	f000 f921 	bl	80077f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075ae:	230f      	movs	r3, #15
 80075b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075b2:	2302      	movs	r3, #2
 80075b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80075ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80075be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80075c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	2105      	movs	r1, #5
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 f8f7 	bl	80097c0 <HAL_RCC_ClockConfig>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80075d8:	f000 f90a 	bl	80077f0 <Error_Handler>
  }
}
 80075dc:	bf00      	nop
 80075de:	3750      	adds	r7, #80	; 0x50
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40023800 	.word	0x40023800
 80075e8:	40007000 	.word	0x40007000

080075ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <MX_SPI3_Init+0x64>)
 80075f2:	4a18      	ldr	r2, [pc, #96]	; (8007654 <MX_SPI3_Init+0x68>)
 80075f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80075f6:	4b16      	ldr	r3, [pc, #88]	; (8007650 <MX_SPI3_Init+0x64>)
 80075f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80075fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <MX_SPI3_Init+0x64>)
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <MX_SPI3_Init+0x64>)
 8007606:	2200      	movs	r2, #0
 8007608:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <MX_SPI3_Init+0x64>)
 800760c:	2200      	movs	r2, #0
 800760e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <MX_SPI3_Init+0x64>)
 8007612:	2200      	movs	r2, #0
 8007614:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007616:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <MX_SPI3_Init+0x64>)
 8007618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800761c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <MX_SPI3_Init+0x64>)
 8007620:	2208      	movs	r2, #8
 8007622:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <MX_SPI3_Init+0x64>)
 8007626:	2200      	movs	r2, #0
 8007628:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <MX_SPI3_Init+0x64>)
 800762c:	2200      	movs	r2, #0
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <MX_SPI3_Init+0x64>)
 8007632:	2200      	movs	r2, #0
 8007634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <MX_SPI3_Init+0x64>)
 8007638:	220a      	movs	r2, #10
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800763c:	4804      	ldr	r0, [pc, #16]	; (8007650 <MX_SPI3_Init+0x64>)
 800763e:	f002 fa8f 	bl	8009b60 <HAL_SPI_Init>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007648:	f000 f8d2 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800764c:	bf00      	nop
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000188 	.word	0x20000188
 8007654:	40003c00 	.word	0x40003c00

08007658 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800765c:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <MX_UART7_Init+0x4c>)
 800765e:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <MX_UART7_Init+0x50>)
 8007660:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8007662:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <MX_UART7_Init+0x4c>)
 8007664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007668:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <MX_UART7_Init+0x4c>)
 800766c:	2200      	movs	r2, #0
 800766e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <MX_UART7_Init+0x4c>)
 8007672:	2200      	movs	r2, #0
 8007674:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <MX_UART7_Init+0x4c>)
 8007678:	2200      	movs	r2, #0
 800767a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <MX_UART7_Init+0x4c>)
 800767e:	220c      	movs	r2, #12
 8007680:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <MX_UART7_Init+0x4c>)
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <MX_UART7_Init+0x4c>)
 800768a:	2200      	movs	r2, #0
 800768c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800768e:	4805      	ldr	r0, [pc, #20]	; (80076a4 <MX_UART7_Init+0x4c>)
 8007690:	f003 f92c 	bl	800a8ec <HAL_UART_Init>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800769a:	f000 f8a9 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800769e:	bf00      	nop
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200000f0 	.word	0x200000f0
 80076a8:	40007800 	.word	0x40007800

080076ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <MX_DMA_Init+0x4c>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <MX_DMA_Init+0x4c>)
 80076bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076c0:	6313      	str	r3, [r2, #48]	; 0x30
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <MX_DMA_Init+0x4c>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	200b      	movs	r0, #11
 80076d4:	f001 f8a3 	bl	800881e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80076d8:	200b      	movs	r0, #11
 80076da:	f001 f8bc 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	2010      	movs	r0, #16
 80076e4:	f001 f89b 	bl	800881e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80076e8:	2010      	movs	r0, #16
 80076ea:	f001 f8b4 	bl	8008856 <HAL_NVIC_EnableIRQ>

}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	; 0x30
 8007700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007702:	f107 031c 	add.w	r3, r7, #28
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	609a      	str	r2, [r3, #8]
 800770e:	60da      	str	r2, [r3, #12]
 8007710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007712:	2300      	movs	r3, #0
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	4b34      	ldr	r3, [pc, #208]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	4a33      	ldr	r2, [pc, #204]	; (80077e8 <MX_GPIO_Init+0xec>)
 800771c:	f043 0302 	orr.w	r3, r3, #2
 8007720:	6313      	str	r3, [r2, #48]	; 0x30
 8007722:	4b31      	ldr	r3, [pc, #196]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	4b2d      	ldr	r3, [pc, #180]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4a2c      	ldr	r2, [pc, #176]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007738:	f043 0308 	orr.w	r3, r3, #8
 800773c:	6313      	str	r3, [r2, #48]	; 0x30
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007754:	f043 0304 	orr.w	r3, r3, #4
 8007758:	6313      	str	r3, [r2, #48]	; 0x30
 800775a:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <MX_GPIO_Init+0xec>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <MX_GPIO_Init+0xec>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007782:	2300      	movs	r3, #0
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <MX_GPIO_Init+0xec>)
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	6313      	str	r3, [r2, #48]	; 0x30
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <MX_GPIO_Init+0xec>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	60bb      	str	r3, [r7, #8]
 800779c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <MX_GPIO_Init+0xec>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	4a10      	ldr	r2, [pc, #64]	; (80077e8 <MX_GPIO_Init+0xec>)
 80077a8:	f043 0310 	orr.w	r3, r3, #16
 80077ac:	6313      	str	r3, [r2, #48]	; 0x30
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <MX_GPIO_Init+0xec>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2108      	movs	r1, #8
 80077be:	480b      	ldr	r0, [pc, #44]	; (80077ec <MX_GPIO_Init+0xf0>)
 80077c0:	f001 fd1c 	bl	80091fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80077c4:	2308      	movs	r3, #8
 80077c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c8:	2301      	movs	r3, #1
 80077ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077d4:	f107 031c 	add.w	r3, r7, #28
 80077d8:	4619      	mov	r1, r3
 80077da:	4804      	ldr	r0, [pc, #16]	; (80077ec <MX_GPIO_Init+0xf0>)
 80077dc:	f001 fb62 	bl	8008ea4 <HAL_GPIO_Init>

}
 80077e0:	bf00      	nop
 80077e2:	3730      	adds	r7, #48	; 0x30
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40020c00 	.word	0x40020c00

080077f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80077f4:	b672      	cpsid	i
}
 80077f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077f8:	e7fe      	b.n	80077f8 <Error_Handler+0x8>

080077fa <_nor_cs_assert>:
	_SELECT_SR3,
};

/* Functions */

static void _nor_cs_assert(nor_t *nor){
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	4798      	blx	r3
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	68b8      	ldr	r0, [r7, #8]
 8007858:	4798      	blx	r3
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	6838      	ldr	r0, [r7, #0]
 8007872:	4798      	blx	r3
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8007884:	239e      	movs	r3, #158	; 0x9e
 8007886:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ffb4 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8007892:	f107 030f 	add.w	r3, r7, #15
 8007896:	2201      	movs	r2, #1
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ffc3 	bl	8007826 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 80078a0:	f107 0308 	add.w	r3, r7, #8
 80078a4:	2203      	movs	r2, #3
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ffcb 	bl	8007844 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ffae 	bl	8007810 <_nor_cs_deassert>

	return ID;
 80078b4:	68bb      	ldr	r3, [r7, #8]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 80078c6:	234b      	movs	r3, #75	; 0x4b
 80078c8:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff8c 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 80078e2:	f107 031f 	add.w	r3, r7, #31
 80078e6:	2201      	movs	r2, #1
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff ff9b 	bl	8007826 <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	2204      	movs	r2, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff94 	bl	8007826 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	2208      	movs	r2, #8
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ff9c 	bl	8007844 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff7f 	bl	8007810 <_nor_cs_deassert>

	return UniqueId;
 8007912:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 8007928:	2306      	movs	r3, #6
 800792a:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff64 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8007932:	f107 030f 	add.w	r3, r7, #15
 8007936:	2201      	movs	r2, #1
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ff73 	bl	8007826 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff65 	bl	8007810 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 800795a:	2300      	movs	r3, #0
 800795c:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d012      	beq.n	800798a <_nor_ReadStatusRegister+0x3c>
 8007964:	2b02      	cmp	r3, #2
 8007966:	dc16      	bgt.n	8007996 <_nor_ReadStatusRegister+0x48>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <_nor_ReadStatusRegister+0x24>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d006      	beq.n	800797e <_nor_ReadStatusRegister+0x30>
 8007970:	e011      	b.n	8007996 <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8007972:	2305      	movs	r3, #5
 8007974:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3342      	adds	r3, #66	; 0x42
 800797a:	60fb      	str	r3, [r7, #12]
		break;
 800797c:	e00d      	b.n	800799a <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 800797e:	2370      	movs	r3, #112	; 0x70
 8007980:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3342      	adds	r3, #66	; 0x42
 8007986:	60fb      	str	r3, [r7, #12]
		break;
 8007988:	e007      	b.n	800799a <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 800798a:	2315      	movs	r3, #21
 800798c:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3342      	adds	r3, #66	; 0x42
 8007992:	60fb      	str	r3, [r7, #12]
		break;
 8007994:	e001      	b.n	800799a <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	e017      	b.n	80079ca <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff ff2d 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 80079a0:	f107 030a 	add.w	r3, r7, #10
 80079a4:	2201      	movs	r2, #1
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff3c 	bl	8007826 <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 80079ae:	f107 030b 	add.w	r3, r7, #11
 80079b2:	2201      	movs	r2, #1
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff ff44 	bl	8007844 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff27 	bl	8007810 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 80079c2:	7afa      	ldrb	r2, [r7, #11]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	701a      	strb	r2, [r3, #0]

	return status;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 80079dc:	2305      	movs	r3, #5
 80079de:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff04 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 80079f2:	f107 030f 	add.w	r3, r7, #15
 80079f6:	2201      	movs	r2, #1
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff ff13 	bl	8007826 <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3342      	adds	r3, #66	; 0x42
 8007a04:	2201      	movs	r2, #1
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff1b 	bl	8007844 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8007a0e:	2164      	movs	r1, #100	; 0x64
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ff26 	bl	8007862 <_nor_delay_us>
		msTimeout -= 100;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	3b64      	subs	r3, #100	; 0x64
 8007a1a:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <_nor_WaitForWriteEnd+0x5e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e7      	bne.n	8007a00 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff feed 	bl	8007810 <_nor_cs_deassert>

	if (msTimeout == 0){
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8007a52:	23ab      	movs	r3, #171	; 0xab
 8007a54:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d013      	beq.n	8007a84 <NOR_Init+0x3a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8007a84:	2302      	movs	r3, #2
 8007a86:	e09a      	b.n	8007bbe <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a8e:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e091      	b.n	8007bbe <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff feb8 	bl	8007810 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8007aa0:	2164      	movs	r1, #100	; 0x64
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fedd 	bl	8007862 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fe9e 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 8007abe:	f107 030f 	add.w	r3, r7, #15
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fead 	bl	8007826 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fe9f 	bl	8007810 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fed2 	bl	800787c <_nor_ReadID>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <NOR_Init+0xa8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d101      	bne.n	8007af6 <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e063      	b.n	8007bbe <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa30 	bl	8007f60 <NOR_IDS_Interpret_Manufacturer>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fa32 	bl	8007f78 <NOR_IDS_Interpret_Model>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d101      	bne.n	8007b30 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	e046      	b.n	8007bbe <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fec4 	bl	80078be <_nor_ReadUniqID>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fa3b 	bl	8007fc0 <NOR_IDS_GetQtdBlocks>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	63da      	str	r2, [r3, #60]	; 0x3c

	nor->info.u16PageSize = NOR_PAGE_SIZE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b56:	851a      	strh	r2, [r3, #40]	; 0x28
	nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b5e:	861a      	strh	r2, [r3, #48]	; 0x30
	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	011a      	lsls	r2, r3, #4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	635a      	str	r2, [r3, #52]	; 0x34
	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c
	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007b92:	fb02 f203 	mul.w	r2, r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fed6 	bl	800794e <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fed2 	bl	800794e <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fece 	bl	800794e <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d KB\n", (uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <NOR_EraseAddress+0x18>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e043      	b.n	8007c68 <NOR_EraseAddress+0xa0>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007be6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d001      	beq.n	8007bf2 <NOR_EraseAddress+0x2a>
 8007bee:	2306      	movs	r3, #6
 8007bf0:	e03a      	b.n	8007c68 <NOR_EraseAddress+0xa0>

	switch (method){
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d010      	beq.n	8007c1a <NOR_EraseAddress+0x52>
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	dc13      	bgt.n	8007c24 <NOR_EraseAddress+0x5c>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <NOR_EraseAddress+0x3e>
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d005      	beq.n	8007c10 <NOR_EraseAddress+0x48>
 8007c04:	e00e      	b.n	8007c24 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8007c06:	2320      	movs	r3, #32
 8007c08:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <NOR_EraseAddress+0xa8>)
 8007c0c:	61fb      	str	r3, [r7, #28]
		break;
 8007c0e:	e009      	b.n	8007c24 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8007c10:	2352      	movs	r3, #82	; 0x52
 8007c12:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8007c14:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <NOR_EraseAddress+0xac>)
 8007c16:	61fb      	str	r3, [r7, #28]
		break;
 8007c18:	e004      	b.n	8007c24 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 8007c1a:	23d8      	movs	r3, #216	; 0xd8
 8007c1c:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <NOR_EraseAddress+0xb0>)
 8007c20:	61fb      	str	r3, [r7, #28]
		break;
 8007c22:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fe70 	bl	8007920 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fdda 	bl	80077fa <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fde9 	bl	8007826 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fddb 	bl	8007810 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 8007c5a:	69f9      	ldr	r1, [r7, #28]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff feb8 	bl	80079d2 <_nor_WaitForWriteEnd>
 8007c62:	4603      	mov	r3, r0
 8007c64:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8007c66:	7efb      	ldrb	r3, [r7, #27]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	00061a80 	.word	0x00061a80
 8007c74:	00186a00 	.word	0x00186a00
 8007c78:	001e8480 	.word	0x001e8480

08007c7c <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <NOR_EraseSector+0x14>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e015      	b.n	8007cbc <NOR_EraseSector+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c96:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d001      	beq.n	8007ca2 <NOR_EraseSector+0x26>
 8007c9e:	2306      	movs	r3, #6
 8007ca0:	e00c      	b.n	8007cbc <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	fb02 f303 	mul.w	r3, r2, r3
 8007cae:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff ff87 	bl	8007bc8 <NOR_EraseAddress>
 8007cba:	4603      	mov	r3, r0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <NOR_WriteBytes+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e05f      	b.n	8007d9c <NOR_WriteBytes+0xd8>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ce2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d001      	beq.n	8007cee <NOR_WriteBytes+0x2a>
 8007cea:	2306      	movs	r3, #6
 8007cec:	e056      	b.n	8007d9c <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e051      	b.n	8007d9c <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e002      	b.n	8007d04 <NOR_WriteBytes+0x40>
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	3301      	adds	r3, #1
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d3f8      	bcc.n	8007cfe <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d18:	fb02 f201 	mul.w	r2, r2, r1
 8007d1c:	1a9a      	subs	r2, r3, r2
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	4413      	add	r3, r2
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d903      	bls.n	8007d32 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	e001      	b.n	8007d36 <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fdf2 	bl	8007920 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0a1b      	lsrs	r3, r3, #8
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fd4f 	bl	80077fa <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 8007d5c:	f107 0314 	add.w	r3, r7, #20
 8007d60:	2204      	movs	r2, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fd5e 	bl	8007826 <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fd59 	bl	8007826 <_nor_spi_tx>
		_nor_cs_deassert(nor);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff fd4b 	bl	8007810 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 8007d7a:	f242 7110 	movw	r1, #10000	; 0x2710
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fe27 	bl	80079d2 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1b8      	bne.n	8007d0c <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <NOR_WriteSector+0x18>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e027      	b.n	8007e0c <NOR_WriteSector+0x68>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007dc2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00a      	beq.n	8007de0 <NOR_WriteSector+0x3c>
 8007dca:	2306      	movs	r3, #6
 8007dcc:	e01e      	b.n	8007e0c <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007dd8:	461a      	mov	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007de4:	461a      	mov	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d2f0      	bcs.n	8007dce <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007df0:	461a      	mov	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	fb03 f302 	mul.w	r3, r3, r2
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff ff5d 	bl	8007cc4 <NOR_WriteBytes>
 8007e0a:	4603      	mov	r3, r0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <NOR_ReadBytes+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e05d      	b.n	8007ee8 <NOR_ReadBytes+0xd4>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e32:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d001      	beq.n	8007e3e <NOR_ReadBytes+0x2a>
 8007e3a:	2306      	movs	r3, #6
 8007e3c:	e054      	b.n	8007ee8 <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 8007e44:	2302      	movs	r3, #2
 8007e46:	e04f      	b.n	8007ee8 <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	461a      	mov	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e5c:	fb02 f201 	mul.w	r2, r2, r1
 8007e60:	1a9a      	subs	r2, r3, r2
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d903      	bls.n	8007e76 <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	e001      	b.n	8007e7a <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 8007e7a:	230b      	movs	r3, #11
 8007e7c:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 8007e94:	2300      	movs	r3, #0
 8007e96:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fcae 	bl	80077fa <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8007e9e:	f107 0310 	add.w	r3, r7, #16
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff fcbd 	bl	8007826 <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff fcc7 	bl	8007844 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fcaa 	bl	8007810 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1be      	bne.n	8007e50 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	e002      	b.n	8007ede <NOR_ReadBytes+0xca>
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	3301      	adds	r3, #1
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	6a3a      	ldr	r2, [r7, #32]
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d3f8      	bcc.n	8007ed8 <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("w25qxx ReadBytes done.\n");

	return NOR_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3728      	adds	r7, #40	; 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <NOR_ReadSector+0x18>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e027      	b.n	8007f58 <NOR_ReadSector+0x68>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f0e:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00a      	beq.n	8007f2c <NOR_ReadSector+0x3c>
 8007f16:	2306      	movs	r3, #6
 8007f18:	e01e      	b.n	8007f58 <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007f24:	461a      	mov	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007f30:	461a      	mov	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d2f0      	bcs.n	8007f1a <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	fb03 f302 	mul.w	r3, r3, r2
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	4413      	add	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff ff5f 	bl	8007e14 <NOR_ReadBytes>
 8007f56:	4603      	mov	r3, r0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: pablo-jean
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ffed 	bl	8007f60 <NOR_IDS_Interpret_Manufacturer>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2bef      	cmp	r3, #239	; 0xef
 8007f8e:	d00e      	beq.n	8007fae <NOR_IDS_Interpret_Model+0x36>
 8007f90:	2bef      	cmp	r3, #239	; 0xef
 8007f92:	dc03      	bgt.n	8007f9c <NOR_IDS_Interpret_Model+0x24>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d00e      	beq.n	8007fb6 <NOR_IDS_Interpret_Model+0x3e>
 8007f98:	2bc2      	cmp	r3, #194	; 0xc2
 8007f9a:	d002      	beq.n	8007fa2 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 8007f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fa0:	e00a      	b.n	8007fb8 <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	e004      	b.n	8007fb8 <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	0a1b      	lsrs	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	e000      	b.n	8007fb8 <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL: return MANUF_MT25QL; break;
 8007fb6:	2320      	movs	r3, #32
	}
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ffc9 	bl	8007f60 <NOR_IDS_Interpret_Manufacturer>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2bef      	cmp	r3, #239	; 0xef
 8007fd6:	d008      	beq.n	8007fea <NOR_IDS_GetQtdBlocks+0x2a>
 8007fd8:	2bef      	cmp	r3, #239	; 0xef
 8007fda:	dc03      	bgt.n	8007fe4 <NOR_IDS_GetQtdBlocks+0x24>
 8007fdc:	2b85      	cmp	r3, #133	; 0x85
 8007fde:	d004      	beq.n	8007fea <NOR_IDS_GetQtdBlocks+0x2a>
 8007fe0:	2bc2      	cmp	r3, #194	; 0xc2
 8007fe2:	d002      	beq.n	8007fea <NOR_IDS_GetQtdBlocks+0x2a>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		blocks = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]
		break;
 8007fe8:	e015      	b.n	8008016 <NOR_IDS_GetQtdBlocks+0x56>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	3b11      	subs	r3, #17
 8007ff4:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]
 8007ffe:	e005      	b.n	800800c <NOR_IDS_GetQtdBlocks+0x4c>
			blocks *= 2;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	3301      	adds	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]
 800800c:	7dfa      	ldrb	r2, [r7, #23]
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	429a      	cmp	r2, r3
 8008012:	d3f5      	bcc.n	8008000 <NOR_IDS_GetQtdBlocks+0x40>
		}
		break;
 8008014:	bf00      	nop
	}

	return blocks;
 8008016:	693b      	ldr	r3, [r7, #16]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	4b10      	ldr	r3, [pc, #64]	; (800806c <HAL_MspInit+0x4c>)
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	4a0f      	ldr	r2, [pc, #60]	; (800806c <HAL_MspInit+0x4c>)
 8008030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008034:	6453      	str	r3, [r2, #68]	; 0x44
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <HAL_MspInit+0x4c>)
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008042:	2300      	movs	r3, #0
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <HAL_MspInit+0x4c>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	4a08      	ldr	r2, [pc, #32]	; (800806c <HAL_MspInit+0x4c>)
 800804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008050:	6413      	str	r3, [r2, #64]	; 0x40
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <HAL_MspInit+0x4c>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800

08008070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08a      	sub	sp, #40	; 0x28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 0314 	add.w	r3, r7, #20
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a5a      	ldr	r2, [pc, #360]	; (80081f8 <HAL_SPI_MspInit+0x188>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f040 80ad 	bne.w	80081ee <HAL_SPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008094:	2300      	movs	r3, #0
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	4b58      	ldr	r3, [pc, #352]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	4a57      	ldr	r2, [pc, #348]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 800809e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a2:	6413      	str	r3, [r2, #64]	; 0x40
 80080a4:	4b55      	ldr	r3, [pc, #340]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	4b51      	ldr	r3, [pc, #324]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	4a50      	ldr	r2, [pc, #320]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080ba:	f043 0302 	orr.w	r3, r3, #2
 80080be:	6313      	str	r3, [r2, #48]	; 0x30
 80080c0:	4b4e      	ldr	r3, [pc, #312]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080cc:	2300      	movs	r3, #0
 80080ce:	60bb      	str	r3, [r7, #8]
 80080d0:	4b4a      	ldr	r3, [pc, #296]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	4a49      	ldr	r2, [pc, #292]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	6313      	str	r3, [r2, #48]	; 0x30
 80080dc:	4b47      	ldr	r3, [pc, #284]	; (80081fc <HAL_SPI_MspInit+0x18c>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB4     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80080e8:	2318      	movs	r3, #24
 80080ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ec:	2302      	movs	r3, #2
 80080ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f4:	2303      	movs	r3, #3
 80080f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080f8:	2306      	movs	r3, #6
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4619      	mov	r1, r3
 8008102:	483f      	ldr	r0, [pc, #252]	; (8008200 <HAL_SPI_MspInit+0x190>)
 8008104:	f000 fece 	bl	8008ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800810c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810e:	2302      	movs	r3, #2
 8008110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008116:	2303      	movs	r3, #3
 8008118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800811a:	2306      	movs	r3, #6
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811e:	f107 0314 	add.w	r3, r7, #20
 8008122:	4619      	mov	r1, r3
 8008124:	4837      	ldr	r0, [pc, #220]	; (8008204 <HAL_SPI_MspInit+0x194>)
 8008126:	f000 febd 	bl	8008ea4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800812a:	4b37      	ldr	r3, [pc, #220]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800812c:	4a37      	ldr	r2, [pc, #220]	; (800820c <HAL_SPI_MspInit+0x19c>)
 800812e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008130:	4b35      	ldr	r3, [pc, #212]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008136:	4b34      	ldr	r3, [pc, #208]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800813c:	4b32      	ldr	r3, [pc, #200]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800813e:	2200      	movs	r2, #0
 8008140:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008142:	4b31      	ldr	r3, [pc, #196]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008148:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800814a:	4b2f      	ldr	r3, [pc, #188]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800814c:	2200      	movs	r2, #0
 800814e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008150:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008152:	2200      	movs	r2, #0
 8008154:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8008156:	4b2c      	ldr	r3, [pc, #176]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008158:	2200      	movs	r2, #0
 800815a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800815c:	4b2a      	ldr	r3, [pc, #168]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800815e:	2200      	movs	r2, #0
 8008160:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008162:	4b29      	ldr	r3, [pc, #164]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008164:	2200      	movs	r2, #0
 8008166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8008168:	4827      	ldr	r0, [pc, #156]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800816a:	f000 fb8f 	bl	800888c <HAL_DMA_Init>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8008174:	f7ff fb3c 	bl	80077f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a23      	ldr	r2, [pc, #140]	; (8008208 <HAL_SPI_MspInit+0x198>)
 800817c:	64da      	str	r2, [r3, #76]	; 0x4c
 800817e:	4a22      	ldr	r2, [pc, #136]	; (8008208 <HAL_SPI_MspInit+0x198>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8008184:	4b22      	ldr	r3, [pc, #136]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 8008186:	4a23      	ldr	r2, [pc, #140]	; (8008214 <HAL_SPI_MspInit+0x1a4>)
 8008188:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800818a:	4b21      	ldr	r3, [pc, #132]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 800818c:	2200      	movs	r2, #0
 800818e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008190:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 8008192:	2240      	movs	r2, #64	; 0x40
 8008194:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008196:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 8008198:	2200      	movs	r2, #0
 800819a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800819c:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 800819e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081a2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80081aa:	4b19      	ldr	r3, [pc, #100]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80081b6:	4b16      	ldr	r3, [pc, #88]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80081bc:	4b14      	ldr	r3, [pc, #80]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081be:	2200      	movs	r2, #0
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80081c2:	4813      	ldr	r0, [pc, #76]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081c4:	f000 fb62 	bl	800888c <HAL_DMA_Init>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 80081ce:	f7ff fb0f 	bl	80077f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081d6:	649a      	str	r2, [r3, #72]	; 0x48
 80081d8:	4a0d      	ldr	r2, [pc, #52]	; (8008210 <HAL_SPI_MspInit+0x1a0>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80081de:	2200      	movs	r2, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	2033      	movs	r0, #51	; 0x33
 80081e4:	f000 fb1b 	bl	800881e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80081e8:	2033      	movs	r0, #51	; 0x33
 80081ea:	f000 fb34 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80081ee:	bf00      	nop
 80081f0:	3728      	adds	r7, #40	; 0x28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	40003c00 	.word	0x40003c00
 80081fc:	40023800 	.word	0x40023800
 8008200:	40020400 	.word	0x40020400
 8008204:	40020800 	.word	0x40020800
 8008208:	2000030c 	.word	0x2000030c
 800820c:	40026010 	.word	0x40026010
 8008210:	200001e0 	.word	0x200001e0
 8008214:	40026088 	.word	0x40026088

08008218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08a      	sub	sp, #40	; 0x28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	609a      	str	r2, [r3, #8]
 800822c:	60da      	str	r2, [r3, #12]
 800822e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <HAL_UART_MspInit+0x84>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d12c      	bne.n	8008294 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <HAL_UART_MspInit+0x88>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <HAL_UART_MspInit+0x88>)
 8008244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008248:	6413      	str	r3, [r2, #64]	; 0x40
 800824a:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <HAL_UART_MspInit+0x88>)
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <HAL_UART_MspInit+0x88>)
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	4a10      	ldr	r2, [pc, #64]	; (80082a0 <HAL_UART_MspInit+0x88>)
 8008260:	f043 0310 	orr.w	r3, r3, #16
 8008264:	6313      	str	r3, [r2, #48]	; 0x30
 8008266:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <HAL_UART_MspInit+0x88>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8008272:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008278:	2302      	movs	r3, #2
 800827a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008280:	2303      	movs	r3, #3
 8008282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008284:	2308      	movs	r3, #8
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4619      	mov	r1, r3
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <HAL_UART_MspInit+0x8c>)
 8008290:	f000 fe08 	bl	8008ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8008294:	bf00      	nop
 8008296:	3728      	adds	r7, #40	; 0x28
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40007800 	.word	0x40007800
 80082a0:	40023800 	.word	0x40023800
 80082a4:	40021000 	.word	0x40021000

080082a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082ac:	e7fe      	b.n	80082ac <NMI_Handler+0x4>

080082ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082b2:	e7fe      	b.n	80082b2 <HardFault_Handler+0x4>

080082b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082b8:	e7fe      	b.n	80082b8 <MemManage_Handler+0x4>

080082ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082ba:	b480      	push	{r7}
 80082bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082be:	e7fe      	b.n	80082be <BusFault_Handler+0x4>

080082c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082c4:	e7fe      	b.n	80082c4 <UsageFault_Handler+0x4>

080082c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082c6:	b480      	push	{r7}
 80082c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082ca:	bf00      	nop
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082d8:	bf00      	nop
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082e2:	b480      	push	{r7}
 80082e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082f4:	f000 f974 	bl	80085e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}

080082fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8008300:	4802      	ldr	r0, [pc, #8]	; (800830c <DMA1_Stream0_IRQHandler+0x10>)
 8008302:	f000 fb93 	bl	8008a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008306:	bf00      	nop
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	2000030c 	.word	0x2000030c

08008310 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8008314:	4802      	ldr	r0, [pc, #8]	; (8008320 <DMA1_Stream5_IRQHandler+0x10>)
 8008316:	f000 fb89 	bl	8008a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800831a:	bf00      	nop
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	200001e0 	.word	0x200001e0

08008324 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8008328:	4802      	ldr	r0, [pc, #8]	; (8008334 <SPI3_IRQHandler+0x10>)
 800832a:	f002 f891 	bl	800a450 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000188 	.word	0x20000188

08008338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
	return 1;
 800833c:	2301      	movs	r3, #1
}
 800833e:	4618      	mov	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <_kill>:

int _kill(int pid, int sig)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008352:	f002 fdff 	bl	800af54 <__errno>
 8008356:	4603      	mov	r3, r0
 8008358:	2216      	movs	r2, #22
 800835a:	601a      	str	r2, [r3, #0]
	return -1;
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_exit>:

void _exit (int status)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008370:	f04f 31ff 	mov.w	r1, #4294967295
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ffe7 	bl	8008348 <_kill>
	while (1) {}		/* Make sure we hang here */
 800837a:	e7fe      	b.n	800837a <_exit+0x12>

0800837c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e00a      	b.n	80083a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800838e:	f3af 8000 	nop.w
 8008392:	4601      	mov	r1, r0
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	60ba      	str	r2, [r7, #8]
 800839a:	b2ca      	uxtb	r2, r1
 800839c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	3301      	adds	r3, #1
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	dbf0      	blt.n	800838e <_read+0x12>
	}

return len;
 80083ac:	687b      	ldr	r3, [r7, #4]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	e009      	b.n	80083dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	60ba      	str	r2, [r7, #8]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	3301      	adds	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	dbf1      	blt.n	80083c8 <_write+0x12>
	}
	return len;
 80083e4:	687b      	ldr	r3, [r7, #4]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <_close>:

int _close(int file)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
	return -1;
 80083f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008416:	605a      	str	r2, [r3, #4]
	return 0;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <_isatty>:

int _isatty(int file)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
	return 1;
 800842e:	2301      	movs	r3, #1
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
	return 0;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008460:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <_sbrk+0x5c>)
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <_sbrk+0x60>)
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800846c:	4b13      	ldr	r3, [pc, #76]	; (80084bc <_sbrk+0x64>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008474:	4b11      	ldr	r3, [pc, #68]	; (80084bc <_sbrk+0x64>)
 8008476:	4a12      	ldr	r2, [pc, #72]	; (80084c0 <_sbrk+0x68>)
 8008478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <_sbrk+0x64>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	429a      	cmp	r2, r3
 8008486:	d207      	bcs.n	8008498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008488:	f002 fd64 	bl	800af54 <__errno>
 800848c:	4603      	mov	r3, r0
 800848e:	220c      	movs	r2, #12
 8008490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295
 8008496:	e009      	b.n	80084ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <_sbrk+0x64>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <_sbrk+0x64>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4413      	add	r3, r2
 80084a6:	4a05      	ldr	r2, [pc, #20]	; (80084bc <_sbrk+0x64>)
 80084a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084aa:	68fb      	ldr	r3, [r7, #12]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20030000 	.word	0x20030000
 80084b8:	00000400 	.word	0x00000400
 80084bc:	200000e4 	.word	0x200000e4
 80084c0:	20000398 	.word	0x20000398

080084c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <SystemInit+0x20>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	4a05      	ldr	r2, [pc, #20]	; (80084e4 <SystemInit+0x20>)
 80084d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80084d8:	bf00      	nop
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	e000ed00 	.word	0xe000ed00

080084e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80084e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084ec:	480d      	ldr	r0, [pc, #52]	; (8008524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80084ee:	490e      	ldr	r1, [pc, #56]	; (8008528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80084f0:	4a0e      	ldr	r2, [pc, #56]	; (800852c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80084f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084f4:	e002      	b.n	80084fc <LoopCopyDataInit>

080084f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084fa:	3304      	adds	r3, #4

080084fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008500:	d3f9      	bcc.n	80084f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008502:	4a0b      	ldr	r2, [pc, #44]	; (8008530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008504:	4c0b      	ldr	r4, [pc, #44]	; (8008534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008508:	e001      	b.n	800850e <LoopFillZerobss>

0800850a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800850a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800850c:	3204      	adds	r2, #4

0800850e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800850e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008510:	d3fb      	bcc.n	800850a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008512:	f7ff ffd7 	bl	80084c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008516:	f002 fd35 	bl	800af84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800851a:	f7fe ff83 	bl	8007424 <main>
  bx  lr    
 800851e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008520:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008528:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800852c:	0800d108 	.word	0x0800d108
  ldr r2, =_sbss
 8008530:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8008534:	20000394 	.word	0x20000394

08008538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008538:	e7fe      	b.n	8008538 <ADC_IRQHandler>
	...

0800853c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008540:	4b0e      	ldr	r3, [pc, #56]	; (800857c <HAL_Init+0x40>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a0d      	ldr	r2, [pc, #52]	; (800857c <HAL_Init+0x40>)
 8008546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800854a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <HAL_Init+0x40>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <HAL_Init+0x40>)
 8008552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008558:	4b08      	ldr	r3, [pc, #32]	; (800857c <HAL_Init+0x40>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a07      	ldr	r2, [pc, #28]	; (800857c <HAL_Init+0x40>)
 800855e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008564:	2003      	movs	r0, #3
 8008566:	f000 f94f 	bl	8008808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800856a:	200f      	movs	r0, #15
 800856c:	f000 f808 	bl	8008580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008570:	f7ff fd56 	bl	8008020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023c00 	.word	0x40023c00

08008580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_InitTick+0x54>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <HAL_InitTick+0x58>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008596:	fbb3 f3f1 	udiv	r3, r3, r1
 800859a:	fbb2 f3f3 	udiv	r3, r2, r3
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f967 	bl	8008872 <HAL_SYSTICK_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e00e      	b.n	80085cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d80a      	bhi.n	80085ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085b4:	2200      	movs	r2, #0
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	f000 f92f 	bl	800881e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085c0:	4a06      	ldr	r2, [pc, #24]	; (80085dc <HAL_InitTick+0x5c>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000000 	.word	0x20000000
 80085d8:	20000008 	.word	0x20000008
 80085dc:	20000004 	.word	0x20000004

080085e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_IncTick+0x20>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <HAL_IncTick+0x24>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4413      	add	r3, r2
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <HAL_IncTick+0x24>)
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000008 	.word	0x20000008
 8008604:	20000380 	.word	0x20000380

08008608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  return uwTick;
 800860c:	4b03      	ldr	r3, [pc, #12]	; (800861c <HAL_GetTick+0x14>)
 800860e:	681b      	ldr	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20000380 	.word	0x20000380

08008620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008628:	f7ff ffee 	bl	8008608 <HAL_GetTick>
 800862c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d005      	beq.n	8008646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <HAL_Delay+0x44>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008646:	bf00      	nop
 8008648:	f7ff ffde 	bl	8008608 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	429a      	cmp	r2, r3
 8008656:	d8f7      	bhi.n	8008648 <HAL_Delay+0x28>
  {
  }
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000008 	.word	0x20000008

08008668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <__NVIC_SetPriorityGrouping+0x44>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008684:	4013      	ands	r3, r2
 8008686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800869a:	4a04      	ldr	r2, [pc, #16]	; (80086ac <__NVIC_SetPriorityGrouping+0x44>)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	60d3      	str	r3, [r2, #12]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <__NVIC_GetPriorityGrouping+0x18>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	0a1b      	lsrs	r3, r3, #8
 80086ba:	f003 0307 	and.w	r3, r3, #7
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	db0b      	blt.n	80086f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 021f 	and.w	r2, r3, #31
 80086e4:	4907      	ldr	r1, [pc, #28]	; (8008704 <__NVIC_EnableIRQ+0x38>)
 80086e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	2001      	movs	r0, #1
 80086ee:	fa00 f202 	lsl.w	r2, r0, r2
 80086f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	e000e100 	.word	0xe000e100

08008708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db0a      	blt.n	8008732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	490c      	ldr	r1, [pc, #48]	; (8008754 <__NVIC_SetPriority+0x4c>)
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	0112      	lsls	r2, r2, #4
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	440b      	add	r3, r1
 800872c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008730:	e00a      	b.n	8008748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	4908      	ldr	r1, [pc, #32]	; (8008758 <__NVIC_SetPriority+0x50>)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	3b04      	subs	r3, #4
 8008740:	0112      	lsls	r2, r2, #4
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	440b      	add	r3, r1
 8008746:	761a      	strb	r2, [r3, #24]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	e000e100 	.word	0xe000e100
 8008758:	e000ed00 	.word	0xe000ed00

0800875c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800875c:	b480      	push	{r7}
 800875e:	b089      	sub	sp, #36	; 0x24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f1c3 0307 	rsb	r3, r3, #7
 8008776:	2b04      	cmp	r3, #4
 8008778:	bf28      	it	cs
 800877a:	2304      	movcs	r3, #4
 800877c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3304      	adds	r3, #4
 8008782:	2b06      	cmp	r3, #6
 8008784:	d902      	bls.n	800878c <NVIC_EncodePriority+0x30>
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	3b03      	subs	r3, #3
 800878a:	e000      	b.n	800878e <NVIC_EncodePriority+0x32>
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	43da      	mvns	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	401a      	ands	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087a4:	f04f 31ff 	mov.w	r1, #4294967295
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	43d9      	mvns	r1, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087b4:	4313      	orrs	r3, r2
         );
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3724      	adds	r7, #36	; 0x24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d4:	d301      	bcc.n	80087da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087d6:	2301      	movs	r3, #1
 80087d8:	e00f      	b.n	80087fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087da:	4a0a      	ldr	r2, [pc, #40]	; (8008804 <SysTick_Config+0x40>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3b01      	subs	r3, #1
 80087e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087e2:	210f      	movs	r1, #15
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	f7ff ff8e 	bl	8008708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <SysTick_Config+0x40>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <SysTick_Config+0x40>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	e000e010 	.word	0xe000e010

08008808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff29 	bl	8008668 <__NVIC_SetPriorityGrouping>
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800881e:	b580      	push	{r7, lr}
 8008820:	b086      	sub	sp, #24
 8008822:	af00      	add	r7, sp, #0
 8008824:	4603      	mov	r3, r0
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008830:	f7ff ff3e 	bl	80086b0 <__NVIC_GetPriorityGrouping>
 8008834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff ff8e 	bl	800875c <NVIC_EncodePriority>
 8008840:	4602      	mov	r2, r0
 8008842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ff5d 	bl	8008708 <__NVIC_SetPriority>
}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	4603      	mov	r3, r0
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff ff31 	bl	80086cc <__NVIC_EnableIRQ>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff ffa2 	bl	80087c4 <SysTick_Config>
 8008880:	4603      	mov	r3, r0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008898:	f7ff feb6 	bl	8008608 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e099      	b.n	80089dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0201 	bic.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088c8:	e00f      	b.n	80088ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088ca:	f7ff fe9d 	bl	8008608 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d908      	bls.n	80088ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2220      	movs	r2, #32
 80088dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2203      	movs	r2, #3
 80088e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e078      	b.n	80089dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e8      	bne.n	80088ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4b38      	ldr	r3, [pc, #224]	; (80089e4 <HAL_DMA_Init+0x158>)
 8008904:	4013      	ands	r3, r2
 8008906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800892e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b04      	cmp	r3, #4
 8008942:	d107      	bne.n	8008954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	4313      	orrs	r3, r2
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b04      	cmp	r3, #4
 800897c:	d117      	bne.n	80089ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00e      	beq.n	80089ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa0b 	bl	8008dac <DMA_CheckFifoParam>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2240      	movs	r2, #64	; 0x40
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80089aa:	2301      	movs	r3, #1
 80089ac:	e016      	b.n	80089dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f9c2 	bl	8008d40 <DMA_CalcBaseAndBitshift>
 80089bc:	4603      	mov	r3, r0
 80089be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c4:	223f      	movs	r2, #63	; 0x3f
 80089c6:	409a      	lsls	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	f010803f 	.word	0xf010803f

080089e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d004      	beq.n	8008a06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2280      	movs	r2, #128	; 0x80
 8008a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e00c      	b.n	8008a20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2205      	movs	r2, #5
 8008a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a38:	4b92      	ldr	r3, [pc, #584]	; (8008c84 <HAL_DMA_IRQHandler+0x258>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a92      	ldr	r2, [pc, #584]	; (8008c88 <HAL_DMA_IRQHandler+0x25c>)
 8008a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a42:	0a9b      	lsrs	r3, r3, #10
 8008a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a56:	2208      	movs	r2, #8
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d01a      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d013      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0204 	bic.w	r2, r2, #4
 8008a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a84:	2208      	movs	r2, #8
 8008a86:	409a      	lsls	r2, r3
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a90:	f043 0201 	orr.w	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d012      	beq.n	8008ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aba:	2201      	movs	r2, #1
 8008abc:	409a      	lsls	r2, r3
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	f043 0202 	orr.w	r2, r3, #2
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	409a      	lsls	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d012      	beq.n	8008b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af0:	2204      	movs	r2, #4
 8008af2:	409a      	lsls	r2, r3
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afc:	f043 0204 	orr.w	r2, r3, #4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b08:	2210      	movs	r2, #16
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d043      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d03c      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b26:	2210      	movs	r2, #16
 8008b28:	409a      	lsls	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d018      	beq.n	8008b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d024      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
 8008b5a:	e01f      	b.n	8008b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01b      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
 8008b6c:	e016      	b.n	8008b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d107      	bne.n	8008b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0208 	bic.w	r2, r2, #8
 8008b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	409a      	lsls	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 808e 	beq.w	8008cca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8086 	beq.w	8008cca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	409a      	lsls	r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d136      	bne.n	8008c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0216 	bic.w	r2, r2, #22
 8008be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695a      	ldr	r2, [r3, #20]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <HAL_DMA_IRQHandler+0x1da>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0208 	bic.w	r2, r2, #8
 8008c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1a:	223f      	movs	r2, #63	; 0x3f
 8008c1c:	409a      	lsls	r2, r3
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d07d      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
        }
        return;
 8008c42:	e078      	b.n	8008d36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01c      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d108      	bne.n	8008c72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d030      	beq.n	8008cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
 8008c70:	e02b      	b.n	8008cca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d027      	beq.n	8008cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
 8008c82:	e022      	b.n	8008cca <HAL_DMA_IRQHandler+0x29e>
 8008c84:	20000000 	.word	0x20000000
 8008c88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10f      	bne.n	8008cba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0210 	bic.w	r2, r2, #16
 8008ca8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d032      	beq.n	8008d38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d022      	beq.n	8008d24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2205      	movs	r2, #5
 8008ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60bb      	str	r3, [r7, #8]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d307      	bcc.n	8008d12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1f2      	bne.n	8008cf6 <HAL_DMA_IRQHandler+0x2ca>
 8008d10:	e000      	b.n	8008d14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008d12:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
 8008d34:	e000      	b.n	8008d38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008d36:	bf00      	nop
    }
  }
}
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop

08008d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	3b10      	subs	r3, #16
 8008d50:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <DMA_CalcBaseAndBitshift+0x64>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	091b      	lsrs	r3, r3, #4
 8008d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d5a:	4a13      	ldr	r2, [pc, #76]	; (8008da8 <DMA_CalcBaseAndBitshift+0x68>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d909      	bls.n	8008d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	1d1a      	adds	r2, r3, #4
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8008d80:	e007      	b.n	8008d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	aaaaaaab 	.word	0xaaaaaaab
 8008da8:	0800d01c 	.word	0x0800d01c

08008dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d11f      	bne.n	8008e06 <DMA_CheckFifoParam+0x5a>
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d856      	bhi.n	8008e7a <DMA_CheckFifoParam+0xce>
 8008dcc:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <DMA_CheckFifoParam+0x28>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008df7 	.word	0x08008df7
 8008ddc:	08008de5 	.word	0x08008de5
 8008de0:	08008e7b 	.word	0x08008e7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d046      	beq.n	8008e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008df4:	e043      	b.n	8008e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008dfe:	d140      	bne.n	8008e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e04:	e03d      	b.n	8008e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0e:	d121      	bne.n	8008e54 <DMA_CheckFifoParam+0xa8>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d837      	bhi.n	8008e86 <DMA_CheckFifoParam+0xda>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <DMA_CheckFifoParam+0x70>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e33 	.word	0x08008e33
 8008e24:	08008e2d 	.word	0x08008e2d
 8008e28:	08008e45 	.word	0x08008e45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e30:	e030      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d025      	beq.n	8008e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e42:	e022      	b.n	8008e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e4c:	d11f      	bne.n	8008e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e52:	e01c      	b.n	8008e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d903      	bls.n	8008e62 <DMA_CheckFifoParam+0xb6>
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	d003      	beq.n	8008e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e60:	e018      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]
      break;
 8008e66:	e015      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00e      	beq.n	8008e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
      break;
 8008e78:	e00b      	b.n	8008e92 <DMA_CheckFifoParam+0xe6>
      break;
 8008e7a:	bf00      	nop
 8008e7c:	e00a      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;
 8008e7e:	bf00      	nop
 8008e80:	e008      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;
 8008e82:	bf00      	nop
 8008e84:	e006      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;
 8008e86:	bf00      	nop
 8008e88:	e004      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;
 8008e8a:	bf00      	nop
 8008e8c:	e002      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <DMA_CheckFifoParam+0xe8>
      break;
 8008e92:	bf00      	nop
    }
  } 
  
  return status; 
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop

08008ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	e177      	b.n	80091b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	f040 8166 	bne.w	80091aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d005      	beq.n	8008ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d130      	bne.n	8008f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	2203      	movs	r2, #3
 8008f02:	fa02 f303 	lsl.w	r3, r2, r3
 8008f06:	43db      	mvns	r3, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	f003 0201 	and.w	r2, r3, #1
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d017      	beq.n	8008f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	2203      	movs	r2, #3
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	43db      	mvns	r3, r3
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d123      	bne.n	8008fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	08da      	lsrs	r2, r3, #3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3208      	adds	r2, #8
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	220f      	movs	r2, #15
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	08da      	lsrs	r2, r3, #3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3208      	adds	r2, #8
 8008fe2:	69b9      	ldr	r1, [r7, #24]
 8008fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f003 0203 	and.w	r2, r3, #3
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4313      	orrs	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80c0 	beq.w	80091aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	4b66      	ldr	r3, [pc, #408]	; (80091c8 <HAL_GPIO_Init+0x324>)
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	4a65      	ldr	r2, [pc, #404]	; (80091c8 <HAL_GPIO_Init+0x324>)
 8009034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009038:	6453      	str	r3, [r2, #68]	; 0x44
 800903a:	4b63      	ldr	r3, [pc, #396]	; (80091c8 <HAL_GPIO_Init+0x324>)
 800903c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009046:	4a61      	ldr	r2, [pc, #388]	; (80091cc <HAL_GPIO_Init+0x328>)
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	089b      	lsrs	r3, r3, #2
 800904c:	3302      	adds	r3, #2
 800904e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	220f      	movs	r2, #15
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4013      	ands	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a58      	ldr	r2, [pc, #352]	; (80091d0 <HAL_GPIO_Init+0x32c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d037      	beq.n	80090e2 <HAL_GPIO_Init+0x23e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a57      	ldr	r2, [pc, #348]	; (80091d4 <HAL_GPIO_Init+0x330>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d031      	beq.n	80090de <HAL_GPIO_Init+0x23a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a56      	ldr	r2, [pc, #344]	; (80091d8 <HAL_GPIO_Init+0x334>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d02b      	beq.n	80090da <HAL_GPIO_Init+0x236>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a55      	ldr	r2, [pc, #340]	; (80091dc <HAL_GPIO_Init+0x338>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d025      	beq.n	80090d6 <HAL_GPIO_Init+0x232>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a54      	ldr	r2, [pc, #336]	; (80091e0 <HAL_GPIO_Init+0x33c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d01f      	beq.n	80090d2 <HAL_GPIO_Init+0x22e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a53      	ldr	r2, [pc, #332]	; (80091e4 <HAL_GPIO_Init+0x340>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d019      	beq.n	80090ce <HAL_GPIO_Init+0x22a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a52      	ldr	r2, [pc, #328]	; (80091e8 <HAL_GPIO_Init+0x344>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <HAL_GPIO_Init+0x226>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a51      	ldr	r2, [pc, #324]	; (80091ec <HAL_GPIO_Init+0x348>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00d      	beq.n	80090c6 <HAL_GPIO_Init+0x222>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a50      	ldr	r2, [pc, #320]	; (80091f0 <HAL_GPIO_Init+0x34c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <HAL_GPIO_Init+0x21e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a4f      	ldr	r2, [pc, #316]	; (80091f4 <HAL_GPIO_Init+0x350>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d101      	bne.n	80090be <HAL_GPIO_Init+0x21a>
 80090ba:	2309      	movs	r3, #9
 80090bc:	e012      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090be:	230a      	movs	r3, #10
 80090c0:	e010      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090c2:	2308      	movs	r3, #8
 80090c4:	e00e      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090c6:	2307      	movs	r3, #7
 80090c8:	e00c      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090ca:	2306      	movs	r3, #6
 80090cc:	e00a      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090ce:	2305      	movs	r3, #5
 80090d0:	e008      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090d2:	2304      	movs	r3, #4
 80090d4:	e006      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090d6:	2303      	movs	r3, #3
 80090d8:	e004      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090da:	2302      	movs	r3, #2
 80090dc:	e002      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <HAL_GPIO_Init+0x240>
 80090e2:	2300      	movs	r3, #0
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	f002 0203 	and.w	r2, r2, #3
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	4093      	lsls	r3, r2
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090f4:	4935      	ldr	r1, [pc, #212]	; (80091cc <HAL_GPIO_Init+0x328>)
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	3302      	adds	r3, #2
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009102:	4b3d      	ldr	r3, [pc, #244]	; (80091f8 <HAL_GPIO_Init+0x354>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	43db      	mvns	r3, r3
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	4013      	ands	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009126:	4a34      	ldr	r2, [pc, #208]	; (80091f8 <HAL_GPIO_Init+0x354>)
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800912c:	4b32      	ldr	r3, [pc, #200]	; (80091f8 <HAL_GPIO_Init+0x354>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	43db      	mvns	r3, r3
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	4013      	ands	r3, r2
 800913a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4313      	orrs	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009150:	4a29      	ldr	r2, [pc, #164]	; (80091f8 <HAL_GPIO_Init+0x354>)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009156:	4b28      	ldr	r3, [pc, #160]	; (80091f8 <HAL_GPIO_Init+0x354>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	43db      	mvns	r3, r3
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	4013      	ands	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800917a:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <HAL_GPIO_Init+0x354>)
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009180:	4b1d      	ldr	r3, [pc, #116]	; (80091f8 <HAL_GPIO_Init+0x354>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	43db      	mvns	r3, r3
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	4013      	ands	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091a4:	4a14      	ldr	r2, [pc, #80]	; (80091f8 <HAL_GPIO_Init+0x354>)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	3301      	adds	r3, #1
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	f67f ae84 	bls.w	8008ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	3724      	adds	r7, #36	; 0x24
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40023800 	.word	0x40023800
 80091cc:	40013800 	.word	0x40013800
 80091d0:	40020000 	.word	0x40020000
 80091d4:	40020400 	.word	0x40020400
 80091d8:	40020800 	.word	0x40020800
 80091dc:	40020c00 	.word	0x40020c00
 80091e0:	40021000 	.word	0x40021000
 80091e4:	40021400 	.word	0x40021400
 80091e8:	40021800 	.word	0x40021800
 80091ec:	40021c00 	.word	0x40021c00
 80091f0:	40022000 	.word	0x40022000
 80091f4:	40022400 	.word	0x40022400
 80091f8:	40013c00 	.word	0x40013c00

080091fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	807b      	strh	r3, [r7, #2]
 8009208:	4613      	mov	r3, r2
 800920a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800920c:	787b      	ldrb	r3, [r7, #1]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009212:	887a      	ldrh	r2, [r7, #2]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009218:	e003      	b.n	8009222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800921a:	887b      	ldrh	r3, [r7, #2]
 800921c:	041a      	lsls	r2, r3, #16
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	619a      	str	r2, [r3, #24]
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800923a:	2300      	movs	r3, #0
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6413      	str	r3, [r2, #64]	; 0x40
 800924a:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009256:	4b1b      	ldr	r3, [pc, #108]	; (80092c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8009258:	2201      	movs	r2, #1
 800925a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800925c:	f7ff f9d4 	bl	8008608 <HAL_GetTick>
 8009260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009262:	e009      	b.n	8009278 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009264:	f7ff f9d0 	bl	8008608 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009272:	d901      	bls.n	8009278 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e01f      	b.n	80092b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009278:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009284:	d1ee      	bne.n	8009264 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009288:	2201      	movs	r2, #1
 800928a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800928c:	f7ff f9bc 	bl	8008608 <HAL_GetTick>
 8009290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009292:	e009      	b.n	80092a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009294:	f7ff f9b8 	bl	8008608 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a2:	d901      	bls.n	80092a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e007      	b.n	80092b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80092a8:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092b4:	d1ee      	bne.n	8009294 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40023800 	.word	0x40023800
 80092c4:	420e0040 	.word	0x420e0040
 80092c8:	40007000 	.word	0x40007000
 80092cc:	420e0044 	.word	0x420e0044

080092d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e264      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d075      	beq.n	80093da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092ee:	4ba3      	ldr	r3, [pc, #652]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 030c 	and.w	r3, r3, #12
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d00c      	beq.n	8009314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092fa:	4ba0      	ldr	r3, [pc, #640]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009302:	2b08      	cmp	r3, #8
 8009304:	d112      	bne.n	800932c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009306:	4b9d      	ldr	r3, [pc, #628]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800930e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009312:	d10b      	bne.n	800932c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009314:	4b99      	ldr	r3, [pc, #612]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d05b      	beq.n	80093d8 <HAL_RCC_OscConfig+0x108>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d157      	bne.n	80093d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e23f      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009334:	d106      	bne.n	8009344 <HAL_RCC_OscConfig+0x74>
 8009336:	4b91      	ldr	r3, [pc, #580]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a90      	ldr	r2, [pc, #576]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800933c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	e01d      	b.n	8009380 <HAL_RCC_OscConfig+0xb0>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800934c:	d10c      	bne.n	8009368 <HAL_RCC_OscConfig+0x98>
 800934e:	4b8b      	ldr	r3, [pc, #556]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a8a      	ldr	r2, [pc, #552]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b88      	ldr	r3, [pc, #544]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a87      	ldr	r2, [pc, #540]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	e00b      	b.n	8009380 <HAL_RCC_OscConfig+0xb0>
 8009368:	4b84      	ldr	r3, [pc, #528]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a83      	ldr	r2, [pc, #524]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800936e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	4b81      	ldr	r3, [pc, #516]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a80      	ldr	r2, [pc, #512]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800937a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800937e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d013      	beq.n	80093b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009388:	f7ff f93e 	bl	8008608 <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009390:	f7ff f93a 	bl	8008608 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b64      	cmp	r3, #100	; 0x64
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e204      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093a2:	4b76      	ldr	r3, [pc, #472]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0xc0>
 80093ae:	e014      	b.n	80093da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b0:	f7ff f92a 	bl	8008608 <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093b8:	f7ff f926 	bl	8008608 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b64      	cmp	r3, #100	; 0x64
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e1f0      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093ca:	4b6c      	ldr	r3, [pc, #432]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1f0      	bne.n	80093b8 <HAL_RCC_OscConfig+0xe8>
 80093d6:	e000      	b.n	80093da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d063      	beq.n	80094ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093e6:	4b65      	ldr	r3, [pc, #404]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 030c 	and.w	r3, r3, #12
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093f2:	4b62      	ldr	r3, [pc, #392]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	d11c      	bne.n	8009438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093fe:	4b5f      	ldr	r3, [pc, #380]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d116      	bne.n	8009438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800940a:	4b5c      	ldr	r3, [pc, #368]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <HAL_RCC_OscConfig+0x152>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d001      	beq.n	8009422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e1c4      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009422:	4b56      	ldr	r3, [pc, #344]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4952      	ldr	r1, [pc, #328]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009432:	4313      	orrs	r3, r2
 8009434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009436:	e03a      	b.n	80094ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d020      	beq.n	8009482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009440:	4b4f      	ldr	r3, [pc, #316]	; (8009580 <HAL_RCC_OscConfig+0x2b0>)
 8009442:	2201      	movs	r2, #1
 8009444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009446:	f7ff f8df 	bl	8008608 <HAL_GetTick>
 800944a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800944c:	e008      	b.n	8009460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800944e:	f7ff f8db 	bl	8008608 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	2b02      	cmp	r3, #2
 800945a:	d901      	bls.n	8009460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e1a5      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009460:	4b46      	ldr	r3, [pc, #280]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0f0      	beq.n	800944e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800946c:	4b43      	ldr	r3, [pc, #268]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4940      	ldr	r1, [pc, #256]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800947c:	4313      	orrs	r3, r2
 800947e:	600b      	str	r3, [r1, #0]
 8009480:	e015      	b.n	80094ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009482:	4b3f      	ldr	r3, [pc, #252]	; (8009580 <HAL_RCC_OscConfig+0x2b0>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009488:	f7ff f8be 	bl	8008608 <HAL_GetTick>
 800948c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800948e:	e008      	b.n	80094a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009490:	f7ff f8ba 	bl	8008608 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d901      	bls.n	80094a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e184      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094a2:	4b36      	ldr	r3, [pc, #216]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1f0      	bne.n	8009490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0308 	and.w	r3, r3, #8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d030      	beq.n	800951c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d016      	beq.n	80094f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094c2:	4b30      	ldr	r3, [pc, #192]	; (8009584 <HAL_RCC_OscConfig+0x2b4>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c8:	f7ff f89e 	bl	8008608 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094d0:	f7ff f89a 	bl	8008608 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e164      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094e2:	4b26      	ldr	r3, [pc, #152]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 80094e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0x200>
 80094ee:	e015      	b.n	800951c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094f0:	4b24      	ldr	r3, [pc, #144]	; (8009584 <HAL_RCC_OscConfig+0x2b4>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094f6:	f7ff f887 	bl	8008608 <HAL_GetTick>
 80094fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094fc:	e008      	b.n	8009510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094fe:	f7ff f883 	bl	8008608 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e14d      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009510:	4b1a      	ldr	r3, [pc, #104]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009514:	f003 0302 	and.w	r3, r3, #2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1f0      	bne.n	80094fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80a0 	beq.w	800966a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800952e:	4b13      	ldr	r3, [pc, #76]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10f      	bne.n	800955a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800953a:	2300      	movs	r3, #0
 800953c:	60bb      	str	r3, [r7, #8]
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	4a0e      	ldr	r2, [pc, #56]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 8009544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009548:	6413      	str	r3, [r2, #64]	; 0x40
 800954a:	4b0c      	ldr	r3, [pc, #48]	; (800957c <HAL_RCC_OscConfig+0x2ac>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009552:	60bb      	str	r3, [r7, #8]
 8009554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009556:	2301      	movs	r3, #1
 8009558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <HAL_RCC_OscConfig+0x2b8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009562:	2b00      	cmp	r3, #0
 8009564:	d121      	bne.n	80095aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <HAL_RCC_OscConfig+0x2b8>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a07      	ldr	r2, [pc, #28]	; (8009588 <HAL_RCC_OscConfig+0x2b8>)
 800956c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009572:	f7ff f849 	bl	8008608 <HAL_GetTick>
 8009576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009578:	e011      	b.n	800959e <HAL_RCC_OscConfig+0x2ce>
 800957a:	bf00      	nop
 800957c:	40023800 	.word	0x40023800
 8009580:	42470000 	.word	0x42470000
 8009584:	42470e80 	.word	0x42470e80
 8009588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800958c:	f7ff f83c 	bl	8008608 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e106      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800959e:	4b85      	ldr	r3, [pc, #532]	; (80097b4 <HAL_RCC_OscConfig+0x4e4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0f0      	beq.n	800958c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d106      	bne.n	80095c0 <HAL_RCC_OscConfig+0x2f0>
 80095b2:	4b81      	ldr	r3, [pc, #516]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	4a80      	ldr	r2, [pc, #512]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	6713      	str	r3, [r2, #112]	; 0x70
 80095be:	e01c      	b.n	80095fa <HAL_RCC_OscConfig+0x32a>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b05      	cmp	r3, #5
 80095c6:	d10c      	bne.n	80095e2 <HAL_RCC_OscConfig+0x312>
 80095c8:	4b7b      	ldr	r3, [pc, #492]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095cc:	4a7a      	ldr	r2, [pc, #488]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095ce:	f043 0304 	orr.w	r3, r3, #4
 80095d2:	6713      	str	r3, [r2, #112]	; 0x70
 80095d4:	4b78      	ldr	r3, [pc, #480]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	4a77      	ldr	r2, [pc, #476]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	6713      	str	r3, [r2, #112]	; 0x70
 80095e0:	e00b      	b.n	80095fa <HAL_RCC_OscConfig+0x32a>
 80095e2:	4b75      	ldr	r3, [pc, #468]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	4a74      	ldr	r2, [pc, #464]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	6713      	str	r3, [r2, #112]	; 0x70
 80095ee:	4b72      	ldr	r3, [pc, #456]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	4a71      	ldr	r2, [pc, #452]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80095f4:	f023 0304 	bic.w	r3, r3, #4
 80095f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d015      	beq.n	800962e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009602:	f7ff f801 	bl	8008608 <HAL_GetTick>
 8009606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009608:	e00a      	b.n	8009620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800960a:	f7fe fffd 	bl	8008608 <HAL_GetTick>
 800960e:	4602      	mov	r2, r0
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	f241 3288 	movw	r2, #5000	; 0x1388
 8009618:	4293      	cmp	r3, r2
 800961a:	d901      	bls.n	8009620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e0c5      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009620:	4b65      	ldr	r3, [pc, #404]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0ee      	beq.n	800960a <HAL_RCC_OscConfig+0x33a>
 800962c:	e014      	b.n	8009658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800962e:	f7fe ffeb 	bl	8008608 <HAL_GetTick>
 8009632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009634:	e00a      	b.n	800964c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009636:	f7fe ffe7 	bl	8008608 <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	f241 3288 	movw	r2, #5000	; 0x1388
 8009644:	4293      	cmp	r3, r2
 8009646:	d901      	bls.n	800964c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e0af      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800964c:	4b5a      	ldr	r3, [pc, #360]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1ee      	bne.n	8009636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d105      	bne.n	800966a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800965e:	4b56      	ldr	r3, [pc, #344]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	4a55      	ldr	r2, [pc, #340]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 809b 	beq.w	80097aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009674:	4b50      	ldr	r3, [pc, #320]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 030c 	and.w	r3, r3, #12
 800967c:	2b08      	cmp	r3, #8
 800967e:	d05c      	beq.n	800973a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d141      	bne.n	800970c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009688:	4b4c      	ldr	r3, [pc, #304]	; (80097bc <HAL_RCC_OscConfig+0x4ec>)
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800968e:	f7fe ffbb 	bl	8008608 <HAL_GetTick>
 8009692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009694:	e008      	b.n	80096a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009696:	f7fe ffb7 	bl	8008608 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e081      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096a8:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f0      	bne.n	8009696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	019b      	lsls	r3, r3, #6
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	085b      	lsrs	r3, r3, #1
 80096cc:	3b01      	subs	r3, #1
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	061b      	lsls	r3, r3, #24
 80096d8:	4937      	ldr	r1, [pc, #220]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096de:	4b37      	ldr	r3, [pc, #220]	; (80097bc <HAL_RCC_OscConfig+0x4ec>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e4:	f7fe ff90 	bl	8008608 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096ec:	f7fe ff8c 	bl	8008608 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e056      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096fe:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <HAL_RCC_OscConfig+0x41c>
 800970a:	e04e      	b.n	80097aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800970c:	4b2b      	ldr	r3, [pc, #172]	; (80097bc <HAL_RCC_OscConfig+0x4ec>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009712:	f7fe ff79 	bl	8008608 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009718:	e008      	b.n	800972c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800971a:	f7fe ff75 	bl	8008608 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e03f      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800972c:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1f0      	bne.n	800971a <HAL_RCC_OscConfig+0x44a>
 8009738:	e037      	b.n	80097aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e032      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009746:	4b1c      	ldr	r3, [pc, #112]	; (80097b8 <HAL_RCC_OscConfig+0x4e8>)
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d028      	beq.n	80097a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975e:	429a      	cmp	r2, r3
 8009760:	d121      	bne.n	80097a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800976c:	429a      	cmp	r2, r3
 800976e:	d11a      	bne.n	80097a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009776:	4013      	ands	r3, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800977c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800977e:	4293      	cmp	r3, r2
 8009780:	d111      	bne.n	80097a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	3b01      	subs	r3, #1
 8009790:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009792:	429a      	cmp	r2, r3
 8009794:	d107      	bne.n	80097a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d001      	beq.n	80097aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	40007000 	.word	0x40007000
 80097b8:	40023800 	.word	0x40023800
 80097bc:	42470060 	.word	0x42470060

080097c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0cc      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80097d4:	4b68      	ldr	r3, [pc, #416]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d90c      	bls.n	80097fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097e2:	4b65      	ldr	r3, [pc, #404]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ea:	4b63      	ldr	r3, [pc, #396]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d001      	beq.n	80097fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0b8      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d020      	beq.n	800984a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009814:	4b59      	ldr	r3, [pc, #356]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	4a58      	ldr	r2, [pc, #352]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 800981a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800981e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800982c:	4b53      	ldr	r3, [pc, #332]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	4a52      	ldr	r2, [pc, #328]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009838:	4b50      	ldr	r3, [pc, #320]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	494d      	ldr	r1, [pc, #308]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d044      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d107      	bne.n	800986e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800985e:	4b47      	ldr	r3, [pc, #284]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d119      	bne.n	800989e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e07f      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d003      	beq.n	800987e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800987a:	2b03      	cmp	r3, #3
 800987c:	d107      	bne.n	800988e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800987e:	4b3f      	ldr	r3, [pc, #252]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e06f      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800988e:	4b3b      	ldr	r3, [pc, #236]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e067      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800989e:	4b37      	ldr	r3, [pc, #220]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f023 0203 	bic.w	r2, r3, #3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4934      	ldr	r1, [pc, #208]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098b0:	f7fe feaa 	bl	8008608 <HAL_GetTick>
 80098b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098b6:	e00a      	b.n	80098ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098b8:	f7fe fea6 	bl	8008608 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e04f      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ce:	4b2b      	ldr	r3, [pc, #172]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 020c 	and.w	r2, r3, #12
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	429a      	cmp	r2, r3
 80098de:	d1eb      	bne.n	80098b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80098e0:	4b25      	ldr	r3, [pc, #148]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 030f 	and.w	r3, r3, #15
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d20c      	bcs.n	8009908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ee:	4b22      	ldr	r3, [pc, #136]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098f6:	4b20      	ldr	r3, [pc, #128]	; (8009978 <HAL_RCC_ClockConfig+0x1b8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d001      	beq.n	8009908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e032      	b.n	800996e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	d008      	beq.n	8009926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009914:	4b19      	ldr	r3, [pc, #100]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4916      	ldr	r1, [pc, #88]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009922:	4313      	orrs	r3, r2
 8009924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0308 	and.w	r3, r3, #8
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009932:	4b12      	ldr	r3, [pc, #72]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	490e      	ldr	r1, [pc, #56]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 8009942:	4313      	orrs	r3, r2
 8009944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009946:	f000 f821 	bl	800998c <HAL_RCC_GetSysClockFreq>
 800994a:	4602      	mov	r2, r0
 800994c:	4b0b      	ldr	r3, [pc, #44]	; (800997c <HAL_RCC_ClockConfig+0x1bc>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	091b      	lsrs	r3, r3, #4
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	490a      	ldr	r1, [pc, #40]	; (8009980 <HAL_RCC_ClockConfig+0x1c0>)
 8009958:	5ccb      	ldrb	r3, [r1, r3]
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	4a09      	ldr	r2, [pc, #36]	; (8009984 <HAL_RCC_ClockConfig+0x1c4>)
 8009960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <HAL_RCC_ClockConfig+0x1c8>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fe0a 	bl	8008580 <HAL_InitTick>

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	40023c00 	.word	0x40023c00
 800997c:	40023800 	.word	0x40023800
 8009980:	0800d004 	.word	0x0800d004
 8009984:	20000000 	.word	0x20000000
 8009988:	20000004 	.word	0x20000004

0800998c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800998c:	b5b0      	push	{r4, r5, r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009992:	2100      	movs	r1, #0
 8009994:	6079      	str	r1, [r7, #4]
 8009996:	2100      	movs	r1, #0
 8009998:	60f9      	str	r1, [r7, #12]
 800999a:	2100      	movs	r1, #0
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800999e:	2100      	movs	r1, #0
 80099a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099a2:	4952      	ldr	r1, [pc, #328]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 80099a4:	6889      	ldr	r1, [r1, #8]
 80099a6:	f001 010c 	and.w	r1, r1, #12
 80099aa:	2908      	cmp	r1, #8
 80099ac:	d00d      	beq.n	80099ca <HAL_RCC_GetSysClockFreq+0x3e>
 80099ae:	2908      	cmp	r1, #8
 80099b0:	f200 8094 	bhi.w	8009adc <HAL_RCC_GetSysClockFreq+0x150>
 80099b4:	2900      	cmp	r1, #0
 80099b6:	d002      	beq.n	80099be <HAL_RCC_GetSysClockFreq+0x32>
 80099b8:	2904      	cmp	r1, #4
 80099ba:	d003      	beq.n	80099c4 <HAL_RCC_GetSysClockFreq+0x38>
 80099bc:	e08e      	b.n	8009adc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80099be:	4b4c      	ldr	r3, [pc, #304]	; (8009af0 <HAL_RCC_GetSysClockFreq+0x164>)
 80099c0:	60bb      	str	r3, [r7, #8]
       break;
 80099c2:	e08e      	b.n	8009ae2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80099c4:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x168>)
 80099c6:	60bb      	str	r3, [r7, #8]
      break;
 80099c8:	e08b      	b.n	8009ae2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099ca:	4948      	ldr	r1, [pc, #288]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 80099cc:	6849      	ldr	r1, [r1, #4]
 80099ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80099d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80099d4:	4945      	ldr	r1, [pc, #276]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 80099d6:	6849      	ldr	r1, [r1, #4]
 80099d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80099dc:	2900      	cmp	r1, #0
 80099de:	d024      	beq.n	8009a2a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099e0:	4942      	ldr	r1, [pc, #264]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 80099e2:	6849      	ldr	r1, [r1, #4]
 80099e4:	0989      	lsrs	r1, r1, #6
 80099e6:	4608      	mov	r0, r1
 80099e8:	f04f 0100 	mov.w	r1, #0
 80099ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80099f0:	f04f 0500 	mov.w	r5, #0
 80099f4:	ea00 0204 	and.w	r2, r0, r4
 80099f8:	ea01 0305 	and.w	r3, r1, r5
 80099fc:	493d      	ldr	r1, [pc, #244]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x168>)
 80099fe:	fb01 f003 	mul.w	r0, r1, r3
 8009a02:	2100      	movs	r1, #0
 8009a04:	fb01 f102 	mul.w	r1, r1, r2
 8009a08:	1844      	adds	r4, r0, r1
 8009a0a:	493a      	ldr	r1, [pc, #232]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x168>)
 8009a0c:	fba2 0101 	umull	r0, r1, r2, r1
 8009a10:	1863      	adds	r3, r4, r1
 8009a12:	4619      	mov	r1, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	f7f6 fc40 	bl	80002a0 <__aeabi_uldivmod>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4613      	mov	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	e04a      	b.n	8009ac0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a2a:	4b30      	ldr	r3, [pc, #192]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	099b      	lsrs	r3, r3, #6
 8009a30:	461a      	mov	r2, r3
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a3a:	f04f 0100 	mov.w	r1, #0
 8009a3e:	ea02 0400 	and.w	r4, r2, r0
 8009a42:	ea03 0501 	and.w	r5, r3, r1
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	014b      	lsls	r3, r1, #5
 8009a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a58:	0142      	lsls	r2, r0, #5
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	1b00      	subs	r0, r0, r4
 8009a60:	eb61 0105 	sbc.w	r1, r1, r5
 8009a64:	f04f 0200 	mov.w	r2, #0
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	018b      	lsls	r3, r1, #6
 8009a6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a72:	0182      	lsls	r2, r0, #6
 8009a74:	1a12      	subs	r2, r2, r0
 8009a76:	eb63 0301 	sbc.w	r3, r3, r1
 8009a7a:	f04f 0000 	mov.w	r0, #0
 8009a7e:	f04f 0100 	mov.w	r1, #0
 8009a82:	00d9      	lsls	r1, r3, #3
 8009a84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a88:	00d0      	lsls	r0, r2, #3
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	1912      	adds	r2, r2, r4
 8009a90:	eb45 0303 	adc.w	r3, r5, r3
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	0299      	lsls	r1, r3, #10
 8009a9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009aa2:	0290      	lsls	r0, r2, #10
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	f7f6 fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4613      	mov	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <HAL_RCC_GetSysClockFreq+0x160>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	0c1b      	lsrs	r3, r3, #16
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	3301      	adds	r3, #1
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad8:	60bb      	str	r3, [r7, #8]
      break;
 8009ada:	e002      	b.n	8009ae2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009adc:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <HAL_RCC_GetSysClockFreq+0x164>)
 8009ade:	60bb      	str	r3, [r7, #8]
      break;
 8009ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bdb0      	pop	{r4, r5, r7, pc}
 8009aec:	40023800 	.word	0x40023800
 8009af0:	00f42400 	.word	0x00f42400
 8009af4:	017d7840 	.word	0x017d7840

08009af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009afc:	4b03      	ldr	r3, [pc, #12]	; (8009b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000000 	.word	0x20000000

08009b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b14:	f7ff fff0 	bl	8009af8 <HAL_RCC_GetHCLKFreq>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	0a9b      	lsrs	r3, r3, #10
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	4903      	ldr	r1, [pc, #12]	; (8009b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b26:	5ccb      	ldrb	r3, [r1, r3]
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40023800 	.word	0x40023800
 8009b34:	0800d014 	.word	0x0800d014

08009b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b3c:	f7ff ffdc 	bl	8009af8 <HAL_RCC_GetHCLKFreq>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	0b5b      	lsrs	r3, r3, #13
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	4903      	ldr	r1, [pc, #12]	; (8009b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b4e:	5ccb      	ldrb	r3, [r1, r3]
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	0800d014 	.word	0x0800d014

08009b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e07b      	b.n	8009c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d108      	bne.n	8009b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b82:	d009      	beq.n	8009b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	61da      	str	r2, [r3, #28]
 8009b8a:	e005      	b.n	8009b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d106      	bne.n	8009bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fe fa5c 	bl	8008070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1c:	ea42 0103 	orr.w	r1, r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	f003 0104 	and.w	r1, r3, #4
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	f003 0210 	and.w	r2, r3, #16
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69da      	ldr	r2, [r3, #28]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b088      	sub	sp, #32
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	603b      	str	r3, [r7, #0]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_SPI_Transmit+0x22>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e126      	b.n	8009ee2 <HAL_SPI_Transmit+0x270>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c9c:	f7fe fcb4 	bl	8008608 <HAL_GetTick>
 8009ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d002      	beq.n	8009cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cb6:	e10b      	b.n	8009ed0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <HAL_SPI_Transmit+0x52>
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009cc8:	e102      	b.n	8009ed0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2203      	movs	r2, #3
 8009cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	88fa      	ldrh	r2, [r7, #6]
 8009ce2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	88fa      	ldrh	r2, [r7, #6]
 8009ce8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d10:	d10f      	bne.n	8009d32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3c:	2b40      	cmp	r3, #64	; 0x40
 8009d3e:	d007      	beq.n	8009d50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d58:	d14b      	bne.n	8009df2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <HAL_SPI_Transmit+0xf6>
 8009d62:	8afb      	ldrh	r3, [r7, #22]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d13e      	bne.n	8009de6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6c:	881a      	ldrh	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	1c9a      	adds	r2, r3, #2
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d8c:	e02b      	b.n	8009de6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d112      	bne.n	8009dc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	881a      	ldrh	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dac:	1c9a      	adds	r2, r3, #2
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	3b01      	subs	r3, #1
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8009dc0:	e011      	b.n	8009de6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dc2:	f7fe fc21 	bl	8008608 <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d803      	bhi.n	8009dda <HAL_SPI_Transmit+0x168>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d102      	bne.n	8009de0 <HAL_SPI_Transmit+0x16e>
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009de4:	e074      	b.n	8009ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1ce      	bne.n	8009d8e <HAL_SPI_Transmit+0x11c>
 8009df0:	e04c      	b.n	8009e8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <HAL_SPI_Transmit+0x18e>
 8009dfa:	8afb      	ldrh	r3, [r7, #22]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d140      	bne.n	8009e82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	330c      	adds	r3, #12
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009e26:	e02c      	b.n	8009e82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d113      	bne.n	8009e5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	330c      	adds	r3, #12
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	3b01      	subs	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e5c:	e011      	b.n	8009e82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e5e:	f7fe fbd3 	bl	8008608 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d803      	bhi.n	8009e76 <HAL_SPI_Transmit+0x204>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d102      	bne.n	8009e7c <HAL_SPI_Transmit+0x20a>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e80:	e026      	b.n	8009ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1cd      	bne.n	8009e28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fce9 	bl	800a868 <SPI_EndRxTxTransaction>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eaa:	2300      	movs	r3, #0
 8009eac:	613b      	str	r3, [r7, #16]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	613b      	str	r3, [r7, #16]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	613b      	str	r3, [r7, #16]
 8009ebe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	77fb      	strb	r3, [r7, #31]
 8009ecc:	e000      	b.n	8009ed0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b088      	sub	sp, #32
 8009eee:	af02      	add	r7, sp, #8
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	603b      	str	r3, [r7, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f06:	d112      	bne.n	8009f2e <HAL_SPI_Receive+0x44>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10e      	bne.n	8009f2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2204      	movs	r2, #4
 8009f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009f18:	88fa      	ldrh	r2, [r7, #6]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f8f1 	bl	800a10c <HAL_SPI_TransmitReceive>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	e0ea      	b.n	800a104 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_SPI_Receive+0x52>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e0e3      	b.n	800a104 <HAL_SPI_Receive+0x21a>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f44:	f7fe fb60 	bl	8008608 <HAL_GetTick>
 8009f48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d002      	beq.n	8009f5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009f56:	2302      	movs	r3, #2
 8009f58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f5a:	e0ca      	b.n	800a0f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_SPI_Receive+0x7e>
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f6c:	e0c1      	b.n	800a0f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2204      	movs	r2, #4
 8009f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb4:	d10f      	bne.n	8009fd6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d007      	beq.n	8009ff4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d162      	bne.n	800a0c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ffc:	e02e      	b.n	800a05c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d115      	bne.n	800a038 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f103 020c 	add.w	r2, r3, #12
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	3b01      	subs	r3, #1
 800a030:	b29a      	uxth	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a036:	e011      	b.n	800a05c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a038:	f7fe fae6 	bl	8008608 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d803      	bhi.n	800a050 <HAL_SPI_Receive+0x166>
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d102      	bne.n	800a056 <HAL_SPI_Receive+0x16c>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d102      	bne.n	800a05c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a05a:	e04a      	b.n	800a0f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a060:	b29b      	uxth	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1cb      	bne.n	8009ffe <HAL_SPI_Receive+0x114>
 800a066:	e031      	b.n	800a0cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d113      	bne.n	800a09e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	b292      	uxth	r2, r2
 800a082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a088:	1c9a      	adds	r2, r3, #2
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a092:	b29b      	uxth	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a09c:	e011      	b.n	800a0c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a09e:	f7fe fab3 	bl	8008608 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d803      	bhi.n	800a0b6 <HAL_SPI_Receive+0x1cc>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d102      	bne.n	800a0bc <HAL_SPI_Receive+0x1d2>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a0c0:	e017      	b.n	800a0f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1cd      	bne.n	800a068 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 fb63 	bl	800a79c <SPI_EndRxTransaction>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	75fb      	strb	r3, [r7, #23]
 800a0ee:	e000      	b.n	800a0f2 <HAL_SPI_Receive+0x208>
  }

error :
 800a0f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08c      	sub	sp, #48	; 0x30
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a11a:	2301      	movs	r3, #1
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x26>
 800a12e:	2302      	movs	r3, #2
 800a130:	e18a      	b.n	800a448 <HAL_SPI_TransmitReceive+0x33c>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a13a:	f7fe fa65 	bl	8008608 <HAL_GetTick>
 800a13e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a150:	887b      	ldrh	r3, [r7, #2]
 800a152:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d00f      	beq.n	800a17c <HAL_SPI_TransmitReceive+0x70>
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a162:	d107      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d103      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x68>
 800a16c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a170:	2b04      	cmp	r3, #4
 800a172:	d003      	beq.n	800a17c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a174:	2302      	movs	r3, #2
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a17a:	e15b      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <HAL_SPI_TransmitReceive+0x82>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <HAL_SPI_TransmitReceive+0x82>
 800a188:	887b      	ldrh	r3, [r7, #2]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d103      	bne.n	800a196 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a194:	e14e      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d003      	beq.n	800a1aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2205      	movs	r2, #5
 800a1a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	887a      	ldrh	r2, [r7, #2]
 800a1ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	887a      	ldrh	r2, [r7, #2]
 800a1c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	887a      	ldrh	r2, [r7, #2]
 800a1cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	887a      	ldrh	r2, [r7, #2]
 800a1d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ea:	2b40      	cmp	r3, #64	; 0x40
 800a1ec:	d007      	beq.n	800a1fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a206:	d178      	bne.n	800a2fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_SPI_TransmitReceive+0x10a>
 800a210:	8b7b      	ldrh	r3, [r7, #26]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d166      	bne.n	800a2e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21a:	881a      	ldrh	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	1c9a      	adds	r2, r3, #2
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a23a:	e053      	b.n	800a2e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b02      	cmp	r3, #2
 800a248:	d11b      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x176>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	d016      	beq.n	800a282 <HAL_SPI_TransmitReceive+0x176>
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d113      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	881a      	ldrh	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	1c9a      	adds	r2, r3, #2
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a274:	b29b      	uxth	r3, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d119      	bne.n	800a2c4 <HAL_SPI_TransmitReceive+0x1b8>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d014      	beq.n	800a2c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	b292      	uxth	r2, r2
 800a2a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	1c9a      	adds	r2, r3, #2
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2c4:	f7fe f9a0 	bl	8008608 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d807      	bhi.n	800a2e4 <HAL_SPI_TransmitReceive+0x1d8>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d003      	beq.n	800a2e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2e2:	e0a7      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1a6      	bne.n	800a23c <HAL_SPI_TransmitReceive+0x130>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1a1      	bne.n	800a23c <HAL_SPI_TransmitReceive+0x130>
 800a2f8:	e07c      	b.n	800a3f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <HAL_SPI_TransmitReceive+0x1fc>
 800a302:	8b7b      	ldrh	r3, [r7, #26]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d16b      	bne.n	800a3e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	330c      	adds	r3, #12
 800a312:	7812      	ldrb	r2, [r2, #0]
 800a314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a324:	b29b      	uxth	r3, r3
 800a326:	3b01      	subs	r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a32e:	e057      	b.n	800a3e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d11c      	bne.n	800a378 <HAL_SPI_TransmitReceive+0x26c>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d017      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x26c>
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d114      	bne.n	800a378 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	330c      	adds	r3, #12
 800a358:	7812      	ldrb	r2, [r2, #0]
 800a35a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b01      	cmp	r3, #1
 800a384:	d119      	bne.n	800a3ba <HAL_SPI_TransmitReceive+0x2ae>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d014      	beq.n	800a3ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	b2d2      	uxtb	r2, r2
 800a39c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3ba:	f7fe f925 	bl	8008608 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d803      	bhi.n	800a3d2 <HAL_SPI_TransmitReceive+0x2c6>
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d102      	bne.n	800a3d8 <HAL_SPI_TransmitReceive+0x2cc>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d103      	bne.n	800a3e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3de:	e029      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1a2      	bne.n	800a330 <HAL_SPI_TransmitReceive+0x224>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d19d      	bne.n	800a330 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fa35 	bl	800a868 <SPI_EndRxTxTransaction>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d006      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2220      	movs	r2, #32
 800a40e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a410:	e010      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	617b      	str	r3, [r7, #20]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	617b      	str	r3, [r7, #20]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	e000      	b.n	800a434 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3730      	adds	r7, #48	; 0x30
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	099b      	lsrs	r3, r3, #6
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10f      	bne.n	800a494 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	099b      	lsrs	r3, r3, #6
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
    return;
 800a492:	e0d7      	b.n	800a644 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x66>
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	09db      	lsrs	r3, r3, #7
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	4798      	blx	r3
    return;
 800a4b4:	e0c6      	b.n	800a644 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10c      	bne.n	800a4dc <HAL_SPI_IRQHandler+0x8c>
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	099b      	lsrs	r3, r3, #6
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d106      	bne.n	800a4dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	0a1b      	lsrs	r3, r3, #8
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 80b4 	beq.w	800a644 <HAL_SPI_IRQHandler+0x1f4>
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	095b      	lsrs	r3, r3, #5
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80ad 	beq.w	800a644 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	099b      	lsrs	r3, r3, #6
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d023      	beq.n	800a53e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d011      	beq.n	800a526 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	f043 0204 	orr.w	r2, r3, #4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a50e:	2300      	movs	r3, #0
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	e00b      	b.n	800a53e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a526:	2300      	movs	r3, #0
 800a528:	613b      	str	r3, [r7, #16]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	613b      	str	r3, [r7, #16]
 800a53a:	693b      	ldr	r3, [r7, #16]
        return;
 800a53c:	e082      	b.n	800a644 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	095b      	lsrs	r3, r3, #5
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54e:	f043 0201 	orr.w	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a556:	2300      	movs	r3, #0
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00c      	beq.n	800a59a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a584:	f043 0208 	orr.w	r2, r3, #8
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a58c:	2300      	movs	r3, #0
 800a58e:	60bb      	str	r3, [r7, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	60bb      	str	r3, [r7, #8]
 800a598:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d04f      	beq.n	800a642 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <HAL_SPI_IRQHandler+0x17e>
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d034      	beq.n	800a638 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0203 	bic.w	r2, r2, #3
 800a5dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d011      	beq.n	800a60a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ea:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_SPI_IRQHandler+0x1fc>)
 800a5ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe f9f8 	bl	80089e8 <HAL_DMA_Abort_IT>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d016      	beq.n	800a640 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a616:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <HAL_SPI_IRQHandler+0x1fc>)
 800a618:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe f9e2 	bl	80089e8 <HAL_DMA_Abort_IT>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a636:	e003      	b.n	800a640 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f809 	bl	800a650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a63e:	e000      	b.n	800a642 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a640:	bf00      	nop
    return;
 800a642:	bf00      	nop
  }
}
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	0800a665 	.word	0x0800a665

0800a650 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7ff ffe6 	bl	800a650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a684:	bf00      	nop
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b088      	sub	sp, #32
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	4613      	mov	r3, r2
 800a69a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a69c:	f7fd ffb4 	bl	8008608 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6ac:	f7fd ffac 	bl	8008608 <HAL_GetTick>
 800a6b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6b2:	4b39      	ldr	r3, [pc, #228]	; (800a798 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	015b      	lsls	r3, r3, #5
 800a6b8:	0d1b      	lsrs	r3, r3, #20
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	fb02 f303 	mul.w	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6c2:	e054      	b.n	800a76e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d050      	beq.n	800a76e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6cc:	f7fd ff9c 	bl	8008608 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d902      	bls.n	800a6e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d13d      	bne.n	800a75e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6fa:	d111      	bne.n	800a720 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a704:	d004      	beq.n	800a710 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a70e:	d107      	bne.n	800a720 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a71e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a728:	d10f      	bne.n	800a74a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a748:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e017      	b.n	800a78e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4013      	ands	r3, r2
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	bf0c      	ite	eq
 800a77e:	2301      	moveq	r3, #1
 800a780:	2300      	movne	r3, #0
 800a782:	b2db      	uxtb	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d19b      	bne.n	800a6c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3720      	adds	r7, #32
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000000 	.word	0x20000000

0800a79c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7b0:	d111      	bne.n	800a7d6 <SPI_EndRxTransaction+0x3a>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ba:	d004      	beq.n	800a7c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c4:	d107      	bne.n	800a7d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7de:	d12a      	bne.n	800a836 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e8:	d012      	beq.n	800a810 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2180      	movs	r1, #128	; 0x80
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff ff49 	bl	800a68c <SPI_WaitFlagStateUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02d      	beq.n	800a85c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a804:	f043 0220 	orr.w	r2, r3, #32
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e026      	b.n	800a85e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2200      	movs	r2, #0
 800a818:	2101      	movs	r1, #1
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff ff36 	bl	800a68c <SPI_WaitFlagStateUntilTimeout>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01a      	beq.n	800a85c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82a:	f043 0220 	orr.w	r2, r3, #32
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e013      	b.n	800a85e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2200      	movs	r2, #0
 800a83e:	2101      	movs	r1, #1
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff ff23 	bl	800a68c <SPI_WaitFlagStateUntilTimeout>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a850:	f043 0220 	orr.w	r2, r3, #32
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a858:	2303      	movs	r3, #3
 800a85a:	e000      	b.n	800a85e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a874:	4b1b      	ldr	r3, [pc, #108]	; (800a8e4 <SPI_EndRxTxTransaction+0x7c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a1b      	ldr	r2, [pc, #108]	; (800a8e8 <SPI_EndRxTxTransaction+0x80>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	0d5b      	lsrs	r3, r3, #21
 800a880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a884:	fb02 f303 	mul.w	r3, r2, r3
 800a888:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a892:	d112      	bne.n	800a8ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2200      	movs	r2, #0
 800a89c:	2180      	movs	r1, #128	; 0x80
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fef4 	bl	800a68c <SPI_WaitFlagStateUntilTimeout>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d016      	beq.n	800a8d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	f043 0220 	orr.w	r2, r3, #32
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e00f      	b.n	800a8da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d0:	2b80      	cmp	r3, #128	; 0x80
 800a8d2:	d0f2      	beq.n	800a8ba <SPI_EndRxTxTransaction+0x52>
 800a8d4:	e000      	b.n	800a8d8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a8d6:	bf00      	nop
  }

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000000 	.word	0x20000000
 800a8e8:	165e9f81 	.word	0x165e9f81

0800a8ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e03f      	b.n	800a97e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7fd fc80 	bl	8008218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2224      	movs	r2, #36	; 0x24
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a92e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f929 	bl	800ab88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	695a      	ldr	r2, [r3, #20]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b08a      	sub	sp, #40	; 0x28
 800a98a:	af02      	add	r7, sp, #8
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	4613      	mov	r3, r2
 800a994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d17c      	bne.n	800aaa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <HAL_UART_Transmit+0x2c>
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e075      	b.n	800aaa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_UART_Transmit+0x3e>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e06e      	b.n	800aaa2 <HAL_UART_Transmit+0x11c>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2221      	movs	r2, #33	; 0x21
 800a9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9da:	f7fd fe15 	bl	8008608 <HAL_GetTick>
 800a9de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	88fa      	ldrh	r2, [r7, #6]
 800a9e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	88fa      	ldrh	r2, [r7, #6]
 800a9ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f4:	d108      	bne.n	800aa08 <HAL_UART_Transmit+0x82>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	61bb      	str	r3, [r7, #24]
 800aa06:	e003      	b.n	800aa10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aa18:	e02a      	b.n	800aa70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2200      	movs	r2, #0
 800aa22:	2180      	movs	r1, #128	; 0x80
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f840 	bl	800aaaa <UART_WaitOnFlagUntilTimeout>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e036      	b.n	800aaa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	61bb      	str	r3, [r7, #24]
 800aa50:	e007      	b.n	800aa62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1cf      	bne.n	800aa1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2200      	movs	r2, #0
 800aa82:	2140      	movs	r1, #64	; 0x40
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f810 	bl	800aaaa <UART_WaitOnFlagUntilTimeout>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e006      	b.n	800aaa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e000      	b.n	800aaa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aaa0:	2302      	movs	r3, #2
  }
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b090      	sub	sp, #64	; 0x40
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	603b      	str	r3, [r7, #0]
 800aab6:	4613      	mov	r3, r2
 800aab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaba:	e050      	b.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac2:	d04c      	beq.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d007      	beq.n	800aada <UART_WaitOnFlagUntilTimeout+0x30>
 800aaca:	f7fd fd9d 	bl	8008608 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d241      	bcs.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	330c      	adds	r3, #12
 800aae0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	e853 3f00 	ldrex	r3, [r3]
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	330c      	adds	r3, #12
 800aaf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aafa:	637a      	str	r2, [r7, #52]	; 0x34
 800aafc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e5      	bne.n	800aada <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3314      	adds	r3, #20
 800ab14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f023 0301 	bic.w	r3, r3, #1
 800ab24:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3314      	adds	r3, #20
 800ab2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab2e:	623a      	str	r2, [r7, #32]
 800ab30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	69f9      	ldr	r1, [r7, #28]
 800ab34:	6a3a      	ldr	r2, [r7, #32]
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e5      	bne.n	800ab0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e00f      	b.n	800ab7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4013      	ands	r3, r2
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	bf0c      	ite	eq
 800ab6e:	2301      	moveq	r3, #1
 800ab70:	2300      	movne	r3, #0
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	79fb      	ldrb	r3, [r7, #7]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d09f      	beq.n	800aabc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3740      	adds	r7, #64	; 0x40
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	b09f      	sub	sp, #124	; 0x7c
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab9e:	68d9      	ldr	r1, [r3, #12]
 800aba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	ea40 0301 	orr.w	r3, r0, r1
 800aba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800abaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	431a      	orrs	r2, r3
 800abb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	431a      	orrs	r2, r3
 800abba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800abc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800abcc:	f021 010c 	bic.w	r1, r1, #12
 800abd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abd6:	430b      	orrs	r3, r1
 800abd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800abe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe6:	6999      	ldr	r1, [r3, #24]
 800abe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	ea40 0301 	orr.w	r3, r0, r1
 800abf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4bc5      	ldr	r3, [pc, #788]	; (800af0c <UART_SetConfig+0x384>)
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d004      	beq.n	800ac06 <UART_SetConfig+0x7e>
 800abfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	4bc3      	ldr	r3, [pc, #780]	; (800af10 <UART_SetConfig+0x388>)
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d103      	bne.n	800ac0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac06:	f7fe ff97 	bl	8009b38 <HAL_RCC_GetPCLK2Freq>
 800ac0a:	6778      	str	r0, [r7, #116]	; 0x74
 800ac0c:	e002      	b.n	800ac14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac0e:	f7fe ff7f 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 800ac12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1c:	f040 80b6 	bne.w	800ad8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac22:	461c      	mov	r4, r3
 800ac24:	f04f 0500 	mov.w	r5, #0
 800ac28:	4622      	mov	r2, r4
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	1891      	adds	r1, r2, r2
 800ac2e:	6439      	str	r1, [r7, #64]	; 0x40
 800ac30:	415b      	adcs	r3, r3
 800ac32:	647b      	str	r3, [r7, #68]	; 0x44
 800ac34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac38:	1912      	adds	r2, r2, r4
 800ac3a:	eb45 0303 	adc.w	r3, r5, r3
 800ac3e:	f04f 0000 	mov.w	r0, #0
 800ac42:	f04f 0100 	mov.w	r1, #0
 800ac46:	00d9      	lsls	r1, r3, #3
 800ac48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac4c:	00d0      	lsls	r0, r2, #3
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	1911      	adds	r1, r2, r4
 800ac54:	6639      	str	r1, [r7, #96]	; 0x60
 800ac56:	416b      	adcs	r3, r5
 800ac58:	667b      	str	r3, [r7, #100]	; 0x64
 800ac5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	1891      	adds	r1, r2, r2
 800ac66:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac68:	415b      	adcs	r3, r3
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ac74:	f7f5 fb14 	bl	80002a0 <__aeabi_uldivmod>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4ba5      	ldr	r3, [pc, #660]	; (800af14 <UART_SetConfig+0x38c>)
 800ac7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac82:	095b      	lsrs	r3, r3, #5
 800ac84:	011e      	lsls	r6, r3, #4
 800ac86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac88:	461c      	mov	r4, r3
 800ac8a:	f04f 0500 	mov.w	r5, #0
 800ac8e:	4622      	mov	r2, r4
 800ac90:	462b      	mov	r3, r5
 800ac92:	1891      	adds	r1, r2, r2
 800ac94:	6339      	str	r1, [r7, #48]	; 0x30
 800ac96:	415b      	adcs	r3, r3
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ac9e:	1912      	adds	r2, r2, r4
 800aca0:	eb45 0303 	adc.w	r3, r5, r3
 800aca4:	f04f 0000 	mov.w	r0, #0
 800aca8:	f04f 0100 	mov.w	r1, #0
 800acac:	00d9      	lsls	r1, r3, #3
 800acae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acb2:	00d0      	lsls	r0, r2, #3
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	1911      	adds	r1, r2, r4
 800acba:	65b9      	str	r1, [r7, #88]	; 0x58
 800acbc:	416b      	adcs	r3, r5
 800acbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	461a      	mov	r2, r3
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	1891      	adds	r1, r2, r2
 800accc:	62b9      	str	r1, [r7, #40]	; 0x28
 800acce:	415b      	adcs	r3, r3
 800acd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800acda:	f7f5 fae1 	bl	80002a0 <__aeabi_uldivmod>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4b8c      	ldr	r3, [pc, #560]	; (800af14 <UART_SetConfig+0x38c>)
 800ace4:	fba3 1302 	umull	r1, r3, r3, r2
 800ace8:	095b      	lsrs	r3, r3, #5
 800acea:	2164      	movs	r1, #100	; 0x64
 800acec:	fb01 f303 	mul.w	r3, r1, r3
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	3332      	adds	r3, #50	; 0x32
 800acf6:	4a87      	ldr	r2, [pc, #540]	; (800af14 <UART_SetConfig+0x38c>)
 800acf8:	fba2 2303 	umull	r2, r3, r2, r3
 800acfc:	095b      	lsrs	r3, r3, #5
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad04:	441e      	add	r6, r3
 800ad06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f04f 0100 	mov.w	r1, #0
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	1894      	adds	r4, r2, r2
 800ad14:	623c      	str	r4, [r7, #32]
 800ad16:	415b      	adcs	r3, r3
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad1e:	1812      	adds	r2, r2, r0
 800ad20:	eb41 0303 	adc.w	r3, r1, r3
 800ad24:	f04f 0400 	mov.w	r4, #0
 800ad28:	f04f 0500 	mov.w	r5, #0
 800ad2c:	00dd      	lsls	r5, r3, #3
 800ad2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad32:	00d4      	lsls	r4, r2, #3
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	1814      	adds	r4, r2, r0
 800ad3a:	653c      	str	r4, [r7, #80]	; 0x50
 800ad3c:	414b      	adcs	r3, r1
 800ad3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	461a      	mov	r2, r3
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	1891      	adds	r1, r2, r2
 800ad4c:	61b9      	str	r1, [r7, #24]
 800ad4e:	415b      	adcs	r3, r3
 800ad50:	61fb      	str	r3, [r7, #28]
 800ad52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ad5a:	f7f5 faa1 	bl	80002a0 <__aeabi_uldivmod>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	4b6c      	ldr	r3, [pc, #432]	; (800af14 <UART_SetConfig+0x38c>)
 800ad64:	fba3 1302 	umull	r1, r3, r3, r2
 800ad68:	095b      	lsrs	r3, r3, #5
 800ad6a:	2164      	movs	r1, #100	; 0x64
 800ad6c:	fb01 f303 	mul.w	r3, r1, r3
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	3332      	adds	r3, #50	; 0x32
 800ad76:	4a67      	ldr	r2, [pc, #412]	; (800af14 <UART_SetConfig+0x38c>)
 800ad78:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7c:	095b      	lsrs	r3, r3, #5
 800ad7e:	f003 0207 	and.w	r2, r3, #7
 800ad82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4432      	add	r2, r6
 800ad88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad8a:	e0b9      	b.n	800af00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad8e:	461c      	mov	r4, r3
 800ad90:	f04f 0500 	mov.w	r5, #0
 800ad94:	4622      	mov	r2, r4
 800ad96:	462b      	mov	r3, r5
 800ad98:	1891      	adds	r1, r2, r2
 800ad9a:	6139      	str	r1, [r7, #16]
 800ad9c:	415b      	adcs	r3, r3
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ada4:	1912      	adds	r2, r2, r4
 800ada6:	eb45 0303 	adc.w	r3, r5, r3
 800adaa:	f04f 0000 	mov.w	r0, #0
 800adae:	f04f 0100 	mov.w	r1, #0
 800adb2:	00d9      	lsls	r1, r3, #3
 800adb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800adb8:	00d0      	lsls	r0, r2, #3
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	eb12 0804 	adds.w	r8, r2, r4
 800adc2:	eb43 0905 	adc.w	r9, r3, r5
 800adc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	f04f 0100 	mov.w	r1, #0
 800add0:	f04f 0200 	mov.w	r2, #0
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	008b      	lsls	r3, r1, #2
 800adda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800adde:	0082      	lsls	r2, r0, #2
 800ade0:	4640      	mov	r0, r8
 800ade2:	4649      	mov	r1, r9
 800ade4:	f7f5 fa5c 	bl	80002a0 <__aeabi_uldivmod>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	4b49      	ldr	r3, [pc, #292]	; (800af14 <UART_SetConfig+0x38c>)
 800adee:	fba3 2302 	umull	r2, r3, r3, r2
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	011e      	lsls	r6, r3, #4
 800adf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adf8:	4618      	mov	r0, r3
 800adfa:	f04f 0100 	mov.w	r1, #0
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	1894      	adds	r4, r2, r2
 800ae04:	60bc      	str	r4, [r7, #8]
 800ae06:	415b      	adcs	r3, r3
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae0e:	1812      	adds	r2, r2, r0
 800ae10:	eb41 0303 	adc.w	r3, r1, r3
 800ae14:	f04f 0400 	mov.w	r4, #0
 800ae18:	f04f 0500 	mov.w	r5, #0
 800ae1c:	00dd      	lsls	r5, r3, #3
 800ae1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ae22:	00d4      	lsls	r4, r2, #3
 800ae24:	4622      	mov	r2, r4
 800ae26:	462b      	mov	r3, r5
 800ae28:	1814      	adds	r4, r2, r0
 800ae2a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ae2c:	414b      	adcs	r3, r1
 800ae2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f04f 0100 	mov.w	r1, #0
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	008b      	lsls	r3, r1, #2
 800ae44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ae48:	0082      	lsls	r2, r0, #2
 800ae4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ae4e:	f7f5 fa27 	bl	80002a0 <__aeabi_uldivmod>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4b2f      	ldr	r3, [pc, #188]	; (800af14 <UART_SetConfig+0x38c>)
 800ae58:	fba3 1302 	umull	r1, r3, r3, r2
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	2164      	movs	r1, #100	; 0x64
 800ae60:	fb01 f303 	mul.w	r3, r1, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	3332      	adds	r3, #50	; 0x32
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <UART_SetConfig+0x38c>)
 800ae6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae76:	441e      	add	r6, r3
 800ae78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f04f 0100 	mov.w	r1, #0
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	1894      	adds	r4, r2, r2
 800ae86:	603c      	str	r4, [r7, #0]
 800ae88:	415b      	adcs	r3, r3
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae90:	1812      	adds	r2, r2, r0
 800ae92:	eb41 0303 	adc.w	r3, r1, r3
 800ae96:	f04f 0400 	mov.w	r4, #0
 800ae9a:	f04f 0500 	mov.w	r5, #0
 800ae9e:	00dd      	lsls	r5, r3, #3
 800aea0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aea4:	00d4      	lsls	r4, r2, #3
 800aea6:	4622      	mov	r2, r4
 800aea8:	462b      	mov	r3, r5
 800aeaa:	eb12 0a00 	adds.w	sl, r2, r0
 800aeae:	eb43 0b01 	adc.w	fp, r3, r1
 800aeb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f04f 0100 	mov.w	r1, #0
 800aebc:	f04f 0200 	mov.w	r2, #0
 800aec0:	f04f 0300 	mov.w	r3, #0
 800aec4:	008b      	lsls	r3, r1, #2
 800aec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aeca:	0082      	lsls	r2, r0, #2
 800aecc:	4650      	mov	r0, sl
 800aece:	4659      	mov	r1, fp
 800aed0:	f7f5 f9e6 	bl	80002a0 <__aeabi_uldivmod>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <UART_SetConfig+0x38c>)
 800aeda:	fba3 1302 	umull	r1, r3, r3, r2
 800aede:	095b      	lsrs	r3, r3, #5
 800aee0:	2164      	movs	r1, #100	; 0x64
 800aee2:	fb01 f303 	mul.w	r3, r1, r3
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	011b      	lsls	r3, r3, #4
 800aeea:	3332      	adds	r3, #50	; 0x32
 800aeec:	4a09      	ldr	r2, [pc, #36]	; (800af14 <UART_SetConfig+0x38c>)
 800aeee:	fba2 2303 	umull	r2, r3, r2, r3
 800aef2:	095b      	lsrs	r3, r3, #5
 800aef4:	f003 020f 	and.w	r2, r3, #15
 800aef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4432      	add	r2, r6
 800aefe:	609a      	str	r2, [r3, #8]
}
 800af00:	bf00      	nop
 800af02:	377c      	adds	r7, #124	; 0x7c
 800af04:	46bd      	mov	sp, r7
 800af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0a:	bf00      	nop
 800af0c:	40011000 	.word	0x40011000
 800af10:	40011400 	.word	0x40011400
 800af14:	51eb851f 	.word	0x51eb851f

0800af18 <__assert_func>:
 800af18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af1a:	4614      	mov	r4, r2
 800af1c:	461a      	mov	r2, r3
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <__assert_func+0x2c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4605      	mov	r5, r0
 800af24:	68d8      	ldr	r0, [r3, #12]
 800af26:	b14c      	cbz	r4, 800af3c <__assert_func+0x24>
 800af28:	4b07      	ldr	r3, [pc, #28]	; (800af48 <__assert_func+0x30>)
 800af2a:	9100      	str	r1, [sp, #0]
 800af2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af30:	4906      	ldr	r1, [pc, #24]	; (800af4c <__assert_func+0x34>)
 800af32:	462b      	mov	r3, r5
 800af34:	f000 f814 	bl	800af60 <fiprintf>
 800af38:	f000 fd4a 	bl	800b9d0 <abort>
 800af3c:	4b04      	ldr	r3, [pc, #16]	; (800af50 <__assert_func+0x38>)
 800af3e:	461c      	mov	r4, r3
 800af40:	e7f3      	b.n	800af2a <__assert_func+0x12>
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c
 800af48:	0800d024 	.word	0x0800d024
 800af4c:	0800d031 	.word	0x0800d031
 800af50:	0800d05f 	.word	0x0800d05f

0800af54 <__errno>:
 800af54:	4b01      	ldr	r3, [pc, #4]	; (800af5c <__errno+0x8>)
 800af56:	6818      	ldr	r0, [r3, #0]
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	2000000c 	.word	0x2000000c

0800af60 <fiprintf>:
 800af60:	b40e      	push	{r1, r2, r3}
 800af62:	b503      	push	{r0, r1, lr}
 800af64:	4601      	mov	r1, r0
 800af66:	ab03      	add	r3, sp, #12
 800af68:	4805      	ldr	r0, [pc, #20]	; (800af80 <fiprintf+0x20>)
 800af6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af6e:	6800      	ldr	r0, [r0, #0]
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	f000 f933 	bl	800b1dc <_vfiprintf_r>
 800af76:	b002      	add	sp, #8
 800af78:	f85d eb04 	ldr.w	lr, [sp], #4
 800af7c:	b003      	add	sp, #12
 800af7e:	4770      	bx	lr
 800af80:	2000000c 	.word	0x2000000c

0800af84 <__libc_init_array>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4d0d      	ldr	r5, [pc, #52]	; (800afbc <__libc_init_array+0x38>)
 800af88:	4c0d      	ldr	r4, [pc, #52]	; (800afc0 <__libc_init_array+0x3c>)
 800af8a:	1b64      	subs	r4, r4, r5
 800af8c:	10a4      	asrs	r4, r4, #2
 800af8e:	2600      	movs	r6, #0
 800af90:	42a6      	cmp	r6, r4
 800af92:	d109      	bne.n	800afa8 <__libc_init_array+0x24>
 800af94:	4d0b      	ldr	r5, [pc, #44]	; (800afc4 <__libc_init_array+0x40>)
 800af96:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <__libc_init_array+0x44>)
 800af98:	f001 f9e0 	bl	800c35c <_init>
 800af9c:	1b64      	subs	r4, r4, r5
 800af9e:	10a4      	asrs	r4, r4, #2
 800afa0:	2600      	movs	r6, #0
 800afa2:	42a6      	cmp	r6, r4
 800afa4:	d105      	bne.n	800afb2 <__libc_init_array+0x2e>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afac:	4798      	blx	r3
 800afae:	3601      	adds	r6, #1
 800afb0:	e7ee      	b.n	800af90 <__libc_init_array+0xc>
 800afb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb6:	4798      	blx	r3
 800afb8:	3601      	adds	r6, #1
 800afba:	e7f2      	b.n	800afa2 <__libc_init_array+0x1e>
 800afbc:	0800d100 	.word	0x0800d100
 800afc0:	0800d100 	.word	0x0800d100
 800afc4:	0800d100 	.word	0x0800d100
 800afc8:	0800d104 	.word	0x0800d104

0800afcc <malloc>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <malloc+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f000 b87f 	b.w	800b0d4 <_malloc_r>
 800afd6:	bf00      	nop
 800afd8:	2000000c 	.word	0x2000000c

0800afdc <free>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <free+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f000 b827 	b.w	800b034 <_free_r>
 800afe6:	bf00      	nop
 800afe8:	2000000c 	.word	0x2000000c

0800afec <memcmp>:
 800afec:	b530      	push	{r4, r5, lr}
 800afee:	3901      	subs	r1, #1
 800aff0:	2400      	movs	r4, #0
 800aff2:	42a2      	cmp	r2, r4
 800aff4:	d101      	bne.n	800affa <memcmp+0xe>
 800aff6:	2000      	movs	r0, #0
 800aff8:	e005      	b.n	800b006 <memcmp+0x1a>
 800affa:	5d03      	ldrb	r3, [r0, r4]
 800affc:	3401      	adds	r4, #1
 800affe:	5d0d      	ldrb	r5, [r1, r4]
 800b000:	42ab      	cmp	r3, r5
 800b002:	d0f6      	beq.n	800aff2 <memcmp+0x6>
 800b004:	1b58      	subs	r0, r3, r5
 800b006:	bd30      	pop	{r4, r5, pc}

0800b008 <memcpy>:
 800b008:	440a      	add	r2, r1
 800b00a:	4291      	cmp	r1, r2
 800b00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b010:	d100      	bne.n	800b014 <memcpy+0xc>
 800b012:	4770      	bx	lr
 800b014:	b510      	push	{r4, lr}
 800b016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b01e:	4291      	cmp	r1, r2
 800b020:	d1f9      	bne.n	800b016 <memcpy+0xe>
 800b022:	bd10      	pop	{r4, pc}

0800b024 <memset>:
 800b024:	4402      	add	r2, r0
 800b026:	4603      	mov	r3, r0
 800b028:	4293      	cmp	r3, r2
 800b02a:	d100      	bne.n	800b02e <memset+0xa>
 800b02c:	4770      	bx	lr
 800b02e:	f803 1b01 	strb.w	r1, [r3], #1
 800b032:	e7f9      	b.n	800b028 <memset+0x4>

0800b034 <_free_r>:
 800b034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b036:	2900      	cmp	r1, #0
 800b038:	d048      	beq.n	800b0cc <_free_r+0x98>
 800b03a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b03e:	9001      	str	r0, [sp, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f1a1 0404 	sub.w	r4, r1, #4
 800b046:	bfb8      	it	lt
 800b048:	18e4      	addlt	r4, r4, r3
 800b04a:	f000 ff01 	bl	800be50 <__malloc_lock>
 800b04e:	4a20      	ldr	r2, [pc, #128]	; (800b0d0 <_free_r+0x9c>)
 800b050:	9801      	ldr	r0, [sp, #4]
 800b052:	6813      	ldr	r3, [r2, #0]
 800b054:	4615      	mov	r5, r2
 800b056:	b933      	cbnz	r3, 800b066 <_free_r+0x32>
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6014      	str	r4, [r2, #0]
 800b05c:	b003      	add	sp, #12
 800b05e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b062:	f000 befb 	b.w	800be5c <__malloc_unlock>
 800b066:	42a3      	cmp	r3, r4
 800b068:	d90b      	bls.n	800b082 <_free_r+0x4e>
 800b06a:	6821      	ldr	r1, [r4, #0]
 800b06c:	1862      	adds	r2, r4, r1
 800b06e:	4293      	cmp	r3, r2
 800b070:	bf04      	itt	eq
 800b072:	681a      	ldreq	r2, [r3, #0]
 800b074:	685b      	ldreq	r3, [r3, #4]
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	bf04      	itt	eq
 800b07a:	1852      	addeq	r2, r2, r1
 800b07c:	6022      	streq	r2, [r4, #0]
 800b07e:	602c      	str	r4, [r5, #0]
 800b080:	e7ec      	b.n	800b05c <_free_r+0x28>
 800b082:	461a      	mov	r2, r3
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	b10b      	cbz	r3, 800b08c <_free_r+0x58>
 800b088:	42a3      	cmp	r3, r4
 800b08a:	d9fa      	bls.n	800b082 <_free_r+0x4e>
 800b08c:	6811      	ldr	r1, [r2, #0]
 800b08e:	1855      	adds	r5, r2, r1
 800b090:	42a5      	cmp	r5, r4
 800b092:	d10b      	bne.n	800b0ac <_free_r+0x78>
 800b094:	6824      	ldr	r4, [r4, #0]
 800b096:	4421      	add	r1, r4
 800b098:	1854      	adds	r4, r2, r1
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	6011      	str	r1, [r2, #0]
 800b09e:	d1dd      	bne.n	800b05c <_free_r+0x28>
 800b0a0:	681c      	ldr	r4, [r3, #0]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	6053      	str	r3, [r2, #4]
 800b0a6:	4421      	add	r1, r4
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	e7d7      	b.n	800b05c <_free_r+0x28>
 800b0ac:	d902      	bls.n	800b0b4 <_free_r+0x80>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6003      	str	r3, [r0, #0]
 800b0b2:	e7d3      	b.n	800b05c <_free_r+0x28>
 800b0b4:	6825      	ldr	r5, [r4, #0]
 800b0b6:	1961      	adds	r1, r4, r5
 800b0b8:	428b      	cmp	r3, r1
 800b0ba:	bf04      	itt	eq
 800b0bc:	6819      	ldreq	r1, [r3, #0]
 800b0be:	685b      	ldreq	r3, [r3, #4]
 800b0c0:	6063      	str	r3, [r4, #4]
 800b0c2:	bf04      	itt	eq
 800b0c4:	1949      	addeq	r1, r1, r5
 800b0c6:	6021      	streq	r1, [r4, #0]
 800b0c8:	6054      	str	r4, [r2, #4]
 800b0ca:	e7c7      	b.n	800b05c <_free_r+0x28>
 800b0cc:	b003      	add	sp, #12
 800b0ce:	bd30      	pop	{r4, r5, pc}
 800b0d0:	200000e8 	.word	0x200000e8

0800b0d4 <_malloc_r>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	1ccd      	adds	r5, r1, #3
 800b0d8:	f025 0503 	bic.w	r5, r5, #3
 800b0dc:	3508      	adds	r5, #8
 800b0de:	2d0c      	cmp	r5, #12
 800b0e0:	bf38      	it	cc
 800b0e2:	250c      	movcc	r5, #12
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	db01      	blt.n	800b0ee <_malloc_r+0x1a>
 800b0ea:	42a9      	cmp	r1, r5
 800b0ec:	d903      	bls.n	800b0f6 <_malloc_r+0x22>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f6:	f000 feab 	bl	800be50 <__malloc_lock>
 800b0fa:	4921      	ldr	r1, [pc, #132]	; (800b180 <_malloc_r+0xac>)
 800b0fc:	680a      	ldr	r2, [r1, #0]
 800b0fe:	4614      	mov	r4, r2
 800b100:	b99c      	cbnz	r4, 800b12a <_malloc_r+0x56>
 800b102:	4f20      	ldr	r7, [pc, #128]	; (800b184 <_malloc_r+0xb0>)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	b923      	cbnz	r3, 800b112 <_malloc_r+0x3e>
 800b108:	4621      	mov	r1, r4
 800b10a:	4630      	mov	r0, r6
 800b10c:	f000 fb42 	bl	800b794 <_sbrk_r>
 800b110:	6038      	str	r0, [r7, #0]
 800b112:	4629      	mov	r1, r5
 800b114:	4630      	mov	r0, r6
 800b116:	f000 fb3d 	bl	800b794 <_sbrk_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d123      	bne.n	800b166 <_malloc_r+0x92>
 800b11e:	230c      	movs	r3, #12
 800b120:	6033      	str	r3, [r6, #0]
 800b122:	4630      	mov	r0, r6
 800b124:	f000 fe9a 	bl	800be5c <__malloc_unlock>
 800b128:	e7e3      	b.n	800b0f2 <_malloc_r+0x1e>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	1b5b      	subs	r3, r3, r5
 800b12e:	d417      	bmi.n	800b160 <_malloc_r+0x8c>
 800b130:	2b0b      	cmp	r3, #11
 800b132:	d903      	bls.n	800b13c <_malloc_r+0x68>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	441c      	add	r4, r3
 800b138:	6025      	str	r5, [r4, #0]
 800b13a:	e004      	b.n	800b146 <_malloc_r+0x72>
 800b13c:	6863      	ldr	r3, [r4, #4]
 800b13e:	42a2      	cmp	r2, r4
 800b140:	bf0c      	ite	eq
 800b142:	600b      	streq	r3, [r1, #0]
 800b144:	6053      	strne	r3, [r2, #4]
 800b146:	4630      	mov	r0, r6
 800b148:	f000 fe88 	bl	800be5c <__malloc_unlock>
 800b14c:	f104 000b 	add.w	r0, r4, #11
 800b150:	1d23      	adds	r3, r4, #4
 800b152:	f020 0007 	bic.w	r0, r0, #7
 800b156:	1ac2      	subs	r2, r0, r3
 800b158:	d0cc      	beq.n	800b0f4 <_malloc_r+0x20>
 800b15a:	1a1b      	subs	r3, r3, r0
 800b15c:	50a3      	str	r3, [r4, r2]
 800b15e:	e7c9      	b.n	800b0f4 <_malloc_r+0x20>
 800b160:	4622      	mov	r2, r4
 800b162:	6864      	ldr	r4, [r4, #4]
 800b164:	e7cc      	b.n	800b100 <_malloc_r+0x2c>
 800b166:	1cc4      	adds	r4, r0, #3
 800b168:	f024 0403 	bic.w	r4, r4, #3
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d0e3      	beq.n	800b138 <_malloc_r+0x64>
 800b170:	1a21      	subs	r1, r4, r0
 800b172:	4630      	mov	r0, r6
 800b174:	f000 fb0e 	bl	800b794 <_sbrk_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	d1dd      	bne.n	800b138 <_malloc_r+0x64>
 800b17c:	e7cf      	b.n	800b11e <_malloc_r+0x4a>
 800b17e:	bf00      	nop
 800b180:	200000e8 	.word	0x200000e8
 800b184:	200000ec 	.word	0x200000ec

0800b188 <__sfputc_r>:
 800b188:	6893      	ldr	r3, [r2, #8]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	b410      	push	{r4}
 800b190:	6093      	str	r3, [r2, #8]
 800b192:	da08      	bge.n	800b1a6 <__sfputc_r+0x1e>
 800b194:	6994      	ldr	r4, [r2, #24]
 800b196:	42a3      	cmp	r3, r4
 800b198:	db01      	blt.n	800b19e <__sfputc_r+0x16>
 800b19a:	290a      	cmp	r1, #10
 800b19c:	d103      	bne.n	800b1a6 <__sfputc_r+0x1e>
 800b19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a2:	f000 bb55 	b.w	800b850 <__swbuf_r>
 800b1a6:	6813      	ldr	r3, [r2, #0]
 800b1a8:	1c58      	adds	r0, r3, #1
 800b1aa:	6010      	str	r0, [r2, #0]
 800b1ac:	7019      	strb	r1, [r3, #0]
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <__sfputs_r>:
 800b1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b8:	4606      	mov	r6, r0
 800b1ba:	460f      	mov	r7, r1
 800b1bc:	4614      	mov	r4, r2
 800b1be:	18d5      	adds	r5, r2, r3
 800b1c0:	42ac      	cmp	r4, r5
 800b1c2:	d101      	bne.n	800b1c8 <__sfputs_r+0x12>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	e007      	b.n	800b1d8 <__sfputs_r+0x22>
 800b1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1cc:	463a      	mov	r2, r7
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff ffda 	bl	800b188 <__sfputc_r>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d1f3      	bne.n	800b1c0 <__sfputs_r+0xa>
 800b1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1dc <_vfiprintf_r>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	b09d      	sub	sp, #116	; 0x74
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4698      	mov	r8, r3
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	b118      	cbz	r0, 800b1f4 <_vfiprintf_r+0x18>
 800b1ec:	6983      	ldr	r3, [r0, #24]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <_vfiprintf_r+0x18>
 800b1f0:	f000 fd10 	bl	800bc14 <__sinit>
 800b1f4:	4b89      	ldr	r3, [pc, #548]	; (800b41c <_vfiprintf_r+0x240>)
 800b1f6:	429d      	cmp	r5, r3
 800b1f8:	d11b      	bne.n	800b232 <_vfiprintf_r+0x56>
 800b1fa:	6875      	ldr	r5, [r6, #4]
 800b1fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1fe:	07d9      	lsls	r1, r3, #31
 800b200:	d405      	bmi.n	800b20e <_vfiprintf_r+0x32>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	059a      	lsls	r2, r3, #22
 800b206:	d402      	bmi.n	800b20e <_vfiprintf_r+0x32>
 800b208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20a:	f000 fda1 	bl	800bd50 <__retarget_lock_acquire_recursive>
 800b20e:	89ab      	ldrh	r3, [r5, #12]
 800b210:	071b      	lsls	r3, r3, #28
 800b212:	d501      	bpl.n	800b218 <_vfiprintf_r+0x3c>
 800b214:	692b      	ldr	r3, [r5, #16]
 800b216:	b9eb      	cbnz	r3, 800b254 <_vfiprintf_r+0x78>
 800b218:	4629      	mov	r1, r5
 800b21a:	4630      	mov	r0, r6
 800b21c:	f000 fb6a 	bl	800b8f4 <__swsetup_r>
 800b220:	b1c0      	cbz	r0, 800b254 <_vfiprintf_r+0x78>
 800b222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b224:	07dc      	lsls	r4, r3, #31
 800b226:	d50e      	bpl.n	800b246 <_vfiprintf_r+0x6a>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	b01d      	add	sp, #116	; 0x74
 800b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	4b7b      	ldr	r3, [pc, #492]	; (800b420 <_vfiprintf_r+0x244>)
 800b234:	429d      	cmp	r5, r3
 800b236:	d101      	bne.n	800b23c <_vfiprintf_r+0x60>
 800b238:	68b5      	ldr	r5, [r6, #8]
 800b23a:	e7df      	b.n	800b1fc <_vfiprintf_r+0x20>
 800b23c:	4b79      	ldr	r3, [pc, #484]	; (800b424 <_vfiprintf_r+0x248>)
 800b23e:	429d      	cmp	r5, r3
 800b240:	bf08      	it	eq
 800b242:	68f5      	ldreq	r5, [r6, #12]
 800b244:	e7da      	b.n	800b1fc <_vfiprintf_r+0x20>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	0598      	lsls	r0, r3, #22
 800b24a:	d4ed      	bmi.n	800b228 <_vfiprintf_r+0x4c>
 800b24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24e:	f000 fd80 	bl	800bd52 <__retarget_lock_release_recursive>
 800b252:	e7e9      	b.n	800b228 <_vfiprintf_r+0x4c>
 800b254:	2300      	movs	r3, #0
 800b256:	9309      	str	r3, [sp, #36]	; 0x24
 800b258:	2320      	movs	r3, #32
 800b25a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b262:	2330      	movs	r3, #48	; 0x30
 800b264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b428 <_vfiprintf_r+0x24c>
 800b268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b26c:	f04f 0901 	mov.w	r9, #1
 800b270:	4623      	mov	r3, r4
 800b272:	469a      	mov	sl, r3
 800b274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b278:	b10a      	cbz	r2, 800b27e <_vfiprintf_r+0xa2>
 800b27a:	2a25      	cmp	r2, #37	; 0x25
 800b27c:	d1f9      	bne.n	800b272 <_vfiprintf_r+0x96>
 800b27e:	ebba 0b04 	subs.w	fp, sl, r4
 800b282:	d00b      	beq.n	800b29c <_vfiprintf_r+0xc0>
 800b284:	465b      	mov	r3, fp
 800b286:	4622      	mov	r2, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7ff ff93 	bl	800b1b6 <__sfputs_r>
 800b290:	3001      	adds	r0, #1
 800b292:	f000 80aa 	beq.w	800b3ea <_vfiprintf_r+0x20e>
 800b296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b298:	445a      	add	r2, fp
 800b29a:	9209      	str	r2, [sp, #36]	; 0x24
 800b29c:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 80a2 	beq.w	800b3ea <_vfiprintf_r+0x20e>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2b0:	f10a 0a01 	add.w	sl, sl, #1
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2be:	4654      	mov	r4, sl
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	4858      	ldr	r0, [pc, #352]	; (800b428 <_vfiprintf_r+0x24c>)
 800b2c8:	f7f4 ff9a 	bl	8000200 <memchr>
 800b2cc:	9a04      	ldr	r2, [sp, #16]
 800b2ce:	b9d8      	cbnz	r0, 800b308 <_vfiprintf_r+0x12c>
 800b2d0:	06d1      	lsls	r1, r2, #27
 800b2d2:	bf44      	itt	mi
 800b2d4:	2320      	movmi	r3, #32
 800b2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2da:	0713      	lsls	r3, r2, #28
 800b2dc:	bf44      	itt	mi
 800b2de:	232b      	movmi	r3, #43	; 0x2b
 800b2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ea:	d015      	beq.n	800b318 <_vfiprintf_r+0x13c>
 800b2ec:	9a07      	ldr	r2, [sp, #28]
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f04f 0c0a 	mov.w	ip, #10
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2fc:	3b30      	subs	r3, #48	; 0x30
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d94e      	bls.n	800b3a0 <_vfiprintf_r+0x1c4>
 800b302:	b1b0      	cbz	r0, 800b332 <_vfiprintf_r+0x156>
 800b304:	9207      	str	r2, [sp, #28]
 800b306:	e014      	b.n	800b332 <_vfiprintf_r+0x156>
 800b308:	eba0 0308 	sub.w	r3, r0, r8
 800b30c:	fa09 f303 	lsl.w	r3, r9, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	46a2      	mov	sl, r4
 800b316:	e7d2      	b.n	800b2be <_vfiprintf_r+0xe2>
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	1d19      	adds	r1, r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	9103      	str	r1, [sp, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfbb      	ittet	lt
 800b324:	425b      	neglt	r3, r3
 800b326:	f042 0202 	orrlt.w	r2, r2, #2
 800b32a:	9307      	strge	r3, [sp, #28]
 800b32c:	9307      	strlt	r3, [sp, #28]
 800b32e:	bfb8      	it	lt
 800b330:	9204      	strlt	r2, [sp, #16]
 800b332:	7823      	ldrb	r3, [r4, #0]
 800b334:	2b2e      	cmp	r3, #46	; 0x2e
 800b336:	d10c      	bne.n	800b352 <_vfiprintf_r+0x176>
 800b338:	7863      	ldrb	r3, [r4, #1]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d135      	bne.n	800b3aa <_vfiprintf_r+0x1ce>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	9203      	str	r2, [sp, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfb8      	it	lt
 800b34a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b34e:	3402      	adds	r4, #2
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b438 <_vfiprintf_r+0x25c>
 800b356:	7821      	ldrb	r1, [r4, #0]
 800b358:	2203      	movs	r2, #3
 800b35a:	4650      	mov	r0, sl
 800b35c:	f7f4 ff50 	bl	8000200 <memchr>
 800b360:	b140      	cbz	r0, 800b374 <_vfiprintf_r+0x198>
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	eba0 000a 	sub.w	r0, r0, sl
 800b368:	fa03 f000 	lsl.w	r0, r3, r0
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	4303      	orrs	r3, r0
 800b370:	3401      	adds	r4, #1
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b378:	482c      	ldr	r0, [pc, #176]	; (800b42c <_vfiprintf_r+0x250>)
 800b37a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b37e:	2206      	movs	r2, #6
 800b380:	f7f4 ff3e 	bl	8000200 <memchr>
 800b384:	2800      	cmp	r0, #0
 800b386:	d03f      	beq.n	800b408 <_vfiprintf_r+0x22c>
 800b388:	4b29      	ldr	r3, [pc, #164]	; (800b430 <_vfiprintf_r+0x254>)
 800b38a:	bb1b      	cbnz	r3, 800b3d4 <_vfiprintf_r+0x1f8>
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	3307      	adds	r3, #7
 800b390:	f023 0307 	bic.w	r3, r3, #7
 800b394:	3308      	adds	r3, #8
 800b396:	9303      	str	r3, [sp, #12]
 800b398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39a:	443b      	add	r3, r7
 800b39c:	9309      	str	r3, [sp, #36]	; 0x24
 800b39e:	e767      	b.n	800b270 <_vfiprintf_r+0x94>
 800b3a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	e7a5      	b.n	800b2f6 <_vfiprintf_r+0x11a>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	3401      	adds	r4, #1
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	f04f 0c0a 	mov.w	ip, #10
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3bc:	3a30      	subs	r2, #48	; 0x30
 800b3be:	2a09      	cmp	r2, #9
 800b3c0:	d903      	bls.n	800b3ca <_vfiprintf_r+0x1ee>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0c5      	beq.n	800b352 <_vfiprintf_r+0x176>
 800b3c6:	9105      	str	r1, [sp, #20]
 800b3c8:	e7c3      	b.n	800b352 <_vfiprintf_r+0x176>
 800b3ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e7f0      	b.n	800b3b6 <_vfiprintf_r+0x1da>
 800b3d4:	ab03      	add	r3, sp, #12
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4b16      	ldr	r3, [pc, #88]	; (800b434 <_vfiprintf_r+0x258>)
 800b3dc:	a904      	add	r1, sp, #16
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f3af 8000 	nop.w
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	1c78      	adds	r0, r7, #1
 800b3e8:	d1d6      	bne.n	800b398 <_vfiprintf_r+0x1bc>
 800b3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ec:	07d9      	lsls	r1, r3, #31
 800b3ee:	d405      	bmi.n	800b3fc <_vfiprintf_r+0x220>
 800b3f0:	89ab      	ldrh	r3, [r5, #12]
 800b3f2:	059a      	lsls	r2, r3, #22
 800b3f4:	d402      	bmi.n	800b3fc <_vfiprintf_r+0x220>
 800b3f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f8:	f000 fcab 	bl	800bd52 <__retarget_lock_release_recursive>
 800b3fc:	89ab      	ldrh	r3, [r5, #12]
 800b3fe:	065b      	lsls	r3, r3, #25
 800b400:	f53f af12 	bmi.w	800b228 <_vfiprintf_r+0x4c>
 800b404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b406:	e711      	b.n	800b22c <_vfiprintf_r+0x50>
 800b408:	ab03      	add	r3, sp, #12
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4b09      	ldr	r3, [pc, #36]	; (800b434 <_vfiprintf_r+0x258>)
 800b410:	a904      	add	r1, sp, #16
 800b412:	4630      	mov	r0, r6
 800b414:	f000 f880 	bl	800b518 <_printf_i>
 800b418:	e7e4      	b.n	800b3e4 <_vfiprintf_r+0x208>
 800b41a:	bf00      	nop
 800b41c:	0800d0b8 	.word	0x0800d0b8
 800b420:	0800d0d8 	.word	0x0800d0d8
 800b424:	0800d098 	.word	0x0800d098
 800b428:	0800d064 	.word	0x0800d064
 800b42c:	0800d06e 	.word	0x0800d06e
 800b430:	00000000 	.word	0x00000000
 800b434:	0800b1b7 	.word	0x0800b1b7
 800b438:	0800d06a 	.word	0x0800d06a

0800b43c <_printf_common>:
 800b43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b440:	4616      	mov	r6, r2
 800b442:	4699      	mov	r9, r3
 800b444:	688a      	ldr	r2, [r1, #8]
 800b446:	690b      	ldr	r3, [r1, #16]
 800b448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b44c:	4293      	cmp	r3, r2
 800b44e:	bfb8      	it	lt
 800b450:	4613      	movlt	r3, r2
 800b452:	6033      	str	r3, [r6, #0]
 800b454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b458:	4607      	mov	r7, r0
 800b45a:	460c      	mov	r4, r1
 800b45c:	b10a      	cbz	r2, 800b462 <_printf_common+0x26>
 800b45e:	3301      	adds	r3, #1
 800b460:	6033      	str	r3, [r6, #0]
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	0699      	lsls	r1, r3, #26
 800b466:	bf42      	ittt	mi
 800b468:	6833      	ldrmi	r3, [r6, #0]
 800b46a:	3302      	addmi	r3, #2
 800b46c:	6033      	strmi	r3, [r6, #0]
 800b46e:	6825      	ldr	r5, [r4, #0]
 800b470:	f015 0506 	ands.w	r5, r5, #6
 800b474:	d106      	bne.n	800b484 <_printf_common+0x48>
 800b476:	f104 0a19 	add.w	sl, r4, #25
 800b47a:	68e3      	ldr	r3, [r4, #12]
 800b47c:	6832      	ldr	r2, [r6, #0]
 800b47e:	1a9b      	subs	r3, r3, r2
 800b480:	42ab      	cmp	r3, r5
 800b482:	dc26      	bgt.n	800b4d2 <_printf_common+0x96>
 800b484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b488:	1e13      	subs	r3, r2, #0
 800b48a:	6822      	ldr	r2, [r4, #0]
 800b48c:	bf18      	it	ne
 800b48e:	2301      	movne	r3, #1
 800b490:	0692      	lsls	r2, r2, #26
 800b492:	d42b      	bmi.n	800b4ec <_printf_common+0xb0>
 800b494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b498:	4649      	mov	r1, r9
 800b49a:	4638      	mov	r0, r7
 800b49c:	47c0      	blx	r8
 800b49e:	3001      	adds	r0, #1
 800b4a0:	d01e      	beq.n	800b4e0 <_printf_common+0xa4>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	68e5      	ldr	r5, [r4, #12]
 800b4a6:	6832      	ldr	r2, [r6, #0]
 800b4a8:	f003 0306 	and.w	r3, r3, #6
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	bf08      	it	eq
 800b4b0:	1aad      	subeq	r5, r5, r2
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	6922      	ldr	r2, [r4, #16]
 800b4b6:	bf0c      	ite	eq
 800b4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4bc:	2500      	movne	r5, #0
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	bfc4      	itt	gt
 800b4c2:	1a9b      	subgt	r3, r3, r2
 800b4c4:	18ed      	addgt	r5, r5, r3
 800b4c6:	2600      	movs	r6, #0
 800b4c8:	341a      	adds	r4, #26
 800b4ca:	42b5      	cmp	r5, r6
 800b4cc:	d11a      	bne.n	800b504 <_printf_common+0xc8>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	e008      	b.n	800b4e4 <_printf_common+0xa8>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4652      	mov	r2, sl
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4638      	mov	r0, r7
 800b4da:	47c0      	blx	r8
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d103      	bne.n	800b4e8 <_printf_common+0xac>
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	e7c6      	b.n	800b47a <_printf_common+0x3e>
 800b4ec:	18e1      	adds	r1, r4, r3
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	2030      	movs	r0, #48	; 0x30
 800b4f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4f6:	4422      	add	r2, r4
 800b4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b500:	3302      	adds	r3, #2
 800b502:	e7c7      	b.n	800b494 <_printf_common+0x58>
 800b504:	2301      	movs	r3, #1
 800b506:	4622      	mov	r2, r4
 800b508:	4649      	mov	r1, r9
 800b50a:	4638      	mov	r0, r7
 800b50c:	47c0      	blx	r8
 800b50e:	3001      	adds	r0, #1
 800b510:	d0e6      	beq.n	800b4e0 <_printf_common+0xa4>
 800b512:	3601      	adds	r6, #1
 800b514:	e7d9      	b.n	800b4ca <_printf_common+0x8e>
	...

0800b518 <_printf_i>:
 800b518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	460c      	mov	r4, r1
 800b51e:	4691      	mov	r9, r2
 800b520:	7e27      	ldrb	r7, [r4, #24]
 800b522:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b524:	2f78      	cmp	r7, #120	; 0x78
 800b526:	4680      	mov	r8, r0
 800b528:	469a      	mov	sl, r3
 800b52a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b52e:	d807      	bhi.n	800b540 <_printf_i+0x28>
 800b530:	2f62      	cmp	r7, #98	; 0x62
 800b532:	d80a      	bhi.n	800b54a <_printf_i+0x32>
 800b534:	2f00      	cmp	r7, #0
 800b536:	f000 80d8 	beq.w	800b6ea <_printf_i+0x1d2>
 800b53a:	2f58      	cmp	r7, #88	; 0x58
 800b53c:	f000 80a3 	beq.w	800b686 <_printf_i+0x16e>
 800b540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b548:	e03a      	b.n	800b5c0 <_printf_i+0xa8>
 800b54a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b54e:	2b15      	cmp	r3, #21
 800b550:	d8f6      	bhi.n	800b540 <_printf_i+0x28>
 800b552:	a001      	add	r0, pc, #4	; (adr r0, 800b558 <_printf_i+0x40>)
 800b554:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5c5 	.word	0x0800b5c5
 800b560:	0800b541 	.word	0x0800b541
 800b564:	0800b541 	.word	0x0800b541
 800b568:	0800b541 	.word	0x0800b541
 800b56c:	0800b541 	.word	0x0800b541
 800b570:	0800b5c5 	.word	0x0800b5c5
 800b574:	0800b541 	.word	0x0800b541
 800b578:	0800b541 	.word	0x0800b541
 800b57c:	0800b541 	.word	0x0800b541
 800b580:	0800b541 	.word	0x0800b541
 800b584:	0800b6d1 	.word	0x0800b6d1
 800b588:	0800b5f5 	.word	0x0800b5f5
 800b58c:	0800b6b3 	.word	0x0800b6b3
 800b590:	0800b541 	.word	0x0800b541
 800b594:	0800b541 	.word	0x0800b541
 800b598:	0800b6f3 	.word	0x0800b6f3
 800b59c:	0800b541 	.word	0x0800b541
 800b5a0:	0800b5f5 	.word	0x0800b5f5
 800b5a4:	0800b541 	.word	0x0800b541
 800b5a8:	0800b541 	.word	0x0800b541
 800b5ac:	0800b6bb 	.word	0x0800b6bb
 800b5b0:	680b      	ldr	r3, [r1, #0]
 800b5b2:	1d1a      	adds	r2, r3, #4
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	600a      	str	r2, [r1, #0]
 800b5b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e0a3      	b.n	800b70c <_printf_i+0x1f4>
 800b5c4:	6825      	ldr	r5, [r4, #0]
 800b5c6:	6808      	ldr	r0, [r1, #0]
 800b5c8:	062e      	lsls	r6, r5, #24
 800b5ca:	f100 0304 	add.w	r3, r0, #4
 800b5ce:	d50a      	bpl.n	800b5e6 <_printf_i+0xce>
 800b5d0:	6805      	ldr	r5, [r0, #0]
 800b5d2:	600b      	str	r3, [r1, #0]
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	da03      	bge.n	800b5e0 <_printf_i+0xc8>
 800b5d8:	232d      	movs	r3, #45	; 0x2d
 800b5da:	426d      	negs	r5, r5
 800b5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e0:	485e      	ldr	r0, [pc, #376]	; (800b75c <_printf_i+0x244>)
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	e019      	b.n	800b61a <_printf_i+0x102>
 800b5e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5ea:	6805      	ldr	r5, [r0, #0]
 800b5ec:	600b      	str	r3, [r1, #0]
 800b5ee:	bf18      	it	ne
 800b5f0:	b22d      	sxthne	r5, r5
 800b5f2:	e7ef      	b.n	800b5d4 <_printf_i+0xbc>
 800b5f4:	680b      	ldr	r3, [r1, #0]
 800b5f6:	6825      	ldr	r5, [r4, #0]
 800b5f8:	1d18      	adds	r0, r3, #4
 800b5fa:	6008      	str	r0, [r1, #0]
 800b5fc:	0628      	lsls	r0, r5, #24
 800b5fe:	d501      	bpl.n	800b604 <_printf_i+0xec>
 800b600:	681d      	ldr	r5, [r3, #0]
 800b602:	e002      	b.n	800b60a <_printf_i+0xf2>
 800b604:	0669      	lsls	r1, r5, #25
 800b606:	d5fb      	bpl.n	800b600 <_printf_i+0xe8>
 800b608:	881d      	ldrh	r5, [r3, #0]
 800b60a:	4854      	ldr	r0, [pc, #336]	; (800b75c <_printf_i+0x244>)
 800b60c:	2f6f      	cmp	r7, #111	; 0x6f
 800b60e:	bf0c      	ite	eq
 800b610:	2308      	moveq	r3, #8
 800b612:	230a      	movne	r3, #10
 800b614:	2100      	movs	r1, #0
 800b616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b61a:	6866      	ldr	r6, [r4, #4]
 800b61c:	60a6      	str	r6, [r4, #8]
 800b61e:	2e00      	cmp	r6, #0
 800b620:	bfa2      	ittt	ge
 800b622:	6821      	ldrge	r1, [r4, #0]
 800b624:	f021 0104 	bicge.w	r1, r1, #4
 800b628:	6021      	strge	r1, [r4, #0]
 800b62a:	b90d      	cbnz	r5, 800b630 <_printf_i+0x118>
 800b62c:	2e00      	cmp	r6, #0
 800b62e:	d04d      	beq.n	800b6cc <_printf_i+0x1b4>
 800b630:	4616      	mov	r6, r2
 800b632:	fbb5 f1f3 	udiv	r1, r5, r3
 800b636:	fb03 5711 	mls	r7, r3, r1, r5
 800b63a:	5dc7      	ldrb	r7, [r0, r7]
 800b63c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b640:	462f      	mov	r7, r5
 800b642:	42bb      	cmp	r3, r7
 800b644:	460d      	mov	r5, r1
 800b646:	d9f4      	bls.n	800b632 <_printf_i+0x11a>
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d10b      	bne.n	800b664 <_printf_i+0x14c>
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	07df      	lsls	r7, r3, #31
 800b650:	d508      	bpl.n	800b664 <_printf_i+0x14c>
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	6861      	ldr	r1, [r4, #4]
 800b656:	4299      	cmp	r1, r3
 800b658:	bfde      	ittt	le
 800b65a:	2330      	movle	r3, #48	; 0x30
 800b65c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b660:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b664:	1b92      	subs	r2, r2, r6
 800b666:	6122      	str	r2, [r4, #16]
 800b668:	f8cd a000 	str.w	sl, [sp]
 800b66c:	464b      	mov	r3, r9
 800b66e:	aa03      	add	r2, sp, #12
 800b670:	4621      	mov	r1, r4
 800b672:	4640      	mov	r0, r8
 800b674:	f7ff fee2 	bl	800b43c <_printf_common>
 800b678:	3001      	adds	r0, #1
 800b67a:	d14c      	bne.n	800b716 <_printf_i+0x1fe>
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295
 800b680:	b004      	add	sp, #16
 800b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b686:	4835      	ldr	r0, [pc, #212]	; (800b75c <_printf_i+0x244>)
 800b688:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	680e      	ldr	r6, [r1, #0]
 800b690:	061f      	lsls	r7, r3, #24
 800b692:	f856 5b04 	ldr.w	r5, [r6], #4
 800b696:	600e      	str	r6, [r1, #0]
 800b698:	d514      	bpl.n	800b6c4 <_printf_i+0x1ac>
 800b69a:	07d9      	lsls	r1, r3, #31
 800b69c:	bf44      	itt	mi
 800b69e:	f043 0320 	orrmi.w	r3, r3, #32
 800b6a2:	6023      	strmi	r3, [r4, #0]
 800b6a4:	b91d      	cbnz	r5, 800b6ae <_printf_i+0x196>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	f023 0320 	bic.w	r3, r3, #32
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	e7b0      	b.n	800b614 <_printf_i+0xfc>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	f043 0320 	orr.w	r3, r3, #32
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	2378      	movs	r3, #120	; 0x78
 800b6bc:	4828      	ldr	r0, [pc, #160]	; (800b760 <_printf_i+0x248>)
 800b6be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6c2:	e7e3      	b.n	800b68c <_printf_i+0x174>
 800b6c4:	065e      	lsls	r6, r3, #25
 800b6c6:	bf48      	it	mi
 800b6c8:	b2ad      	uxthmi	r5, r5
 800b6ca:	e7e6      	b.n	800b69a <_printf_i+0x182>
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	e7bb      	b.n	800b648 <_printf_i+0x130>
 800b6d0:	680b      	ldr	r3, [r1, #0]
 800b6d2:	6826      	ldr	r6, [r4, #0]
 800b6d4:	6960      	ldr	r0, [r4, #20]
 800b6d6:	1d1d      	adds	r5, r3, #4
 800b6d8:	600d      	str	r5, [r1, #0]
 800b6da:	0635      	lsls	r5, r6, #24
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	d501      	bpl.n	800b6e4 <_printf_i+0x1cc>
 800b6e0:	6018      	str	r0, [r3, #0]
 800b6e2:	e002      	b.n	800b6ea <_printf_i+0x1d2>
 800b6e4:	0671      	lsls	r1, r6, #25
 800b6e6:	d5fb      	bpl.n	800b6e0 <_printf_i+0x1c8>
 800b6e8:	8018      	strh	r0, [r3, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	4616      	mov	r6, r2
 800b6f0:	e7ba      	b.n	800b668 <_printf_i+0x150>
 800b6f2:	680b      	ldr	r3, [r1, #0]
 800b6f4:	1d1a      	adds	r2, r3, #4
 800b6f6:	600a      	str	r2, [r1, #0]
 800b6f8:	681e      	ldr	r6, [r3, #0]
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7f4 fd7e 	bl	8000200 <memchr>
 800b704:	b108      	cbz	r0, 800b70a <_printf_i+0x1f2>
 800b706:	1b80      	subs	r0, r0, r6
 800b708:	6060      	str	r0, [r4, #4]
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	2300      	movs	r3, #0
 800b710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b714:	e7a8      	b.n	800b668 <_printf_i+0x150>
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	4632      	mov	r2, r6
 800b71a:	4649      	mov	r1, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	47d0      	blx	sl
 800b720:	3001      	adds	r0, #1
 800b722:	d0ab      	beq.n	800b67c <_printf_i+0x164>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	079b      	lsls	r3, r3, #30
 800b728:	d413      	bmi.n	800b752 <_printf_i+0x23a>
 800b72a:	68e0      	ldr	r0, [r4, #12]
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	4298      	cmp	r0, r3
 800b730:	bfb8      	it	lt
 800b732:	4618      	movlt	r0, r3
 800b734:	e7a4      	b.n	800b680 <_printf_i+0x168>
 800b736:	2301      	movs	r3, #1
 800b738:	4632      	mov	r2, r6
 800b73a:	4649      	mov	r1, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	47d0      	blx	sl
 800b740:	3001      	adds	r0, #1
 800b742:	d09b      	beq.n	800b67c <_printf_i+0x164>
 800b744:	3501      	adds	r5, #1
 800b746:	68e3      	ldr	r3, [r4, #12]
 800b748:	9903      	ldr	r1, [sp, #12]
 800b74a:	1a5b      	subs	r3, r3, r1
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	dcf2      	bgt.n	800b736 <_printf_i+0x21e>
 800b750:	e7eb      	b.n	800b72a <_printf_i+0x212>
 800b752:	2500      	movs	r5, #0
 800b754:	f104 0619 	add.w	r6, r4, #25
 800b758:	e7f5      	b.n	800b746 <_printf_i+0x22e>
 800b75a:	bf00      	nop
 800b75c:	0800d075 	.word	0x0800d075
 800b760:	0800d086 	.word	0x0800d086

0800b764 <iprintf>:
 800b764:	b40f      	push	{r0, r1, r2, r3}
 800b766:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <iprintf+0x2c>)
 800b768:	b513      	push	{r0, r1, r4, lr}
 800b76a:	681c      	ldr	r4, [r3, #0]
 800b76c:	b124      	cbz	r4, 800b778 <iprintf+0x14>
 800b76e:	69a3      	ldr	r3, [r4, #24]
 800b770:	b913      	cbnz	r3, 800b778 <iprintf+0x14>
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fa4e 	bl	800bc14 <__sinit>
 800b778:	ab05      	add	r3, sp, #20
 800b77a:	9a04      	ldr	r2, [sp, #16]
 800b77c:	68a1      	ldr	r1, [r4, #8]
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	4620      	mov	r0, r4
 800b782:	f7ff fd2b 	bl	800b1dc <_vfiprintf_r>
 800b786:	b002      	add	sp, #8
 800b788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b78c:	b004      	add	sp, #16
 800b78e:	4770      	bx	lr
 800b790:	2000000c 	.word	0x2000000c

0800b794 <_sbrk_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4d06      	ldr	r5, [pc, #24]	; (800b7b0 <_sbrk_r+0x1c>)
 800b798:	2300      	movs	r3, #0
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7fc fe5a 	bl	8008458 <_sbrk>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_sbrk_r+0x1a>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_sbrk_r+0x1a>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000390 	.word	0x20000390

0800b7b4 <siprintf>:
 800b7b4:	b40e      	push	{r1, r2, r3}
 800b7b6:	b500      	push	{lr}
 800b7b8:	b09c      	sub	sp, #112	; 0x70
 800b7ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b7bc:	9002      	str	r0, [sp, #8]
 800b7be:	9006      	str	r0, [sp, #24]
 800b7c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7c4:	4809      	ldr	r0, [pc, #36]	; (800b7ec <siprintf+0x38>)
 800b7c6:	9107      	str	r1, [sp, #28]
 800b7c8:	9104      	str	r1, [sp, #16]
 800b7ca:	4909      	ldr	r1, [pc, #36]	; (800b7f0 <siprintf+0x3c>)
 800b7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d0:	9105      	str	r1, [sp, #20]
 800b7d2:	6800      	ldr	r0, [r0, #0]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	a902      	add	r1, sp, #8
 800b7d8:	f000 fbc8 	bl	800bf6c <_svfiprintf_r>
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	b01c      	add	sp, #112	; 0x70
 800b7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e8:	b003      	add	sp, #12
 800b7ea:	4770      	bx	lr
 800b7ec:	2000000c 	.word	0x2000000c
 800b7f0:	ffff0208 	.word	0xffff0208

0800b7f4 <strchr>:
 800b7f4:	b2c9      	uxtb	r1, r1
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fc:	b11a      	cbz	r2, 800b806 <strchr+0x12>
 800b7fe:	428a      	cmp	r2, r1
 800b800:	d1f9      	bne.n	800b7f6 <strchr+0x2>
 800b802:	4618      	mov	r0, r3
 800b804:	4770      	bx	lr
 800b806:	2900      	cmp	r1, #0
 800b808:	bf18      	it	ne
 800b80a:	2300      	movne	r3, #0
 800b80c:	e7f9      	b.n	800b802 <strchr+0xe>

0800b80e <strcspn>:
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	4603      	mov	r3, r0
 800b812:	461e      	mov	r6, r3
 800b814:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b818:	b144      	cbz	r4, 800b82c <strcspn+0x1e>
 800b81a:	1e4a      	subs	r2, r1, #1
 800b81c:	e001      	b.n	800b822 <strcspn+0x14>
 800b81e:	42a5      	cmp	r5, r4
 800b820:	d004      	beq.n	800b82c <strcspn+0x1e>
 800b822:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b826:	2d00      	cmp	r5, #0
 800b828:	d1f9      	bne.n	800b81e <strcspn+0x10>
 800b82a:	e7f2      	b.n	800b812 <strcspn+0x4>
 800b82c:	1a30      	subs	r0, r6, r0
 800b82e:	bd70      	pop	{r4, r5, r6, pc}

0800b830 <strspn>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	4603      	mov	r3, r0
 800b834:	461e      	mov	r6, r3
 800b836:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b83a:	b13c      	cbz	r4, 800b84c <strspn+0x1c>
 800b83c:	1e4a      	subs	r2, r1, #1
 800b83e:	e001      	b.n	800b844 <strspn+0x14>
 800b840:	42a5      	cmp	r5, r4
 800b842:	d0f7      	beq.n	800b834 <strspn+0x4>
 800b844:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b848:	2d00      	cmp	r5, #0
 800b84a:	d1f9      	bne.n	800b840 <strspn+0x10>
 800b84c:	1a30      	subs	r0, r6, r0
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <__swbuf_r>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	460e      	mov	r6, r1
 800b854:	4614      	mov	r4, r2
 800b856:	4605      	mov	r5, r0
 800b858:	b118      	cbz	r0, 800b862 <__swbuf_r+0x12>
 800b85a:	6983      	ldr	r3, [r0, #24]
 800b85c:	b90b      	cbnz	r3, 800b862 <__swbuf_r+0x12>
 800b85e:	f000 f9d9 	bl	800bc14 <__sinit>
 800b862:	4b21      	ldr	r3, [pc, #132]	; (800b8e8 <__swbuf_r+0x98>)
 800b864:	429c      	cmp	r4, r3
 800b866:	d12b      	bne.n	800b8c0 <__swbuf_r+0x70>
 800b868:	686c      	ldr	r4, [r5, #4]
 800b86a:	69a3      	ldr	r3, [r4, #24]
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	071a      	lsls	r2, r3, #28
 800b872:	d52f      	bpl.n	800b8d4 <__swbuf_r+0x84>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	b36b      	cbz	r3, 800b8d4 <__swbuf_r+0x84>
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	1ac0      	subs	r0, r0, r3
 800b87e:	6963      	ldr	r3, [r4, #20]
 800b880:	b2f6      	uxtb	r6, r6
 800b882:	4283      	cmp	r3, r0
 800b884:	4637      	mov	r7, r6
 800b886:	dc04      	bgt.n	800b892 <__swbuf_r+0x42>
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f92e 	bl	800baec <_fflush_r>
 800b890:	bb30      	cbnz	r0, 800b8e0 <__swbuf_r+0x90>
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	3b01      	subs	r3, #1
 800b896:	60a3      	str	r3, [r4, #8]
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	701e      	strb	r6, [r3, #0]
 800b8a0:	6963      	ldr	r3, [r4, #20]
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	4283      	cmp	r3, r0
 800b8a6:	d004      	beq.n	800b8b2 <__swbuf_r+0x62>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	07db      	lsls	r3, r3, #31
 800b8ac:	d506      	bpl.n	800b8bc <__swbuf_r+0x6c>
 800b8ae:	2e0a      	cmp	r6, #10
 800b8b0:	d104      	bne.n	800b8bc <__swbuf_r+0x6c>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 f919 	bl	800baec <_fflush_r>
 800b8ba:	b988      	cbnz	r0, 800b8e0 <__swbuf_r+0x90>
 800b8bc:	4638      	mov	r0, r7
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <__swbuf_r+0x9c>)
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	d101      	bne.n	800b8ca <__swbuf_r+0x7a>
 800b8c6:	68ac      	ldr	r4, [r5, #8]
 800b8c8:	e7cf      	b.n	800b86a <__swbuf_r+0x1a>
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <__swbuf_r+0xa0>)
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	bf08      	it	eq
 800b8d0:	68ec      	ldreq	r4, [r5, #12]
 800b8d2:	e7ca      	b.n	800b86a <__swbuf_r+0x1a>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 f80c 	bl	800b8f4 <__swsetup_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d0cb      	beq.n	800b878 <__swbuf_r+0x28>
 800b8e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e4:	e7ea      	b.n	800b8bc <__swbuf_r+0x6c>
 800b8e6:	bf00      	nop
 800b8e8:	0800d0b8 	.word	0x0800d0b8
 800b8ec:	0800d0d8 	.word	0x0800d0d8
 800b8f0:	0800d098 	.word	0x0800d098

0800b8f4 <__swsetup_r>:
 800b8f4:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <__swsetup_r+0xcc>)
 800b8f6:	b570      	push	{r4, r5, r6, lr}
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	b125      	cbz	r5, 800b90a <__swsetup_r+0x16>
 800b900:	69ab      	ldr	r3, [r5, #24]
 800b902:	b913      	cbnz	r3, 800b90a <__swsetup_r+0x16>
 800b904:	4628      	mov	r0, r5
 800b906:	f000 f985 	bl	800bc14 <__sinit>
 800b90a:	4b2e      	ldr	r3, [pc, #184]	; (800b9c4 <__swsetup_r+0xd0>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d10f      	bne.n	800b930 <__swsetup_r+0x3c>
 800b910:	686c      	ldr	r4, [r5, #4]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b918:	0719      	lsls	r1, r3, #28
 800b91a:	d42c      	bmi.n	800b976 <__swsetup_r+0x82>
 800b91c:	06dd      	lsls	r5, r3, #27
 800b91e:	d411      	bmi.n	800b944 <__swsetup_r+0x50>
 800b920:	2309      	movs	r3, #9
 800b922:	6033      	str	r3, [r6, #0]
 800b924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	e03e      	b.n	800b9ae <__swsetup_r+0xba>
 800b930:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <__swsetup_r+0xd4>)
 800b932:	429c      	cmp	r4, r3
 800b934:	d101      	bne.n	800b93a <__swsetup_r+0x46>
 800b936:	68ac      	ldr	r4, [r5, #8]
 800b938:	e7eb      	b.n	800b912 <__swsetup_r+0x1e>
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <__swsetup_r+0xd8>)
 800b93c:	429c      	cmp	r4, r3
 800b93e:	bf08      	it	eq
 800b940:	68ec      	ldreq	r4, [r5, #12]
 800b942:	e7e6      	b.n	800b912 <__swsetup_r+0x1e>
 800b944:	0758      	lsls	r0, r3, #29
 800b946:	d512      	bpl.n	800b96e <__swsetup_r+0x7a>
 800b948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b94a:	b141      	cbz	r1, 800b95e <__swsetup_r+0x6a>
 800b94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__swsetup_r+0x66>
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff fb6d 	bl	800b034 <_free_r>
 800b95a:	2300      	movs	r3, #0
 800b95c:	6363      	str	r3, [r4, #52]	; 0x34
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b964:	81a3      	strh	r3, [r4, #12]
 800b966:	2300      	movs	r3, #0
 800b968:	6063      	str	r3, [r4, #4]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	f043 0308 	orr.w	r3, r3, #8
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	b94b      	cbnz	r3, 800b98e <__swsetup_r+0x9a>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b984:	d003      	beq.n	800b98e <__swsetup_r+0x9a>
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 fa07 	bl	800bd9c <__smakebuf_r>
 800b98e:	89a0      	ldrh	r0, [r4, #12]
 800b990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b994:	f010 0301 	ands.w	r3, r0, #1
 800b998:	d00a      	beq.n	800b9b0 <__swsetup_r+0xbc>
 800b99a:	2300      	movs	r3, #0
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6963      	ldr	r3, [r4, #20]
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	61a3      	str	r3, [r4, #24]
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	b943      	cbnz	r3, 800b9ba <__swsetup_r+0xc6>
 800b9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9ac:	d1ba      	bne.n	800b924 <__swsetup_r+0x30>
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	0781      	lsls	r1, r0, #30
 800b9b2:	bf58      	it	pl
 800b9b4:	6963      	ldrpl	r3, [r4, #20]
 800b9b6:	60a3      	str	r3, [r4, #8]
 800b9b8:	e7f4      	b.n	800b9a4 <__swsetup_r+0xb0>
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	e7f7      	b.n	800b9ae <__swsetup_r+0xba>
 800b9be:	bf00      	nop
 800b9c0:	2000000c 	.word	0x2000000c
 800b9c4:	0800d0b8 	.word	0x0800d0b8
 800b9c8:	0800d0d8 	.word	0x0800d0d8
 800b9cc:	0800d098 	.word	0x0800d098

0800b9d0 <abort>:
 800b9d0:	b508      	push	{r3, lr}
 800b9d2:	2006      	movs	r0, #6
 800b9d4:	f000 fbf2 	bl	800c1bc <raise>
 800b9d8:	2001      	movs	r0, #1
 800b9da:	f7fc fcc5 	bl	8008368 <_exit>
	...

0800b9e0 <__sflush_r>:
 800b9e0:	898a      	ldrh	r2, [r1, #12]
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	0710      	lsls	r0, r2, #28
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	d458      	bmi.n	800baa0 <__sflush_r+0xc0>
 800b9ee:	684b      	ldr	r3, [r1, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	dc05      	bgt.n	800ba00 <__sflush_r+0x20>
 800b9f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dc02      	bgt.n	800ba00 <__sflush_r+0x20>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba02:	2e00      	cmp	r6, #0
 800ba04:	d0f9      	beq.n	800b9fa <__sflush_r+0x1a>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba0c:	682f      	ldr	r7, [r5, #0]
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	d032      	beq.n	800ba78 <__sflush_r+0x98>
 800ba12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	075a      	lsls	r2, r3, #29
 800ba18:	d505      	bpl.n	800ba26 <__sflush_r+0x46>
 800ba1a:	6863      	ldr	r3, [r4, #4]
 800ba1c:	1ac0      	subs	r0, r0, r3
 800ba1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba20:	b10b      	cbz	r3, 800ba26 <__sflush_r+0x46>
 800ba22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba24:	1ac0      	subs	r0, r0, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba2c:	6a21      	ldr	r1, [r4, #32]
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b0      	blx	r6
 800ba32:	1c43      	adds	r3, r0, #1
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	d106      	bne.n	800ba46 <__sflush_r+0x66>
 800ba38:	6829      	ldr	r1, [r5, #0]
 800ba3a:	291d      	cmp	r1, #29
 800ba3c:	d82c      	bhi.n	800ba98 <__sflush_r+0xb8>
 800ba3e:	4a2a      	ldr	r2, [pc, #168]	; (800bae8 <__sflush_r+0x108>)
 800ba40:	40ca      	lsrs	r2, r1
 800ba42:	07d6      	lsls	r6, r2, #31
 800ba44:	d528      	bpl.n	800ba98 <__sflush_r+0xb8>
 800ba46:	2200      	movs	r2, #0
 800ba48:	6062      	str	r2, [r4, #4]
 800ba4a:	04d9      	lsls	r1, r3, #19
 800ba4c:	6922      	ldr	r2, [r4, #16]
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	d504      	bpl.n	800ba5c <__sflush_r+0x7c>
 800ba52:	1c42      	adds	r2, r0, #1
 800ba54:	d101      	bne.n	800ba5a <__sflush_r+0x7a>
 800ba56:	682b      	ldr	r3, [r5, #0]
 800ba58:	b903      	cbnz	r3, 800ba5c <__sflush_r+0x7c>
 800ba5a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba5e:	602f      	str	r7, [r5, #0]
 800ba60:	2900      	cmp	r1, #0
 800ba62:	d0ca      	beq.n	800b9fa <__sflush_r+0x1a>
 800ba64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba68:	4299      	cmp	r1, r3
 800ba6a:	d002      	beq.n	800ba72 <__sflush_r+0x92>
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f7ff fae1 	bl	800b034 <_free_r>
 800ba72:	2000      	movs	r0, #0
 800ba74:	6360      	str	r0, [r4, #52]	; 0x34
 800ba76:	e7c1      	b.n	800b9fc <__sflush_r+0x1c>
 800ba78:	6a21      	ldr	r1, [r4, #32]
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	47b0      	blx	r6
 800ba80:	1c41      	adds	r1, r0, #1
 800ba82:	d1c7      	bne.n	800ba14 <__sflush_r+0x34>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0c4      	beq.n	800ba14 <__sflush_r+0x34>
 800ba8a:	2b1d      	cmp	r3, #29
 800ba8c:	d001      	beq.n	800ba92 <__sflush_r+0xb2>
 800ba8e:	2b16      	cmp	r3, #22
 800ba90:	d101      	bne.n	800ba96 <__sflush_r+0xb6>
 800ba92:	602f      	str	r7, [r5, #0]
 800ba94:	e7b1      	b.n	800b9fa <__sflush_r+0x1a>
 800ba96:	89a3      	ldrh	r3, [r4, #12]
 800ba98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	e7ad      	b.n	800b9fc <__sflush_r+0x1c>
 800baa0:	690f      	ldr	r7, [r1, #16]
 800baa2:	2f00      	cmp	r7, #0
 800baa4:	d0a9      	beq.n	800b9fa <__sflush_r+0x1a>
 800baa6:	0793      	lsls	r3, r2, #30
 800baa8:	680e      	ldr	r6, [r1, #0]
 800baaa:	bf08      	it	eq
 800baac:	694b      	ldreq	r3, [r1, #20]
 800baae:	600f      	str	r7, [r1, #0]
 800bab0:	bf18      	it	ne
 800bab2:	2300      	movne	r3, #0
 800bab4:	eba6 0807 	sub.w	r8, r6, r7
 800bab8:	608b      	str	r3, [r1, #8]
 800baba:	f1b8 0f00 	cmp.w	r8, #0
 800babe:	dd9c      	ble.n	800b9fa <__sflush_r+0x1a>
 800bac0:	6a21      	ldr	r1, [r4, #32]
 800bac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bac4:	4643      	mov	r3, r8
 800bac6:	463a      	mov	r2, r7
 800bac8:	4628      	mov	r0, r5
 800baca:	47b0      	blx	r6
 800bacc:	2800      	cmp	r0, #0
 800bace:	dc06      	bgt.n	800bade <__sflush_r+0xfe>
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e78e      	b.n	800b9fc <__sflush_r+0x1c>
 800bade:	4407      	add	r7, r0
 800bae0:	eba8 0800 	sub.w	r8, r8, r0
 800bae4:	e7e9      	b.n	800baba <__sflush_r+0xda>
 800bae6:	bf00      	nop
 800bae8:	20400001 	.word	0x20400001

0800baec <_fflush_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	690b      	ldr	r3, [r1, #16]
 800baf0:	4605      	mov	r5, r0
 800baf2:	460c      	mov	r4, r1
 800baf4:	b913      	cbnz	r3, 800bafc <_fflush_r+0x10>
 800baf6:	2500      	movs	r5, #0
 800baf8:	4628      	mov	r0, r5
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	b118      	cbz	r0, 800bb06 <_fflush_r+0x1a>
 800bafe:	6983      	ldr	r3, [r0, #24]
 800bb00:	b90b      	cbnz	r3, 800bb06 <_fflush_r+0x1a>
 800bb02:	f000 f887 	bl	800bc14 <__sinit>
 800bb06:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <_fflush_r+0x6c>)
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	d11b      	bne.n	800bb44 <_fflush_r+0x58>
 800bb0c:	686c      	ldr	r4, [r5, #4]
 800bb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0ef      	beq.n	800baf6 <_fflush_r+0xa>
 800bb16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb18:	07d0      	lsls	r0, r2, #31
 800bb1a:	d404      	bmi.n	800bb26 <_fflush_r+0x3a>
 800bb1c:	0599      	lsls	r1, r3, #22
 800bb1e:	d402      	bmi.n	800bb26 <_fflush_r+0x3a>
 800bb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb22:	f000 f915 	bl	800bd50 <__retarget_lock_acquire_recursive>
 800bb26:	4628      	mov	r0, r5
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f7ff ff59 	bl	800b9e0 <__sflush_r>
 800bb2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb30:	07da      	lsls	r2, r3, #31
 800bb32:	4605      	mov	r5, r0
 800bb34:	d4e0      	bmi.n	800baf8 <_fflush_r+0xc>
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	059b      	lsls	r3, r3, #22
 800bb3a:	d4dd      	bmi.n	800baf8 <_fflush_r+0xc>
 800bb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb3e:	f000 f908 	bl	800bd52 <__retarget_lock_release_recursive>
 800bb42:	e7d9      	b.n	800baf8 <_fflush_r+0xc>
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <_fflush_r+0x70>)
 800bb46:	429c      	cmp	r4, r3
 800bb48:	d101      	bne.n	800bb4e <_fflush_r+0x62>
 800bb4a:	68ac      	ldr	r4, [r5, #8]
 800bb4c:	e7df      	b.n	800bb0e <_fflush_r+0x22>
 800bb4e:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <_fflush_r+0x74>)
 800bb50:	429c      	cmp	r4, r3
 800bb52:	bf08      	it	eq
 800bb54:	68ec      	ldreq	r4, [r5, #12]
 800bb56:	e7da      	b.n	800bb0e <_fflush_r+0x22>
 800bb58:	0800d0b8 	.word	0x0800d0b8
 800bb5c:	0800d0d8 	.word	0x0800d0d8
 800bb60:	0800d098 	.word	0x0800d098

0800bb64 <std>:
 800bb64:	2300      	movs	r3, #0
 800bb66:	b510      	push	{r4, lr}
 800bb68:	4604      	mov	r4, r0
 800bb6a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb72:	6083      	str	r3, [r0, #8]
 800bb74:	8181      	strh	r1, [r0, #12]
 800bb76:	6643      	str	r3, [r0, #100]	; 0x64
 800bb78:	81c2      	strh	r2, [r0, #14]
 800bb7a:	6183      	str	r3, [r0, #24]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	2208      	movs	r2, #8
 800bb80:	305c      	adds	r0, #92	; 0x5c
 800bb82:	f7ff fa4f 	bl	800b024 <memset>
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <std+0x38>)
 800bb88:	6263      	str	r3, [r4, #36]	; 0x24
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <std+0x3c>)
 800bb8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <std+0x40>)
 800bb90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <std+0x44>)
 800bb94:	6224      	str	r4, [r4, #32]
 800bb96:	6323      	str	r3, [r4, #48]	; 0x30
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0800c1f5 	.word	0x0800c1f5
 800bba0:	0800c217 	.word	0x0800c217
 800bba4:	0800c24f 	.word	0x0800c24f
 800bba8:	0800c273 	.word	0x0800c273

0800bbac <_cleanup_r>:
 800bbac:	4901      	ldr	r1, [pc, #4]	; (800bbb4 <_cleanup_r+0x8>)
 800bbae:	f000 b8af 	b.w	800bd10 <_fwalk_reent>
 800bbb2:	bf00      	nop
 800bbb4:	0800baed 	.word	0x0800baed

0800bbb8 <__sfmoreglue>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	1e4a      	subs	r2, r1, #1
 800bbbc:	2568      	movs	r5, #104	; 0x68
 800bbbe:	4355      	muls	r5, r2
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbc6:	f7ff fa85 	bl	800b0d4 <_malloc_r>
 800bbca:	4604      	mov	r4, r0
 800bbcc:	b140      	cbz	r0, 800bbe0 <__sfmoreglue+0x28>
 800bbce:	2100      	movs	r1, #0
 800bbd0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbd4:	300c      	adds	r0, #12
 800bbd6:	60a0      	str	r0, [r4, #8]
 800bbd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbdc:	f7ff fa22 	bl	800b024 <memset>
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}

0800bbe4 <__sfp_lock_acquire>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	; (800bbec <__sfp_lock_acquire+0x8>)
 800bbe6:	f000 b8b3 	b.w	800bd50 <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	2000038c 	.word	0x2000038c

0800bbf0 <__sfp_lock_release>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__sfp_lock_release+0x8>)
 800bbf2:	f000 b8ae 	b.w	800bd52 <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	2000038c 	.word	0x2000038c

0800bbfc <__sinit_lock_acquire>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__sinit_lock_acquire+0x8>)
 800bbfe:	f000 b8a7 	b.w	800bd50 <__retarget_lock_acquire_recursive>
 800bc02:	bf00      	nop
 800bc04:	20000387 	.word	0x20000387

0800bc08 <__sinit_lock_release>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__sinit_lock_release+0x8>)
 800bc0a:	f000 b8a2 	b.w	800bd52 <__retarget_lock_release_recursive>
 800bc0e:	bf00      	nop
 800bc10:	20000387 	.word	0x20000387

0800bc14 <__sinit>:
 800bc14:	b510      	push	{r4, lr}
 800bc16:	4604      	mov	r4, r0
 800bc18:	f7ff fff0 	bl	800bbfc <__sinit_lock_acquire>
 800bc1c:	69a3      	ldr	r3, [r4, #24]
 800bc1e:	b11b      	cbz	r3, 800bc28 <__sinit+0x14>
 800bc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc24:	f7ff bff0 	b.w	800bc08 <__sinit_lock_release>
 800bc28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc2c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <__sinit+0x68>)
 800bc30:	4a13      	ldr	r2, [pc, #76]	; (800bc80 <__sinit+0x6c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc36:	42a3      	cmp	r3, r4
 800bc38:	bf04      	itt	eq
 800bc3a:	2301      	moveq	r3, #1
 800bc3c:	61a3      	streq	r3, [r4, #24]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f820 	bl	800bc84 <__sfp>
 800bc44:	6060      	str	r0, [r4, #4]
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 f81c 	bl	800bc84 <__sfp>
 800bc4c:	60a0      	str	r0, [r4, #8]
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 f818 	bl	800bc84 <__sfp>
 800bc54:	2200      	movs	r2, #0
 800bc56:	60e0      	str	r0, [r4, #12]
 800bc58:	2104      	movs	r1, #4
 800bc5a:	6860      	ldr	r0, [r4, #4]
 800bc5c:	f7ff ff82 	bl	800bb64 <std>
 800bc60:	68a0      	ldr	r0, [r4, #8]
 800bc62:	2201      	movs	r2, #1
 800bc64:	2109      	movs	r1, #9
 800bc66:	f7ff ff7d 	bl	800bb64 <std>
 800bc6a:	68e0      	ldr	r0, [r4, #12]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	2112      	movs	r1, #18
 800bc70:	f7ff ff78 	bl	800bb64 <std>
 800bc74:	2301      	movs	r3, #1
 800bc76:	61a3      	str	r3, [r4, #24]
 800bc78:	e7d2      	b.n	800bc20 <__sinit+0xc>
 800bc7a:	bf00      	nop
 800bc7c:	0800d060 	.word	0x0800d060
 800bc80:	0800bbad 	.word	0x0800bbad

0800bc84 <__sfp>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	4607      	mov	r7, r0
 800bc88:	f7ff ffac 	bl	800bbe4 <__sfp_lock_acquire>
 800bc8c:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <__sfp+0x84>)
 800bc8e:	681e      	ldr	r6, [r3, #0]
 800bc90:	69b3      	ldr	r3, [r6, #24]
 800bc92:	b913      	cbnz	r3, 800bc9a <__sfp+0x16>
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ffbd 	bl	800bc14 <__sinit>
 800bc9a:	3648      	adds	r6, #72	; 0x48
 800bc9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	d503      	bpl.n	800bcac <__sfp+0x28>
 800bca4:	6833      	ldr	r3, [r6, #0]
 800bca6:	b30b      	cbz	r3, 800bcec <__sfp+0x68>
 800bca8:	6836      	ldr	r6, [r6, #0]
 800bcaa:	e7f7      	b.n	800bc9c <__sfp+0x18>
 800bcac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcb0:	b9d5      	cbnz	r5, 800bce8 <__sfp+0x64>
 800bcb2:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <__sfp+0x88>)
 800bcb4:	60e3      	str	r3, [r4, #12]
 800bcb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcba:	6665      	str	r5, [r4, #100]	; 0x64
 800bcbc:	f000 f847 	bl	800bd4e <__retarget_lock_init_recursive>
 800bcc0:	f7ff ff96 	bl	800bbf0 <__sfp_lock_release>
 800bcc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bccc:	6025      	str	r5, [r4, #0]
 800bcce:	61a5      	str	r5, [r4, #24]
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcd8:	f7ff f9a4 	bl	800b024 <memset>
 800bcdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bce4:	4620      	mov	r0, r4
 800bce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce8:	3468      	adds	r4, #104	; 0x68
 800bcea:	e7d9      	b.n	800bca0 <__sfp+0x1c>
 800bcec:	2104      	movs	r1, #4
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f7ff ff62 	bl	800bbb8 <__sfmoreglue>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	6030      	str	r0, [r6, #0]
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1d5      	bne.n	800bca8 <__sfp+0x24>
 800bcfc:	f7ff ff78 	bl	800bbf0 <__sfp_lock_release>
 800bd00:	230c      	movs	r3, #12
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	e7ee      	b.n	800bce4 <__sfp+0x60>
 800bd06:	bf00      	nop
 800bd08:	0800d060 	.word	0x0800d060
 800bd0c:	ffff0001 	.word	0xffff0001

0800bd10 <_fwalk_reent>:
 800bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	4606      	mov	r6, r0
 800bd16:	4688      	mov	r8, r1
 800bd18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd1c:	2700      	movs	r7, #0
 800bd1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd22:	f1b9 0901 	subs.w	r9, r9, #1
 800bd26:	d505      	bpl.n	800bd34 <_fwalk_reent+0x24>
 800bd28:	6824      	ldr	r4, [r4, #0]
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	d1f7      	bne.n	800bd1e <_fwalk_reent+0xe>
 800bd2e:	4638      	mov	r0, r7
 800bd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd34:	89ab      	ldrh	r3, [r5, #12]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d907      	bls.n	800bd4a <_fwalk_reent+0x3a>
 800bd3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	d003      	beq.n	800bd4a <_fwalk_reent+0x3a>
 800bd42:	4629      	mov	r1, r5
 800bd44:	4630      	mov	r0, r6
 800bd46:	47c0      	blx	r8
 800bd48:	4307      	orrs	r7, r0
 800bd4a:	3568      	adds	r5, #104	; 0x68
 800bd4c:	e7e9      	b.n	800bd22 <_fwalk_reent+0x12>

0800bd4e <__retarget_lock_init_recursive>:
 800bd4e:	4770      	bx	lr

0800bd50 <__retarget_lock_acquire_recursive>:
 800bd50:	4770      	bx	lr

0800bd52 <__retarget_lock_release_recursive>:
 800bd52:	4770      	bx	lr

0800bd54 <__swhatbuf_r>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	460e      	mov	r6, r1
 800bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	b096      	sub	sp, #88	; 0x58
 800bd60:	4614      	mov	r4, r2
 800bd62:	461d      	mov	r5, r3
 800bd64:	da07      	bge.n	800bd76 <__swhatbuf_r+0x22>
 800bd66:	2300      	movs	r3, #0
 800bd68:	602b      	str	r3, [r5, #0]
 800bd6a:	89b3      	ldrh	r3, [r6, #12]
 800bd6c:	061a      	lsls	r2, r3, #24
 800bd6e:	d410      	bmi.n	800bd92 <__swhatbuf_r+0x3e>
 800bd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd74:	e00e      	b.n	800bd94 <__swhatbuf_r+0x40>
 800bd76:	466a      	mov	r2, sp
 800bd78:	f000 faa2 	bl	800c2c0 <_fstat_r>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	dbf2      	blt.n	800bd66 <__swhatbuf_r+0x12>
 800bd80:	9a01      	ldr	r2, [sp, #4]
 800bd82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd8a:	425a      	negs	r2, r3
 800bd8c:	415a      	adcs	r2, r3
 800bd8e:	602a      	str	r2, [r5, #0]
 800bd90:	e7ee      	b.n	800bd70 <__swhatbuf_r+0x1c>
 800bd92:	2340      	movs	r3, #64	; 0x40
 800bd94:	2000      	movs	r0, #0
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	b016      	add	sp, #88	; 0x58
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}

0800bd9c <__smakebuf_r>:
 800bd9c:	898b      	ldrh	r3, [r1, #12]
 800bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda0:	079d      	lsls	r5, r3, #30
 800bda2:	4606      	mov	r6, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	d507      	bpl.n	800bdb8 <__smakebuf_r+0x1c>
 800bda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	6163      	str	r3, [r4, #20]
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	ab01      	add	r3, sp, #4
 800bdba:	466a      	mov	r2, sp
 800bdbc:	f7ff ffca 	bl	800bd54 <__swhatbuf_r>
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7ff f985 	bl	800b0d4 <_malloc_r>
 800bdca:	b948      	cbnz	r0, 800bde0 <__smakebuf_r+0x44>
 800bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd0:	059a      	lsls	r2, r3, #22
 800bdd2:	d4ef      	bmi.n	800bdb4 <__smakebuf_r+0x18>
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	f043 0302 	orr.w	r3, r3, #2
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	e7e3      	b.n	800bda8 <__smakebuf_r+0xc>
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <__smakebuf_r+0x7c>)
 800bde2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	6020      	str	r0, [r4, #0]
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	9b00      	ldr	r3, [sp, #0]
 800bdf0:	6163      	str	r3, [r4, #20]
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	6120      	str	r0, [r4, #16]
 800bdf6:	b15b      	cbz	r3, 800be10 <__smakebuf_r+0x74>
 800bdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f000 fa71 	bl	800c2e4 <_isatty_r>
 800be02:	b128      	cbz	r0, 800be10 <__smakebuf_r+0x74>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	f043 0301 	orr.w	r3, r3, #1
 800be0e:	81a3      	strh	r3, [r4, #12]
 800be10:	89a0      	ldrh	r0, [r4, #12]
 800be12:	4305      	orrs	r5, r0
 800be14:	81a5      	strh	r5, [r4, #12]
 800be16:	e7cd      	b.n	800bdb4 <__smakebuf_r+0x18>
 800be18:	0800bbad 	.word	0x0800bbad

0800be1c <memmove>:
 800be1c:	4288      	cmp	r0, r1
 800be1e:	b510      	push	{r4, lr}
 800be20:	eb01 0402 	add.w	r4, r1, r2
 800be24:	d902      	bls.n	800be2c <memmove+0x10>
 800be26:	4284      	cmp	r4, r0
 800be28:	4623      	mov	r3, r4
 800be2a:	d807      	bhi.n	800be3c <memmove+0x20>
 800be2c:	1e43      	subs	r3, r0, #1
 800be2e:	42a1      	cmp	r1, r4
 800be30:	d008      	beq.n	800be44 <memmove+0x28>
 800be32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be3a:	e7f8      	b.n	800be2e <memmove+0x12>
 800be3c:	4402      	add	r2, r0
 800be3e:	4601      	mov	r1, r0
 800be40:	428a      	cmp	r2, r1
 800be42:	d100      	bne.n	800be46 <memmove+0x2a>
 800be44:	bd10      	pop	{r4, pc}
 800be46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be4e:	e7f7      	b.n	800be40 <memmove+0x24>

0800be50 <__malloc_lock>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__malloc_lock+0x8>)
 800be52:	f7ff bf7d 	b.w	800bd50 <__retarget_lock_acquire_recursive>
 800be56:	bf00      	nop
 800be58:	20000388 	.word	0x20000388

0800be5c <__malloc_unlock>:
 800be5c:	4801      	ldr	r0, [pc, #4]	; (800be64 <__malloc_unlock+0x8>)
 800be5e:	f7ff bf78 	b.w	800bd52 <__retarget_lock_release_recursive>
 800be62:	bf00      	nop
 800be64:	20000388 	.word	0x20000388

0800be68 <_realloc_r>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4607      	mov	r7, r0
 800be6c:	4614      	mov	r4, r2
 800be6e:	460e      	mov	r6, r1
 800be70:	b921      	cbnz	r1, 800be7c <_realloc_r+0x14>
 800be72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be76:	4611      	mov	r1, r2
 800be78:	f7ff b92c 	b.w	800b0d4 <_malloc_r>
 800be7c:	b922      	cbnz	r2, 800be88 <_realloc_r+0x20>
 800be7e:	f7ff f8d9 	bl	800b034 <_free_r>
 800be82:	4625      	mov	r5, r4
 800be84:	4628      	mov	r0, r5
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	f000 fa4e 	bl	800c328 <_malloc_usable_size_r>
 800be8c:	42a0      	cmp	r0, r4
 800be8e:	d20f      	bcs.n	800beb0 <_realloc_r+0x48>
 800be90:	4621      	mov	r1, r4
 800be92:	4638      	mov	r0, r7
 800be94:	f7ff f91e 	bl	800b0d4 <_malloc_r>
 800be98:	4605      	mov	r5, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d0f2      	beq.n	800be84 <_realloc_r+0x1c>
 800be9e:	4631      	mov	r1, r6
 800bea0:	4622      	mov	r2, r4
 800bea2:	f7ff f8b1 	bl	800b008 <memcpy>
 800bea6:	4631      	mov	r1, r6
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff f8c3 	bl	800b034 <_free_r>
 800beae:	e7e9      	b.n	800be84 <_realloc_r+0x1c>
 800beb0:	4635      	mov	r5, r6
 800beb2:	e7e7      	b.n	800be84 <_realloc_r+0x1c>

0800beb4 <__ssputs_r>:
 800beb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb8:	688e      	ldr	r6, [r1, #8]
 800beba:	429e      	cmp	r6, r3
 800bebc:	4682      	mov	sl, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	4690      	mov	r8, r2
 800bec2:	461f      	mov	r7, r3
 800bec4:	d838      	bhi.n	800bf38 <__ssputs_r+0x84>
 800bec6:	898a      	ldrh	r2, [r1, #12]
 800bec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800becc:	d032      	beq.n	800bf34 <__ssputs_r+0x80>
 800bece:	6825      	ldr	r5, [r4, #0]
 800bed0:	6909      	ldr	r1, [r1, #16]
 800bed2:	eba5 0901 	sub.w	r9, r5, r1
 800bed6:	6965      	ldr	r5, [r4, #20]
 800bed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bedc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bee0:	3301      	adds	r3, #1
 800bee2:	444b      	add	r3, r9
 800bee4:	106d      	asrs	r5, r5, #1
 800bee6:	429d      	cmp	r5, r3
 800bee8:	bf38      	it	cc
 800beea:	461d      	movcc	r5, r3
 800beec:	0553      	lsls	r3, r2, #21
 800beee:	d531      	bpl.n	800bf54 <__ssputs_r+0xa0>
 800bef0:	4629      	mov	r1, r5
 800bef2:	f7ff f8ef 	bl	800b0d4 <_malloc_r>
 800bef6:	4606      	mov	r6, r0
 800bef8:	b950      	cbnz	r0, 800bf10 <__ssputs_r+0x5c>
 800befa:	230c      	movs	r3, #12
 800befc:	f8ca 3000 	str.w	r3, [sl]
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf06:	81a3      	strh	r3, [r4, #12]
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf10:	6921      	ldr	r1, [r4, #16]
 800bf12:	464a      	mov	r2, r9
 800bf14:	f7ff f878 	bl	800b008 <memcpy>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	6126      	str	r6, [r4, #16]
 800bf26:	6165      	str	r5, [r4, #20]
 800bf28:	444e      	add	r6, r9
 800bf2a:	eba5 0509 	sub.w	r5, r5, r9
 800bf2e:	6026      	str	r6, [r4, #0]
 800bf30:	60a5      	str	r5, [r4, #8]
 800bf32:	463e      	mov	r6, r7
 800bf34:	42be      	cmp	r6, r7
 800bf36:	d900      	bls.n	800bf3a <__ssputs_r+0x86>
 800bf38:	463e      	mov	r6, r7
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	4641      	mov	r1, r8
 800bf40:	f7ff ff6c 	bl	800be1c <memmove>
 800bf44:	68a3      	ldr	r3, [r4, #8]
 800bf46:	6822      	ldr	r2, [r4, #0]
 800bf48:	1b9b      	subs	r3, r3, r6
 800bf4a:	4432      	add	r2, r6
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6022      	str	r2, [r4, #0]
 800bf50:	2000      	movs	r0, #0
 800bf52:	e7db      	b.n	800bf0c <__ssputs_r+0x58>
 800bf54:	462a      	mov	r2, r5
 800bf56:	f7ff ff87 	bl	800be68 <_realloc_r>
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d1e1      	bne.n	800bf24 <__ssputs_r+0x70>
 800bf60:	6921      	ldr	r1, [r4, #16]
 800bf62:	4650      	mov	r0, sl
 800bf64:	f7ff f866 	bl	800b034 <_free_r>
 800bf68:	e7c7      	b.n	800befa <__ssputs_r+0x46>
	...

0800bf6c <_svfiprintf_r>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	4698      	mov	r8, r3
 800bf72:	898b      	ldrh	r3, [r1, #12]
 800bf74:	061b      	lsls	r3, r3, #24
 800bf76:	b09d      	sub	sp, #116	; 0x74
 800bf78:	4607      	mov	r7, r0
 800bf7a:	460d      	mov	r5, r1
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	d50e      	bpl.n	800bf9e <_svfiprintf_r+0x32>
 800bf80:	690b      	ldr	r3, [r1, #16]
 800bf82:	b963      	cbnz	r3, 800bf9e <_svfiprintf_r+0x32>
 800bf84:	2140      	movs	r1, #64	; 0x40
 800bf86:	f7ff f8a5 	bl	800b0d4 <_malloc_r>
 800bf8a:	6028      	str	r0, [r5, #0]
 800bf8c:	6128      	str	r0, [r5, #16]
 800bf8e:	b920      	cbnz	r0, 800bf9a <_svfiprintf_r+0x2e>
 800bf90:	230c      	movs	r3, #12
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	e0d1      	b.n	800c13e <_svfiprintf_r+0x1d2>
 800bf9a:	2340      	movs	r3, #64	; 0x40
 800bf9c:	616b      	str	r3, [r5, #20]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa2:	2320      	movs	r3, #32
 800bfa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfac:	2330      	movs	r3, #48	; 0x30
 800bfae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c158 <_svfiprintf_r+0x1ec>
 800bfb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfb6:	f04f 0901 	mov.w	r9, #1
 800bfba:	4623      	mov	r3, r4
 800bfbc:	469a      	mov	sl, r3
 800bfbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc2:	b10a      	cbz	r2, 800bfc8 <_svfiprintf_r+0x5c>
 800bfc4:	2a25      	cmp	r2, #37	; 0x25
 800bfc6:	d1f9      	bne.n	800bfbc <_svfiprintf_r+0x50>
 800bfc8:	ebba 0b04 	subs.w	fp, sl, r4
 800bfcc:	d00b      	beq.n	800bfe6 <_svfiprintf_r+0x7a>
 800bfce:	465b      	mov	r3, fp
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7ff ff6d 	bl	800beb4 <__ssputs_r>
 800bfda:	3001      	adds	r0, #1
 800bfdc:	f000 80aa 	beq.w	800c134 <_svfiprintf_r+0x1c8>
 800bfe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe2:	445a      	add	r2, fp
 800bfe4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfe6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 80a2 	beq.w	800c134 <_svfiprintf_r+0x1c8>
 800bff0:	2300      	movs	r3, #0
 800bff2:	f04f 32ff 	mov.w	r2, #4294967295
 800bff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bffa:	f10a 0a01 	add.w	sl, sl, #1
 800bffe:	9304      	str	r3, [sp, #16]
 800c000:	9307      	str	r3, [sp, #28]
 800c002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c006:	931a      	str	r3, [sp, #104]	; 0x68
 800c008:	4654      	mov	r4, sl
 800c00a:	2205      	movs	r2, #5
 800c00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c010:	4851      	ldr	r0, [pc, #324]	; (800c158 <_svfiprintf_r+0x1ec>)
 800c012:	f7f4 f8f5 	bl	8000200 <memchr>
 800c016:	9a04      	ldr	r2, [sp, #16]
 800c018:	b9d8      	cbnz	r0, 800c052 <_svfiprintf_r+0xe6>
 800c01a:	06d0      	lsls	r0, r2, #27
 800c01c:	bf44      	itt	mi
 800c01e:	2320      	movmi	r3, #32
 800c020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c024:	0711      	lsls	r1, r2, #28
 800c026:	bf44      	itt	mi
 800c028:	232b      	movmi	r3, #43	; 0x2b
 800c02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c02e:	f89a 3000 	ldrb.w	r3, [sl]
 800c032:	2b2a      	cmp	r3, #42	; 0x2a
 800c034:	d015      	beq.n	800c062 <_svfiprintf_r+0xf6>
 800c036:	9a07      	ldr	r2, [sp, #28]
 800c038:	4654      	mov	r4, sl
 800c03a:	2000      	movs	r0, #0
 800c03c:	f04f 0c0a 	mov.w	ip, #10
 800c040:	4621      	mov	r1, r4
 800c042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c046:	3b30      	subs	r3, #48	; 0x30
 800c048:	2b09      	cmp	r3, #9
 800c04a:	d94e      	bls.n	800c0ea <_svfiprintf_r+0x17e>
 800c04c:	b1b0      	cbz	r0, 800c07c <_svfiprintf_r+0x110>
 800c04e:	9207      	str	r2, [sp, #28]
 800c050:	e014      	b.n	800c07c <_svfiprintf_r+0x110>
 800c052:	eba0 0308 	sub.w	r3, r0, r8
 800c056:	fa09 f303 	lsl.w	r3, r9, r3
 800c05a:	4313      	orrs	r3, r2
 800c05c:	9304      	str	r3, [sp, #16]
 800c05e:	46a2      	mov	sl, r4
 800c060:	e7d2      	b.n	800c008 <_svfiprintf_r+0x9c>
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	1d19      	adds	r1, r3, #4
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	9103      	str	r1, [sp, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bfbb      	ittet	lt
 800c06e:	425b      	neglt	r3, r3
 800c070:	f042 0202 	orrlt.w	r2, r2, #2
 800c074:	9307      	strge	r3, [sp, #28]
 800c076:	9307      	strlt	r3, [sp, #28]
 800c078:	bfb8      	it	lt
 800c07a:	9204      	strlt	r2, [sp, #16]
 800c07c:	7823      	ldrb	r3, [r4, #0]
 800c07e:	2b2e      	cmp	r3, #46	; 0x2e
 800c080:	d10c      	bne.n	800c09c <_svfiprintf_r+0x130>
 800c082:	7863      	ldrb	r3, [r4, #1]
 800c084:	2b2a      	cmp	r3, #42	; 0x2a
 800c086:	d135      	bne.n	800c0f4 <_svfiprintf_r+0x188>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	1d1a      	adds	r2, r3, #4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	9203      	str	r2, [sp, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfb8      	it	lt
 800c094:	f04f 33ff 	movlt.w	r3, #4294967295
 800c098:	3402      	adds	r4, #2
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c168 <_svfiprintf_r+0x1fc>
 800c0a0:	7821      	ldrb	r1, [r4, #0]
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	4650      	mov	r0, sl
 800c0a6:	f7f4 f8ab 	bl	8000200 <memchr>
 800c0aa:	b140      	cbz	r0, 800c0be <_svfiprintf_r+0x152>
 800c0ac:	2340      	movs	r3, #64	; 0x40
 800c0ae:	eba0 000a 	sub.w	r0, r0, sl
 800c0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c0b6:	9b04      	ldr	r3, [sp, #16]
 800c0b8:	4303      	orrs	r3, r0
 800c0ba:	3401      	adds	r4, #1
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c2:	4826      	ldr	r0, [pc, #152]	; (800c15c <_svfiprintf_r+0x1f0>)
 800c0c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0c8:	2206      	movs	r2, #6
 800c0ca:	f7f4 f899 	bl	8000200 <memchr>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d038      	beq.n	800c144 <_svfiprintf_r+0x1d8>
 800c0d2:	4b23      	ldr	r3, [pc, #140]	; (800c160 <_svfiprintf_r+0x1f4>)
 800c0d4:	bb1b      	cbnz	r3, 800c11e <_svfiprintf_r+0x1b2>
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	3307      	adds	r3, #7
 800c0da:	f023 0307 	bic.w	r3, r3, #7
 800c0de:	3308      	adds	r3, #8
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	4433      	add	r3, r6
 800c0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e8:	e767      	b.n	800bfba <_svfiprintf_r+0x4e>
 800c0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	e7a5      	b.n	800c040 <_svfiprintf_r+0xd4>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	3401      	adds	r4, #1
 800c0f8:	9305      	str	r3, [sp, #20]
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	f04f 0c0a 	mov.w	ip, #10
 800c100:	4620      	mov	r0, r4
 800c102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c106:	3a30      	subs	r2, #48	; 0x30
 800c108:	2a09      	cmp	r2, #9
 800c10a:	d903      	bls.n	800c114 <_svfiprintf_r+0x1a8>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0c5      	beq.n	800c09c <_svfiprintf_r+0x130>
 800c110:	9105      	str	r1, [sp, #20]
 800c112:	e7c3      	b.n	800c09c <_svfiprintf_r+0x130>
 800c114:	fb0c 2101 	mla	r1, ip, r1, r2
 800c118:	4604      	mov	r4, r0
 800c11a:	2301      	movs	r3, #1
 800c11c:	e7f0      	b.n	800c100 <_svfiprintf_r+0x194>
 800c11e:	ab03      	add	r3, sp, #12
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	462a      	mov	r2, r5
 800c124:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <_svfiprintf_r+0x1f8>)
 800c126:	a904      	add	r1, sp, #16
 800c128:	4638      	mov	r0, r7
 800c12a:	f3af 8000 	nop.w
 800c12e:	1c42      	adds	r2, r0, #1
 800c130:	4606      	mov	r6, r0
 800c132:	d1d6      	bne.n	800c0e2 <_svfiprintf_r+0x176>
 800c134:	89ab      	ldrh	r3, [r5, #12]
 800c136:	065b      	lsls	r3, r3, #25
 800c138:	f53f af2c 	bmi.w	800bf94 <_svfiprintf_r+0x28>
 800c13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c13e:	b01d      	add	sp, #116	; 0x74
 800c140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c144:	ab03      	add	r3, sp, #12
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	462a      	mov	r2, r5
 800c14a:	4b06      	ldr	r3, [pc, #24]	; (800c164 <_svfiprintf_r+0x1f8>)
 800c14c:	a904      	add	r1, sp, #16
 800c14e:	4638      	mov	r0, r7
 800c150:	f7ff f9e2 	bl	800b518 <_printf_i>
 800c154:	e7eb      	b.n	800c12e <_svfiprintf_r+0x1c2>
 800c156:	bf00      	nop
 800c158:	0800d064 	.word	0x0800d064
 800c15c:	0800d06e 	.word	0x0800d06e
 800c160:	00000000 	.word	0x00000000
 800c164:	0800beb5 	.word	0x0800beb5
 800c168:	0800d06a 	.word	0x0800d06a

0800c16c <_raise_r>:
 800c16c:	291f      	cmp	r1, #31
 800c16e:	b538      	push	{r3, r4, r5, lr}
 800c170:	4604      	mov	r4, r0
 800c172:	460d      	mov	r5, r1
 800c174:	d904      	bls.n	800c180 <_raise_r+0x14>
 800c176:	2316      	movs	r3, #22
 800c178:	6003      	str	r3, [r0, #0]
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c182:	b112      	cbz	r2, 800c18a <_raise_r+0x1e>
 800c184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c188:	b94b      	cbnz	r3, 800c19e <_raise_r+0x32>
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 f830 	bl	800c1f0 <_getpid_r>
 800c190:	462a      	mov	r2, r5
 800c192:	4601      	mov	r1, r0
 800c194:	4620      	mov	r0, r4
 800c196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c19a:	f000 b817 	b.w	800c1cc <_kill_r>
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d00a      	beq.n	800c1b8 <_raise_r+0x4c>
 800c1a2:	1c59      	adds	r1, r3, #1
 800c1a4:	d103      	bne.n	800c1ae <_raise_r+0x42>
 800c1a6:	2316      	movs	r3, #22
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	e7e7      	b.n	800c17e <_raise_r+0x12>
 800c1ae:	2400      	movs	r4, #0
 800c1b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	4798      	blx	r3
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e7e0      	b.n	800c17e <_raise_r+0x12>

0800c1bc <raise>:
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <raise+0xc>)
 800c1be:	4601      	mov	r1, r0
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f7ff bfd3 	b.w	800c16c <_raise_r>
 800c1c6:	bf00      	nop
 800c1c8:	2000000c 	.word	0x2000000c

0800c1cc <_kill_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d07      	ldr	r5, [pc, #28]	; (800c1ec <_kill_r+0x20>)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	f7fc f8b5 	bl	8008348 <_kill>
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	d102      	bne.n	800c1e8 <_kill_r+0x1c>
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	b103      	cbz	r3, 800c1e8 <_kill_r+0x1c>
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20000390 	.word	0x20000390

0800c1f0 <_getpid_r>:
 800c1f0:	f7fc b8a2 	b.w	8008338 <_getpid>

0800c1f4 <__sread>:
 800c1f4:	b510      	push	{r4, lr}
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fc:	f000 f89c 	bl	800c338 <_read_r>
 800c200:	2800      	cmp	r0, #0
 800c202:	bfab      	itete	ge
 800c204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c206:	89a3      	ldrhlt	r3, [r4, #12]
 800c208:	181b      	addge	r3, r3, r0
 800c20a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c20e:	bfac      	ite	ge
 800c210:	6563      	strge	r3, [r4, #84]	; 0x54
 800c212:	81a3      	strhlt	r3, [r4, #12]
 800c214:	bd10      	pop	{r4, pc}

0800c216 <__swrite>:
 800c216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	461f      	mov	r7, r3
 800c21c:	898b      	ldrh	r3, [r1, #12]
 800c21e:	05db      	lsls	r3, r3, #23
 800c220:	4605      	mov	r5, r0
 800c222:	460c      	mov	r4, r1
 800c224:	4616      	mov	r6, r2
 800c226:	d505      	bpl.n	800c234 <__swrite+0x1e>
 800c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22c:	2302      	movs	r3, #2
 800c22e:	2200      	movs	r2, #0
 800c230:	f000 f868 	bl	800c304 <_lseek_r>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c23a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	4632      	mov	r2, r6
 800c242:	463b      	mov	r3, r7
 800c244:	4628      	mov	r0, r5
 800c246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c24a:	f000 b817 	b.w	800c27c <_write_r>

0800c24e <__sseek>:
 800c24e:	b510      	push	{r4, lr}
 800c250:	460c      	mov	r4, r1
 800c252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c256:	f000 f855 	bl	800c304 <_lseek_r>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	bf15      	itete	ne
 800c260:	6560      	strne	r0, [r4, #84]	; 0x54
 800c262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c26a:	81a3      	strheq	r3, [r4, #12]
 800c26c:	bf18      	it	ne
 800c26e:	81a3      	strhne	r3, [r4, #12]
 800c270:	bd10      	pop	{r4, pc}

0800c272 <__sclose>:
 800c272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c276:	f000 b813 	b.w	800c2a0 <_close_r>
	...

0800c27c <_write_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d07      	ldr	r5, [pc, #28]	; (800c29c <_write_r+0x20>)
 800c280:	4604      	mov	r4, r0
 800c282:	4608      	mov	r0, r1
 800c284:	4611      	mov	r1, r2
 800c286:	2200      	movs	r2, #0
 800c288:	602a      	str	r2, [r5, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	f7fc f893 	bl	80083b6 <_write>
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	d102      	bne.n	800c29a <_write_r+0x1e>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	b103      	cbz	r3, 800c29a <_write_r+0x1e>
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	bd38      	pop	{r3, r4, r5, pc}
 800c29c:	20000390 	.word	0x20000390

0800c2a0 <_close_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d06      	ldr	r5, [pc, #24]	; (800c2bc <_close_r+0x1c>)
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	602b      	str	r3, [r5, #0]
 800c2ac:	f7fc f89f 	bl	80083ee <_close>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_close_r+0x1a>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_close_r+0x1a>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	20000390 	.word	0x20000390

0800c2c0 <_fstat_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_fstat_r+0x20>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	f7fc f89a 	bl	8008406 <_fstat>
 800c2d2:	1c43      	adds	r3, r0, #1
 800c2d4:	d102      	bne.n	800c2dc <_fstat_r+0x1c>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	b103      	cbz	r3, 800c2dc <_fstat_r+0x1c>
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000390 	.word	0x20000390

0800c2e4 <_isatty_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d06      	ldr	r5, [pc, #24]	; (800c300 <_isatty_r+0x1c>)
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	f7fc f899 	bl	8008426 <_isatty>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_isatty_r+0x1a>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_isatty_r+0x1a>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000390 	.word	0x20000390

0800c304 <_lseek_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	; (800c324 <_lseek_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7fc f892 	bl	800843c <_lseek>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_lseek_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_lseek_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000390 	.word	0x20000390

0800c328 <_malloc_usable_size_r>:
 800c328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32c:	1f18      	subs	r0, r3, #4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbc      	itt	lt
 800c332:	580b      	ldrlt	r3, [r1, r0]
 800c334:	18c0      	addlt	r0, r0, r3
 800c336:	4770      	bx	lr

0800c338 <_read_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d07      	ldr	r5, [pc, #28]	; (800c358 <_read_r+0x20>)
 800c33c:	4604      	mov	r4, r0
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	2200      	movs	r2, #0
 800c344:	602a      	str	r2, [r5, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f7fc f818 	bl	800837c <_read>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_read_r+0x1e>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_read_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20000390 	.word	0x20000390

0800c35c <_init>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr

0800c368 <_fini>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr
